import require$$0$1 from "events";
import require$$0$2 from "buffer";
import Url from "url";
import require$$0$3 from "punycode";
import require$$0$4 from "assert";
import require$$3$1 from "util";
function _mergeNamespaces(n, m) {
  for (var i = 0; i < m.length; i++) {
    const e = m[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: () => e[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license
 * @builder.io/qwik 0.9.0
 * Copyright Builder.io, Inc. All Rights Reserved.
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/BuilderIO/qwik/blob/main/LICENSE
 */
const EMPTY_ARRAY$1 = [];
const EMPTY_OBJ$1 = {};
const isSerializableObject = (v) => {
  const proto = Object.getPrototypeOf(v);
  return proto === Object.prototype || null === proto;
};
const isObject = (v) => v && "object" == typeof v;
const isArray = (v) => Array.isArray(v);
const isString = (v) => "string" == typeof v;
const isFunction = (v) => "function" == typeof v;
const QSlot = "q:slot";
const isPromise = (value) => value instanceof Promise;
const safeCall = (call2, thenFn, rejectFn) => {
  try {
    const promise = call2();
    return isPromise(promise) ? promise.then(thenFn, rejectFn) : thenFn(promise);
  } catch (e) {
    return rejectFn(e);
  }
};
const then = (promise, thenFn) => isPromise(promise) ? promise.then(thenFn) : thenFn(promise);
const promiseAll = (promises) => promises.some(isPromise) ? Promise.all(promises) : promises;
const isNotNullable = (v) => null != v;
const delay = (timeout) => new Promise((resolve) => {
  setTimeout(resolve, timeout);
});
let _context;
const tryGetInvokeContext = () => {
  if (!_context) {
    const context = "undefined" != typeof document && document && document.__q_context__;
    if (!context) {
      return;
    }
    return isArray(context) ? document.__q_context__ = newInvokeContextFromTuple(context) : context;
  }
  return _context;
};
const getInvokeContext = () => {
  const ctx = tryGetInvokeContext();
  if (!ctx) {
    throw qError(QError_useMethodOutsideContext);
  }
  return ctx;
};
const useInvokeContext = () => {
  const ctx = getInvokeContext();
  if ("qRender" !== ctx.$event$) {
    throw qError(QError_useInvokeContext);
  }
  return ctx.$hostElement$, ctx.$waitOn$, ctx.$renderCtx$, ctx.$subscriber$, ctx;
};
const invoke = (context, fn, ...args) => {
  const previousContext = _context;
  let returnValue;
  try {
    _context = context, returnValue = fn.apply(null, args);
  } finally {
    _context = previousContext;
  }
  return returnValue;
};
const waitAndRun = (ctx, callback) => {
  const waitOn = ctx.$waitOn$;
  if (0 === waitOn.length) {
    const result = callback();
    isPromise(result) && waitOn.push(result);
  } else {
    waitOn.push(Promise.all(waitOn).then(callback));
  }
};
const newInvokeContextFromTuple = (context) => {
  const element = context[0];
  return newInvokeContext(void 0, element, context[1], context[2]);
};
const newInvokeContext = (hostElement, element, event, url) => ({
  $seq$: 0,
  $hostElement$: hostElement,
  $element$: element,
  $event$: event,
  $url$: url,
  $qrl$: void 0,
  $props$: void 0,
  $renderCtx$: void 0,
  $subscriber$: void 0,
  $waitOn$: void 0
});
const getWrappingContainer = (el) => el.closest("[q\\:container]");
const isNode = (value) => value && "number" == typeof value.nodeType;
const isDocument = (value) => value && 9 === value.nodeType;
const isElement = (value) => 1 === value.nodeType;
const isQwikElement = (value) => isNode(value) && (1 === value.nodeType || 111 === value.nodeType);
const isVirtualElement = (value) => 111 === value.nodeType;
const isModule = (module) => isObject(module) && "Module" === module[Symbol.toStringTag];
let _platform = (() => {
  const moduleCache = /* @__PURE__ */ new Map();
  return {
    isServer: false,
    importSymbol(containerEl, url, symbolName) {
      const urlDoc = ((doc, containerEl2, url2) => {
        var _a2;
        const baseURI = doc.baseURI;
        const base = new URL((_a2 = containerEl2.getAttribute("q:base")) != null ? _a2 : baseURI, baseURI);
        return new URL(url2, base);
      })(containerEl.ownerDocument, containerEl, url).toString();
      const urlCopy = new URL(urlDoc);
      urlCopy.hash = "", urlCopy.search = "";
      const importURL = urlCopy.href;
      const mod = moduleCache.get(importURL);
      return mod ? mod[symbolName] : import(importURL).then((mod2) => {
        return module = mod2, mod2 = Object.values(module).find(isModule) || module, moduleCache.set(importURL, mod2), mod2[symbolName];
        var module;
      });
    },
    raf: (fn) => new Promise((resolve) => {
      requestAnimationFrame(() => {
        resolve(fn());
      });
    }),
    nextTick: (fn) => new Promise((resolve) => {
      setTimeout(() => {
        resolve(fn());
      });
    }),
    chunkForSymbol() {
    }
  };
})();
const setPlatform = (plt) => _platform = plt;
const getPlatform = () => _platform;
const isServer$1 = () => _platform.isServer;
const directSetAttribute = (el, prop, value) => el.setAttribute(prop, value);
const directGetAttribute = (el, prop) => el.getAttribute(prop);
const ON_PROP_REGEX = /^(on|window:|document:)/;
const isOnProp = (prop) => prop.endsWith("$") && ON_PROP_REGEX.test(prop);
const addQRLListener = (listenersMap, prop, input) => {
  let existingListeners = listenersMap[prop];
  existingListeners || (listenersMap[prop] = existingListeners = []);
  for (const qrl of input) {
    const hash = qrl.$hash$;
    let replaced = false;
    for (let i = 0; i < existingListeners.length; i++) {
      if (existingListeners[i].$hash$ === hash) {
        existingListeners.splice(i, 1, qrl), replaced = true;
        break;
      }
    }
    replaced || existingListeners.push(qrl);
  }
  return false;
};
const setEvent = (listenerMap, prop, input) => {
  prop.endsWith("$");
  const qrls = isArray(input) ? input.map(ensureQrl) : [ensureQrl(input)];
  return prop = normalizeOnProp(prop.slice(0, -1)), addQRLListener(listenerMap, prop, qrls), prop;
};
const ensureQrl = (value) => isQrl$1(value) ? value : $(value);
const getDomListeners = (ctx, containerEl) => {
  const attributes = ctx.$element$.attributes;
  const listeners = {};
  for (let i = 0; i < attributes.length; i++) {
    const { name: name2, value } = attributes.item(i);
    if (name2.startsWith("on:") || name2.startsWith("on-window:") || name2.startsWith("on-document:")) {
      let array = listeners[name2];
      array || (listeners[name2] = array = []);
      const urls = value.split("\n");
      for (const url of urls) {
        const qrl = parseQRL(url, containerEl);
        qrl.$capture$ && inflateQrl(qrl, ctx), array.push(qrl);
      }
    }
  }
  return listeners;
};
const useSequentialScope = () => {
  const ctx = useInvokeContext();
  const i = ctx.$seq$;
  const hostElement = ctx.$hostElement$;
  const elCtx = getContext(hostElement);
  const seq = elCtx.$seq$ ? elCtx.$seq$ : elCtx.$seq$ = [];
  return ctx.$seq$++, {
    get: seq[i],
    set: (value) => seq[i] = value,
    i,
    ctx
  };
};
const useOn = (event, eventQrl) => _useOn(`on-${event}`, eventQrl);
const _useOn = (eventName, eventQrl) => {
  const invokeCtx = useInvokeContext();
  const ctx = getContext(invokeCtx.$hostElement$);
  addQRLListener(ctx.li, normalizeOnProp(eventName), [eventQrl]);
};
const getDocument = (node) => "undefined" != typeof document ? document : 9 === node.nodeType ? node : node.ownerDocument;
const jsx = (type, props, key) => {
  const processed = null == key ? null : String(key);
  return new JSXNodeImpl(type, props, processed);
};
class JSXNodeImpl {
  constructor(type, props, key = null) {
    this.type = type, this.props = props, this.key = key;
  }
}
const isJSXNode = (n) => n instanceof JSXNodeImpl;
const Fragment = (props) => props.children;
const SkipRender = Symbol("skip render");
const SSRComment = () => null;
const Virtual = (props) => props.children;
const InternalSSRStream = () => null;
const fromCamelToKebabCase = (text) => text.replace(/([A-Z])/g, "-$1").toLowerCase();
const setAttribute = (ctx, el, prop, value) => {
  ctx ? ctx.$operations$.push({
    $operation$: _setAttribute,
    $args$: [el, prop, value]
  }) : _setAttribute(el, prop, value);
};
const _setAttribute = (el, prop, value) => {
  if (null == value || false === value) {
    el.removeAttribute(prop);
  } else {
    const str = true === value ? "" : String(value);
    directSetAttribute(el, prop, str);
  }
};
const setProperty = (ctx, node, key, value) => {
  ctx ? ctx.$operations$.push({
    $operation$: _setProperty,
    $args$: [node, key, value]
  }) : _setProperty(node, key, value);
};
const _setProperty = (node, key, value) => {
  try {
    node[key] = value;
  } catch (err2) {
    logError(codeToText(QError_setProperty), {
      node,
      key,
      value
    }, err2);
  }
};
const createElement = (doc, expectTag, isSvg) => isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);
const insertBefore = (ctx, parent, newChild, refChild) => (ctx.$operations$.push({
  $operation$: directInsertBefore,
  $args$: [parent, newChild, refChild || null]
}), newChild);
const appendChild = (ctx, parent, newChild) => (ctx.$operations$.push({
  $operation$: directAppendChild,
  $args$: [parent, newChild]
}), newChild);
const appendHeadStyle = (ctx, styleTask) => {
  ctx.$containerState$.$styleIds$.add(styleTask.styleId), ctx.$postOperations$.push({
    $operation$: _appendHeadStyle,
    $args$: [ctx.$containerState$.$containerEl$, styleTask]
  });
};
const _setClasslist = (elm, toRemove, toAdd) => {
  const classList = elm.classList;
  classList.remove(...toRemove), classList.add(...toAdd);
};
const _appendHeadStyle = (containerEl, styleTask) => {
  const doc = getDocument(containerEl);
  const isDoc = doc.documentElement === containerEl;
  const headEl = doc.head;
  const style = doc.createElement("style");
  directSetAttribute(style, "q:style", styleTask.styleId), style.textContent = styleTask.content, isDoc && headEl ? directAppendChild(headEl, style) : directInsertBefore(containerEl, style, containerEl.firstChild);
};
const removeNode = (ctx, el) => {
  ctx.$operations$.push({
    $operation$: _removeNode,
    $args$: [el, ctx]
  });
};
const _removeNode = (el, staticCtx) => {
  const parent = el.parentElement;
  if (parent) {
    if (1 === el.nodeType || 111 === el.nodeType) {
      const subsManager = staticCtx.$containerState$.$subsManager$;
      cleanupTree(el, staticCtx, subsManager, true);
    }
    directRemoveChild(parent, el);
  }
};
const createTemplate = (doc, slotName) => {
  const template = createElement(doc, "q:template", false);
  return directSetAttribute(template, QSlot, slotName), directSetAttribute(template, "hidden", ""), directSetAttribute(template, "aria-hidden", "true"), template;
};
const executeDOMRender = (ctx) => {
  for (const op of ctx.$operations$) {
    op.$operation$.apply(void 0, op.$args$);
  }
  resolveSlotProjection(ctx);
};
const getKey = (el) => directGetAttribute(el, "q:key");
const setKey = (el, key) => {
  null !== key && directSetAttribute(el, "q:key", key);
};
const resolveSlotProjection = (ctx) => {
  const subsManager = ctx.$containerState$.$subsManager$;
  ctx.$rmSlots$.forEach((slotEl) => {
    const key = getKey(slotEl);
    const slotChildren = getChildren(slotEl, "root");
    if (slotChildren.length > 0) {
      const sref = slotEl.getAttribute("q:sref");
      const hostCtx = ctx.$roots$.find((r) => r.$id$ === sref);
      if (hostCtx) {
        const template = createTemplate(ctx.$doc$, key);
        const hostElm = hostCtx.$element$;
        for (const child of slotChildren) {
          directAppendChild(template, child);
        }
        directInsertBefore(hostElm, template, hostElm.firstChild);
      } else {
        cleanupTree(slotEl, ctx, subsManager, false);
      }
    }
  }), ctx.$addSlots$.forEach(([slotEl, hostElm]) => {
    const key = getKey(slotEl);
    const template = Array.from(hostElm.childNodes).find((node) => isSlotTemplate(node) && node.getAttribute(QSlot) === key);
    template && (getChildren(template, "root").forEach((child) => {
      directAppendChild(slotEl, child);
    }), template.remove());
  });
};
class VirtualElementImpl {
  constructor(open, close) {
    this.open = open, this.close = close, this._qc_ = null, this.nodeType = 111, this.localName = ":virtual", this.nodeName = ":virtual";
    const doc = this.ownerDocument = open.ownerDocument;
    this.template = createElement(doc, "template", false), this.attributes = ((str) => {
      if (!str) {
        return /* @__PURE__ */ new Map();
      }
      const attributes = str.split(" ");
      return new Map(attributes.map((attr) => {
        const index2 = attr.indexOf("=");
        return index2 >= 0 ? [attr.slice(0, index2), (s = attr.slice(index2 + 1), s.replace(/\+/g, " "))] : [attr, ""];
        var s;
      }));
    })(open.data.slice(3)), open.data.startsWith("qv "), open.__virtual = this;
  }
  insertBefore(node, ref) {
    const parent = this.parentElement;
    if (parent) {
      const ref2 = ref || this.close;
      parent.insertBefore(node, ref2);
    } else {
      this.template.insertBefore(node, ref);
    }
    return node;
  }
  remove() {
    const parent = this.parentElement;
    if (parent) {
      const ch = Array.from(this.childNodes);
      this.template.childElementCount, parent.removeChild(this.open), this.template.append(...ch), parent.removeChild(this.close);
    }
  }
  appendChild(node) {
    return this.insertBefore(node, null);
  }
  insertBeforeTo(newParent, child) {
    const ch = Array.from(this.childNodes);
    newParent.insertBefore(this.open, child);
    for (const c of ch) {
      newParent.insertBefore(c, child);
    }
    newParent.insertBefore(this.close, child), this.template.childElementCount;
  }
  appendTo(newParent) {
    this.insertBeforeTo(newParent, null);
  }
  removeChild(child) {
    this.parentElement ? this.parentElement.removeChild(child) : this.template.removeChild(child);
  }
  getAttribute(prop) {
    var _a2;
    return (_a2 = this.attributes.get(prop)) != null ? _a2 : null;
  }
  hasAttribute(prop) {
    return this.attributes.has(prop);
  }
  setAttribute(prop, value) {
    this.attributes.set(prop, value), this.open.data = updateComment(this.attributes);
  }
  removeAttribute(prop) {
    this.attributes.delete(prop), this.open.data = updateComment(this.attributes);
  }
  matches(_) {
    return false;
  }
  compareDocumentPosition(other) {
    return this.open.compareDocumentPosition(other);
  }
  closest(query) {
    const parent = this.parentElement;
    return parent ? parent.closest(query) : null;
  }
  querySelectorAll(query) {
    const result = [];
    return getChildren(this, "elements").forEach((el) => {
      isQwikElement(el) && (el.matches(query) && result.push(el), result.concat(Array.from(el.querySelectorAll(query))));
    }), result;
  }
  querySelector(query) {
    for (const el of this.childNodes) {
      if (isElement(el)) {
        if (el.matches(query)) {
          return el;
        }
        const v = el.querySelector(query);
        if (null !== v) {
          return v;
        }
      }
    }
    return null;
  }
  get firstChild() {
    if (this.parentElement) {
      const first = this.open.nextSibling;
      return first === this.close ? null : first;
    }
    return this.template.firstChild;
  }
  get nextSibling() {
    return this.close.nextSibling;
  }
  get previousSibling() {
    return this.open.previousSibling;
  }
  get childNodes() {
    if (!this.parentElement) {
      return this.template.childNodes;
    }
    const nodes = [];
    let node = this.open;
    for (; (node = node.nextSibling) && node !== this.close; ) {
      nodes.push(node);
    }
    return nodes;
  }
  get isConnected() {
    return this.open.isConnected;
  }
  get parentElement() {
    return this.open.parentElement;
  }
}
const updateComment = (attributes) => `qv ${((map) => {
  const attributes2 = [];
  return map.forEach((value, key) => {
    var s;
    value ? attributes2.push(`${key}=${s = value, s.replace(/ /g, "+")}`) : attributes2.push(`${key}`);
  }), attributes2.join(" ");
})(attributes)}`;
const processVirtualNodes = (node) => {
  if (null == node) {
    return null;
  }
  if (isComment(node)) {
    const virtual = getVirtualElement(node);
    if (virtual) {
      return virtual;
    }
  }
  return node;
};
const getVirtualElement = (open) => {
  const virtual = open.__virtual;
  if (virtual) {
    return virtual;
  }
  if (open.data.startsWith("qv ")) {
    const close = findClose(open);
    return new VirtualElementImpl(open, close);
  }
  return null;
};
const findClose = (open) => {
  let node = open.nextSibling;
  let stack = 1;
  for (; node; ) {
    if (isComment(node)) {
      if (node.data.startsWith("qv ")) {
        stack++;
      } else if ("/qv" === node.data && (stack--, 0 === stack)) {
        return node;
      }
    }
    node = node.nextSibling;
  }
  throw new Error("close not found");
};
const isComment = (node) => 8 === node.nodeType;
const getRootNode = (node) => null == node ? null : isVirtualElement(node) ? node.open : node;
const createContext$1 = (name2) => Object.freeze({
  id: fromCamelToKebabCase(name2)
});
const useContextProvider = (context, newValue) => {
  const { get: get2, set, ctx } = useSequentialScope();
  if (void 0 !== get2) {
    return;
  }
  const hostElement = ctx.$hostElement$;
  const hostCtx = getContext(hostElement);
  let contexts = hostCtx.$contexts$;
  contexts || (hostCtx.$contexts$ = contexts = /* @__PURE__ */ new Map()), contexts.set(context.id, newValue), set(true);
};
const useContext = (context, defaultValue) => {
  const { get: get2, set, ctx } = useSequentialScope();
  if (void 0 !== get2) {
    return get2;
  }
  const value = resolveContext(context, ctx.$hostElement$, ctx.$renderCtx$);
  if (void 0 !== value) {
    return set(value);
  }
  if (void 0 !== defaultValue) {
    return set(defaultValue);
  }
  throw qError(QError_notFoundContext, context.id);
};
const resolveContext = (context, hostElement, rctx) => {
  const contextID = context.id;
  if (rctx) {
    const contexts = rctx.$localStack$;
    for (let i = contexts.length - 1; i >= 0; i--) {
      const ctx = contexts[i];
      if (hostElement = ctx.$element$, ctx.$contexts$) {
        const found = ctx.$contexts$.get(contextID);
        if (found) {
          return found;
        }
      }
    }
  }
  if (hostElement.closest) {
    const value = queryContextFromDom(hostElement, contextID);
    if (void 0 !== value) {
      return value;
    }
  }
};
const queryContextFromDom = (hostElement, contextId) => {
  var _a2;
  let element = hostElement;
  for (; element; ) {
    let node = element;
    let virtual;
    for (; node && (virtual = findVirtual(node)); ) {
      const contexts = (_a2 = tryGetContext(virtual)) == null ? void 0 : _a2.$contexts$;
      if (contexts && contexts.has(contextId)) {
        return contexts.get(contextId);
      }
      node = virtual;
    }
    element = element.parentElement;
  }
};
const findVirtual = (el) => {
  let node = el;
  let stack = 1;
  for (; node = node.previousSibling; ) {
    if (isComment(node)) {
      if ("/qv" === node.data) {
        stack++;
      } else if (node.data.startsWith("qv ") && (stack--, 0 === stack)) {
        return getVirtualElement(node);
      }
    }
  }
  return null;
};
const ERROR_CONTEXT = createContext$1("qk-error");
const handleError$2 = (err2, hostElement, rctx) => {
  if (isServer$1()) {
    throw err2;
  }
  {
    const errorStore = resolveContext(ERROR_CONTEXT, hostElement, rctx);
    if (void 0 === errorStore) {
      throw err2;
    }
    errorStore.error = err2;
  }
};
const executeComponent = (rctx, elCtx) => {
  elCtx.$dirty$ = false, elCtx.$mounted$ = true, elCtx.$slots$ = [];
  const hostElement = elCtx.$element$;
  const onRenderQRL = elCtx.$renderQrl$;
  const props = elCtx.$props$;
  const newCtx = pushRenderContext(rctx, elCtx);
  const invocatinContext = newInvokeContext(hostElement, void 0, "qRender");
  const waitOn = invocatinContext.$waitOn$ = [];
  newCtx.$cmpCtx$ = elCtx, invocatinContext.$subscriber$ = hostElement, invocatinContext.$renderCtx$ = rctx, onRenderQRL.$setContainer$(rctx.$static$.$containerState$.$containerEl$);
  const onRenderFn = onRenderQRL.getFn(invocatinContext);
  return safeCall(() => onRenderFn(props), (jsxNode) => (elCtx.$attachedListeners$ = false, waitOn.length > 0 ? Promise.all(waitOn).then(() => elCtx.$dirty$ ? executeComponent(rctx, elCtx) : {
    node: jsxNode,
    rctx: newCtx
  }) : elCtx.$dirty$ ? executeComponent(rctx, elCtx) : {
    node: jsxNode,
    rctx: newCtx
  }), (err2) => (handleError$2(err2, hostElement, rctx), {
    node: SkipRender,
    rctx: newCtx
  }));
};
const createRenderContext = (doc, containerState) => ({
  $static$: {
    $doc$: doc,
    $containerState$: containerState,
    $hostElements$: /* @__PURE__ */ new Set(),
    $operations$: [],
    $postOperations$: [],
    $roots$: [],
    $addSlots$: [],
    $rmSlots$: []
  },
  $cmpCtx$: void 0,
  $localStack$: []
});
const pushRenderContext = (ctx, elCtx) => ({
  $static$: ctx.$static$,
  $cmpCtx$: ctx.$cmpCtx$,
  $localStack$: ctx.$localStack$.concat(elCtx)
});
const serializeClass = (obj) => {
  if (isString(obj)) {
    return obj;
  }
  if (isObject(obj)) {
    if (isArray(obj)) {
      return obj.join(" ");
    }
    {
      let buffer = "";
      let previous = false;
      for (const key of Object.keys(obj)) {
        obj[key] && (previous && (buffer += " "), buffer += key, previous = true);
      }
      return buffer;
    }
  }
  return "";
};
const parseClassListRegex = /\s/;
const parseClassList = (value) => value ? value.split(parseClassListRegex) : EMPTY_ARRAY$1;
const stringifyStyle = (obj) => {
  if (null == obj) {
    return "";
  }
  if ("object" == typeof obj) {
    if (isArray(obj)) {
      throw qError(QError_stringifyClassOrStyle, obj, "style");
    }
    {
      const chunks = [];
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          const value = obj[key];
          value && chunks.push(fromCamelToKebabCase(key) + ":" + value);
        }
      }
      return chunks.join(";");
    }
  }
  return String(obj);
};
const getNextIndex = (ctx) => intToStr(ctx.$static$.$containerState$.$elementIndex$++);
const setQId = (rctx, ctx) => {
  const id = getNextIndex(rctx);
  ctx.$id$ = id, ctx.$element$.setAttribute("q:id", id);
};
const SKIPS_PROPS = [QSlot, "q:renderFn", "children"];
const serializeSStyle = (scopeIds) => {
  const value = scopeIds.join(" ");
  if (value.length > 0) {
    return value;
  }
};
const renderComponent = (rctx, ctx, flags) => {
  const justMounted = !ctx.$mounted$;
  const hostElement = ctx.$element$;
  const containerState = rctx.$static$.$containerState$;
  return containerState.$hostsStaging$.delete(hostElement), containerState.$subsManager$.$clearSub$(hostElement), then(executeComponent(rctx, ctx), (res) => {
    const staticCtx = rctx.$static$;
    const newCtx = res.rctx;
    const invocatinContext = newInvokeContext(hostElement);
    if (staticCtx.$hostElements$.add(hostElement), invocatinContext.$subscriber$ = hostElement, invocatinContext.$renderCtx$ = newCtx, justMounted) {
      if (ctx.$appendStyles$) {
        for (const style of ctx.$appendStyles$) {
          appendHeadStyle(staticCtx, style);
        }
      }
      if (ctx.$scopeIds$) {
        const value = serializeSStyle(ctx.$scopeIds$);
        value && hostElement.setAttribute("q:sstyle", value);
      }
    }
    const processedJSXNode = processData$1(res.node, invocatinContext);
    return then(processedJSXNode, (processedJSXNode2) => {
      const newVdom = wrapJSX(hostElement, processedJSXNode2);
      const oldVdom = getVdom(ctx);
      return then(visitJsxNode(newCtx, oldVdom, newVdom, flags), () => {
        ctx.$vdom$ = newVdom;
      });
    });
  });
};
const getVdom = (ctx) => (ctx.$vdom$ || (ctx.$vdom$ = domToVnode(ctx.$element$)), ctx.$vdom$);
class ProcessedJSXNodeImpl {
  constructor($type$, $props$, $children$, $key$) {
    this.$type$ = $type$, this.$props$ = $props$, this.$children$ = $children$, this.$key$ = $key$, this.$elm$ = null, this.$text$ = "";
  }
}
const wrapJSX = (element, input) => {
  const children = void 0 === input ? EMPTY_ARRAY$1 : isArray(input) ? input : [input];
  const node = new ProcessedJSXNodeImpl(":virtual", {}, children, null);
  return node.$elm$ = element, node;
};
const processData$1 = (node, invocationContext) => {
  if (null != node && "boolean" != typeof node) {
    if (isString(node) || "number" == typeof node) {
      const newNode = new ProcessedJSXNodeImpl("#text", EMPTY_OBJ$1, EMPTY_ARRAY$1, null);
      return newNode.$text$ = String(node), newNode;
    }
    if (isJSXNode(node)) {
      return ((node2, invocationContext2) => {
        const key = null != node2.key ? String(node2.key) : null;
        const nodeType = node2.type;
        const props = node2.props;
        const originalChildren = props.children;
        let textType = "";
        if (isString(nodeType)) {
          textType = nodeType;
        } else {
          if (nodeType !== Virtual) {
            if (isFunction(nodeType)) {
              const res = invoke(invocationContext2, nodeType, props, node2.key);
              return processData$1(res, invocationContext2);
            }
            throw qError(QError_invalidJsxNodeType, nodeType);
          }
          textType = ":virtual";
        }
        let children = EMPTY_ARRAY$1;
        return null != originalChildren ? then(processData$1(originalChildren, invocationContext2), (result) => (void 0 !== result && (children = isArray(result) ? result : [result]), new ProcessedJSXNodeImpl(textType, props, children, key))) : new ProcessedJSXNodeImpl(textType, props, children, key);
      })(node, invocationContext);
    }
    if (isArray(node)) {
      const output = promiseAll(node.flatMap((n) => processData$1(n, invocationContext)));
      return then(output, (array) => array.flat(100).filter(isNotNullable));
    }
    return isPromise(node) ? node.then((node2) => processData$1(node2, invocationContext)) : node === SkipRender ? new ProcessedJSXNodeImpl(":skipRender", EMPTY_OBJ$1, EMPTY_ARRAY$1, null) : void logWarn("A unsupported value was passed to the JSX, skipping render. Value:", node);
  }
};
const SVG_NS = "http://www.w3.org/2000/svg";
const CHILDREN_PLACEHOLDER = [];
const visitJsxNode = (ctx, oldVnode, newVnode, flags) => smartUpdateChildren(ctx, oldVnode, newVnode, "root", flags);
const smartUpdateChildren = (ctx, oldVnode, newVnode, mode, flags) => {
  oldVnode.$elm$;
  const ch = newVnode.$children$;
  if (1 === ch.length && ":skipRender" === ch[0].$type$) {
    return;
  }
  const elm = oldVnode.$elm$;
  oldVnode.$children$ === CHILDREN_PLACEHOLDER && "HEAD" === elm.nodeName && (mode = "head", flags |= 2);
  const oldCh = getVnodeChildren(oldVnode, mode);
  return oldCh.length > 0 && ch.length > 0 ? updateChildren(ctx, elm, oldCh, ch, flags) : ch.length > 0 ? addVnodes(ctx, elm, null, ch, 0, ch.length - 1, flags) : oldCh.length > 0 ? removeVnodes(ctx.$static$, oldCh, 0, oldCh.length - 1) : void 0;
};
const getVnodeChildren = (vnode, mode) => {
  const oldCh = vnode.$children$;
  const elm = vnode.$elm$;
  return oldCh === CHILDREN_PLACEHOLDER ? vnode.$children$ = getChildrenVnodes(elm, mode) : oldCh;
};
const updateChildren = (ctx, parentElm, oldCh, newCh, flags) => {
  let oldStartIdx = 0;
  let newStartIdx = 0;
  let oldEndIdx = oldCh.length - 1;
  let oldStartVnode = oldCh[0];
  let oldEndVnode = oldCh[oldEndIdx];
  let newEndIdx = newCh.length - 1;
  let newStartVnode = newCh[0];
  let newEndVnode = newCh[newEndIdx];
  let oldKeyToIdx;
  let idxInOld;
  let elmToMove;
  const results = [];
  const staticCtx = ctx.$static$;
  for (; oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx; ) {
    if (null == oldStartVnode) {
      oldStartVnode = oldCh[++oldStartIdx];
    } else if (null == oldEndVnode) {
      oldEndVnode = oldCh[--oldEndIdx];
    } else if (null == newStartVnode) {
      newStartVnode = newCh[++newStartIdx];
    } else if (null == newEndVnode) {
      newEndVnode = newCh[--newEndIdx];
    } else if (sameVnode(oldStartVnode, newStartVnode)) {
      results.push(patchVnode(ctx, oldStartVnode, newStartVnode, flags)), oldStartVnode = oldCh[++oldStartIdx], newStartVnode = newCh[++newStartIdx];
    } else if (sameVnode(oldEndVnode, newEndVnode)) {
      results.push(patchVnode(ctx, oldEndVnode, newEndVnode, flags)), oldEndVnode = oldCh[--oldEndIdx], newEndVnode = newCh[--newEndIdx];
    } else if (sameVnode(oldStartVnode, newEndVnode)) {
      oldStartVnode.$elm$, oldEndVnode.$elm$, results.push(patchVnode(ctx, oldStartVnode, newEndVnode, flags)), insertBefore(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling), oldStartVnode = oldCh[++oldStartIdx], newEndVnode = newCh[--newEndIdx];
    } else if (sameVnode(oldEndVnode, newStartVnode)) {
      oldStartVnode.$elm$, oldEndVnode.$elm$, results.push(patchVnode(ctx, oldEndVnode, newStartVnode, flags)), insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$), oldEndVnode = oldCh[--oldEndIdx], newStartVnode = newCh[++newStartIdx];
    } else {
      if (void 0 === oldKeyToIdx && (oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)), idxInOld = oldKeyToIdx[newStartVnode.$key$], void 0 === idxInOld) {
        const newElm = createElm(ctx, newStartVnode, flags);
        results.push(then(newElm, (newElm2) => {
          insertBefore(staticCtx, parentElm, newElm2, oldStartVnode.$elm$);
        }));
      } else if (elmToMove = oldCh[idxInOld], isTagName(elmToMove, newStartVnode.$type$)) {
        results.push(patchVnode(ctx, elmToMove, newStartVnode, flags)), oldCh[idxInOld] = void 0, elmToMove.$elm$, insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);
      } else {
        const newElm = createElm(ctx, newStartVnode, flags);
        results.push(then(newElm, (newElm2) => {
          insertBefore(staticCtx, parentElm, newElm2, oldStartVnode.$elm$);
        }));
      }
      newStartVnode = newCh[++newStartIdx];
    }
  }
  if (newStartIdx <= newEndIdx) {
    const before = null == newCh[newEndIdx + 1] ? null : newCh[newEndIdx + 1].$elm$;
    results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));
  }
  let wait = promiseAll(results);
  return oldStartIdx <= oldEndIdx && (wait = then(wait, () => {
    removeVnodes(staticCtx, oldCh, oldStartIdx, oldEndIdx);
  })), wait;
};
const getCh = (elm, filter) => {
  const end = isVirtualElement(elm) ? elm.close : null;
  const nodes = [];
  let node = elm.firstChild;
  for (; (node = processVirtualNodes(node)) && (filter(node) && nodes.push(node), node = node.nextSibling, node !== end); ) {
  }
  return nodes;
};
const getChildren = (elm, mode) => {
  switch (mode) {
    case "root":
      return getCh(elm, isChildComponent);
    case "head":
      return getCh(elm, isHeadChildren);
    case "elements":
      return getCh(elm, isQwikElement);
  }
};
const getChildrenVnodes = (elm, mode) => getChildren(elm, mode).map(getVnodeFromEl);
const getVnodeFromEl = (el) => {
  var _a2, _b;
  return isElement(el) ? (_b = (_a2 = tryGetContext(el)) == null ? void 0 : _a2.$vdom$) != null ? _b : domToVnode(el) : domToVnode(el);
};
const domToVnode = (node) => {
  if (isQwikElement(node)) {
    const props = isVirtualElement(node) ? EMPTY_OBJ$1 : getProps(node);
    const t = new ProcessedJSXNodeImpl(node.localName, props, CHILDREN_PLACEHOLDER, getKey(node));
    return t.$elm$ = node, t;
  }
  if (3 === node.nodeType) {
    const t = new ProcessedJSXNodeImpl(node.nodeName, {}, CHILDREN_PLACEHOLDER, null);
    return t.$text$ = node.data, t.$elm$ = node, t;
  }
  throw new Error("invalid node");
};
const getProps = (node) => {
  const props = {};
  const attributes = node.attributes;
  const len = attributes.length;
  for (let i = 0; i < len; i++) {
    const attr = attributes.item(i);
    const name2 = attr.name;
    name2.includes(":") || (props[name2] = "class" === name2 ? parseDomClass(attr.value) : attr.value);
  }
  return props;
};
const parseDomClass = (value) => parseClassList(value).filter((c) => !c.startsWith("\u2B50\uFE0F")).join(" ");
const isHeadChildren = (node) => {
  const type = node.nodeType;
  return 1 === type ? node.hasAttribute("q:head") : 111 === type;
};
const isSlotTemplate = (node) => "Q:TEMPLATE" === node.nodeName;
const isChildComponent = (node) => {
  const type = node.nodeType;
  if (3 === type || 111 === type) {
    return true;
  }
  if (1 !== type) {
    return false;
  }
  const nodeName = node.nodeName;
  return "Q:TEMPLATE" !== nodeName && ("HEAD" !== nodeName || node.hasAttribute("q:head"));
};
const patchVnode = (rctx, oldVnode, newVnode, flags) => {
  oldVnode.$type$, newVnode.$type$;
  const elm = oldVnode.$elm$;
  const tag = newVnode.$type$;
  const staticCtx = rctx.$static$;
  const isVirtual = ":virtual" === tag;
  if (newVnode.$elm$ = elm, "#text" === tag) {
    return void (oldVnode.$text$ !== newVnode.$text$ && setProperty(staticCtx, elm, "data", newVnode.$text$));
  }
  let isSvg = !!(1 & flags);
  isSvg || "svg" !== tag || (flags |= 1, isSvg = true);
  const props = newVnode.$props$;
  const isComponent = isVirtual && "q:renderFn" in props;
  const elCtx = getContext(elm);
  if (!isComponent) {
    const listenerMap = updateProperties(elCtx, staticCtx, oldVnode.$props$, props, isSvg);
    const currentComponent = rctx.$cmpCtx$;
    if (currentComponent && !currentComponent.$attachedListeners$) {
      currentComponent.$attachedListeners$ = true;
      for (const key of Object.keys(currentComponent.li)) {
        addQRLListener(listenerMap, key, currentComponent.li[key]), addGlobalListener(staticCtx, elm, key);
      }
    }
    for (const key of Object.keys(listenerMap)) {
      setAttribute(staticCtx, elm, key, serializeQRLs(listenerMap[key], elCtx));
    }
    if (isSvg && "foreignObject" === newVnode.$type$ && (flags &= -2, isSvg = false), isVirtual && "q:s" in props) {
      const currentComponent2 = rctx.$cmpCtx$;
      return currentComponent2.$slots$, void currentComponent2.$slots$.push(newVnode);
    }
    if (void 0 !== props[dangerouslySetInnerHTML]) {
      return;
    }
    if (isVirtual && "qonce" in props) {
      return;
    }
    return smartUpdateChildren(rctx, oldVnode, newVnode, "root", flags);
  }
  let needsRender = setComponentProps$1(elCtx, rctx, props);
  return needsRender || elCtx.$renderQrl$ || elCtx.$element$.hasAttribute("q:id") || (setQId(rctx, elCtx), elCtx.$renderQrl$ = props["q:renderFn"], elCtx.$renderQrl$, needsRender = true), needsRender ? then(renderComponent(rctx, elCtx, flags), () => renderContentProjection(rctx, elCtx, newVnode, flags)) : renderContentProjection(rctx, elCtx, newVnode, flags);
};
const renderContentProjection = (rctx, hostCtx, vnode, flags) => {
  const newChildren = vnode.$children$;
  const staticCtx = rctx.$static$;
  const splittedNewChidren = ((input) => {
    var _a2;
    const output = {};
    for (const item of input) {
      const key = getSlotName(item);
      ((_a2 = output[key]) != null ? _a2 : output[key] = new ProcessedJSXNodeImpl(":virtual", {
        "q:s": ""
      }, [], key)).$children$.push(item);
    }
    return output;
  })(newChildren);
  const slotRctx = pushRenderContext(rctx, hostCtx);
  const slotMaps = getSlotMap(hostCtx);
  for (const key of Object.keys(slotMaps.slots)) {
    if (!splittedNewChidren[key]) {
      const slotEl = slotMaps.slots[key];
      const oldCh = getChildrenVnodes(slotEl, "root");
      if (oldCh.length > 0) {
        const slotCtx = tryGetContext(slotEl);
        slotCtx && slotCtx.$vdom$ && (slotCtx.$vdom$.$children$ = []), removeVnodes(staticCtx, oldCh, 0, oldCh.length - 1);
      }
    }
  }
  for (const key of Object.keys(slotMaps.templates)) {
    const templateEl = slotMaps.templates[key];
    templateEl && (splittedNewChidren[key] && !slotMaps.slots[key] || (removeNode(staticCtx, templateEl), slotMaps.templates[key] = void 0));
  }
  return promiseAll(Object.keys(splittedNewChidren).map((key) => {
    const newVdom = splittedNewChidren[key];
    const slotElm = getSlotElement(staticCtx, slotMaps, hostCtx.$element$, key);
    const slotCtx = getContext(slotElm);
    const oldVdom = getVdom(slotCtx);
    return slotCtx.$vdom$ = newVdom, newVdom.$elm$ = slotElm, smartUpdateChildren(slotRctx, oldVdom, newVdom, "root", flags);
  }));
};
const addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {
  const promises = [];
  let hasPromise = false;
  for (; startIdx <= endIdx; ++startIdx) {
    const ch = vnodes[startIdx];
    const elm = createElm(ctx, ch, flags);
    promises.push(elm), isPromise(elm) && (hasPromise = true);
  }
  if (hasPromise) {
    return Promise.all(promises).then((children) => insertChildren(ctx.$static$, parentElm, children, before));
  }
  insertChildren(ctx.$static$, parentElm, promises, before);
};
const insertChildren = (ctx, parentElm, children, before) => {
  for (const child of children) {
    insertBefore(ctx, parentElm, child, before);
  }
};
const removeVnodes = (ctx, nodes, startIdx, endIdx) => {
  for (; startIdx <= endIdx; ++startIdx) {
    const ch = nodes[startIdx];
    ch && (ch.$elm$, removeNode(ctx, ch.$elm$));
  }
};
const getSlotElement = (ctx, slotMaps, parentEl, slotName) => {
  const slotEl = slotMaps.slots[slotName];
  if (slotEl) {
    return slotEl;
  }
  const templateEl = slotMaps.templates[slotName];
  if (templateEl) {
    return templateEl;
  }
  const template = createTemplate(ctx.$doc$, slotName);
  return ((ctx2, parent, newChild) => {
    ctx2.$operations$.push({
      $operation$: directInsertBefore,
      $args$: [parent, newChild, parent.firstChild]
    });
  })(ctx, parentEl, template), slotMaps.templates[slotName] = template, template;
};
const getSlotName = (node) => {
  var _a2;
  return (_a2 = node.$props$[QSlot]) != null ? _a2 : "";
};
const createElm = (rctx, vnode, flags) => {
  const tag = vnode.$type$;
  const doc = rctx.$static$.$doc$;
  if ("#text" === tag) {
    return vnode.$elm$ = ((doc2, text) => doc2.createTextNode(text))(doc, vnode.$text$);
  }
  let elm;
  let isHead = !!(2 & flags);
  let isSvg = !!(1 & flags);
  isSvg || "svg" !== tag || (flags |= 1, isSvg = true);
  const isVirtual = ":virtual" === tag;
  const props = vnode.$props$;
  const isComponent = "q:renderFn" in props;
  const staticCtx = rctx.$static$;
  isVirtual ? elm = ((doc2) => {
    const open = doc2.createComment("qv ");
    const close = doc2.createComment("/qv");
    return new VirtualElementImpl(open, close);
  })(doc) : "head" === tag ? (elm = doc.head, flags |= 2, isHead = true) : (elm = createElement(doc, tag, isSvg), flags &= -3), vnode.$elm$ = elm, isSvg && "foreignObject" === tag && (isSvg = false, flags &= -2);
  const elCtx = getContext(elm);
  if (isComponent) {
    setKey(elm, vnode.$key$);
    const renderQRL = props["q:renderFn"];
    return setComponentProps$1(elCtx, rctx, props), setQId(rctx, elCtx), elCtx.$renderQrl$ = renderQRL, then(renderComponent(rctx, elCtx, flags), () => {
      let children2 = vnode.$children$;
      if (0 === children2.length) {
        return elm;
      }
      1 === children2.length && ":skipRender" === children2[0].$type$ && (children2 = children2[0].$children$);
      const slotRctx = pushRenderContext(rctx, elCtx);
      const slotMap = getSlotMap(elCtx);
      const elements = children2.map((ch) => createElm(slotRctx, ch, flags));
      return then(promiseAll(elements), () => {
        for (const node of children2) {
          node.$elm$, appendChild(staticCtx, getSlotElement(staticCtx, slotMap, elm, getSlotName(node)), node.$elm$);
        }
        return elm;
      });
    });
  }
  const currentComponent = rctx.$cmpCtx$;
  const isSlot = isVirtual && "q:s" in props;
  const hasRef = !isVirtual && "ref" in props;
  const listenerMap = setProperties(staticCtx, elCtx, props, isSvg);
  if (currentComponent && !isVirtual) {
    const scopedIds = currentComponent.$scopeIds$;
    if (scopedIds && scopedIds.forEach((styleId) => {
      elm.classList.add(styleId);
    }), !currentComponent.$attachedListeners$) {
      currentComponent.$attachedListeners$ = true;
      for (const eventName of Object.keys(currentComponent.li)) {
        addQRLListener(listenerMap, eventName, currentComponent.li[eventName]);
      }
    }
  }
  isSlot ? (currentComponent.$slots$, setKey(elm, vnode.$key$), directSetAttribute(elm, "q:sref", currentComponent.$id$), currentComponent.$slots$.push(vnode), staticCtx.$addSlots$.push([elm, currentComponent.$element$])) : setKey(elm, vnode.$key$);
  {
    const listeners = Object.keys(listenerMap);
    isHead && !isVirtual && directSetAttribute(elm, "q:head", ""), (listeners.length > 0 || hasRef) && setQId(rctx, elCtx);
    for (const key of listeners) {
      setAttribute(staticCtx, elm, key, serializeQRLs(listenerMap[key], elCtx));
    }
  }
  if (void 0 !== props[dangerouslySetInnerHTML]) {
    return elm;
  }
  let children = vnode.$children$;
  if (0 === children.length) {
    return elm;
  }
  1 === children.length && ":skipRender" === children[0].$type$ && (children = children[0].$children$);
  const promises = children.map((ch) => createElm(rctx, ch, flags));
  return then(promiseAll(promises), () => {
    for (const node of children) {
      node.$elm$, appendChild(rctx.$static$, elm, node.$elm$);
    }
    return elm;
  });
};
const getSlotMap = (ctx) => {
  var _a2, _b;
  const slotsArray = ((ctx2) => ctx2.$slots$ || (ctx2.$element$.parentElement, ctx2.$slots$ = readDOMSlots(ctx2)))(ctx);
  const slots = {};
  const templates = {};
  const t = Array.from(ctx.$element$.childNodes).filter(isSlotTemplate);
  for (const vnode of slotsArray) {
    vnode.$elm$, slots[(_a2 = vnode.$key$) != null ? _a2 : ""] = vnode.$elm$;
  }
  for (const elm of t) {
    templates[(_b = directGetAttribute(elm, QSlot)) != null ? _b : ""] = elm;
  }
  return {
    slots,
    templates
  };
};
const readDOMSlots = (ctx) => ((el, prop, value) => {
  const walker = ((el2, prop2, value2) => el2.ownerDocument.createTreeWalker(el2, 128, {
    acceptNode(c) {
      const virtual = getVirtualElement(c);
      return virtual && directGetAttribute(virtual, "q:sref") === value2 ? 1 : 2;
    }
  }))(el, 0, value);
  const pars = [];
  let currentNode = null;
  for (; currentNode = walker.nextNode(); ) {
    pars.push(getVirtualElement(currentNode));
  }
  return pars;
})(ctx.$element$.parentElement, 0, ctx.$id$).map(domToVnode);
const checkBeforeAssign = (ctx, elm, prop, newValue) => (prop in elm && elm[prop] !== newValue && setProperty(ctx, elm, prop, newValue), true);
const dangerouslySetInnerHTML = "dangerouslySetInnerHTML";
const PROP_HANDLER_MAP = {
  style: (ctx, elm, _, newValue) => (setProperty(ctx, elm.style, "cssText", stringifyStyle(newValue)), true),
  class: (ctx, elm, _, newValue, oldValue) => {
    const oldClasses = parseClassList(oldValue);
    const newClasses = parseClassList(newValue);
    return ((ctx2, elm2, toRemove, toAdd) => {
      ctx2 ? ctx2.$operations$.push({
        $operation$: _setClasslist,
        $args$: [elm2, toRemove, toAdd]
      }) : _setClasslist(elm2, toRemove, toAdd);
    })(ctx, elm, oldClasses.filter((c) => c && !newClasses.includes(c)), newClasses.filter((c) => c && !oldClasses.includes(c))), true;
  },
  value: checkBeforeAssign,
  checked: checkBeforeAssign,
  [dangerouslySetInnerHTML]: (ctx, elm, _, newValue) => (dangerouslySetInnerHTML in elm ? setProperty(ctx, elm, dangerouslySetInnerHTML, newValue) : "innerHTML" in elm && setProperty(ctx, elm, "innerHTML", newValue), true),
  innerHTML: () => true
};
const updateProperties = (elCtx, staticCtx, oldProps, newProps, isSvg) => {
  const keys = getKeys(oldProps, newProps);
  const listenersMap = elCtx.li = {};
  if (0 === keys.length) {
    return listenersMap;
  }
  const elm = elCtx.$element$;
  for (let key of keys) {
    if ("children" === key) {
      continue;
    }
    let newValue = newProps[key];
    "className" === key && (newProps.class = newValue, key = "class"), "class" === key && (newProps.class = newValue = serializeClass(newValue));
    const oldValue = oldProps[key];
    if (oldValue === newValue) {
      continue;
    }
    if ("ref" === key) {
      newValue.current = elm;
      continue;
    }
    if (isOnProp(key)) {
      setEvent(listenersMap, key, newValue);
      continue;
    }
    const exception = PROP_HANDLER_MAP[key];
    exception && exception(staticCtx, elm, key, newValue, oldValue) || (isSvg || !(key in elm) ? setAttribute(staticCtx, elm, key, newValue) : setProperty(staticCtx, elm, key, newValue));
  }
  return listenersMap;
};
const getKeys = (oldProps, newProps) => {
  const keys = Object.keys(newProps);
  return keys.push(...Object.keys(oldProps).filter((p) => !keys.includes(p))), keys;
};
const addGlobalListener = (staticCtx, elm, prop) => {
  try {
    window.qwikevents && window.qwikevents.push(getEventName(prop));
  } catch (err2) {
  }
};
const setProperties = (rctx, elCtx, newProps, isSvg) => {
  const elm = elCtx.$element$;
  const keys = Object.keys(newProps);
  const listenerMap = elCtx.li;
  if (0 === keys.length) {
    return listenerMap;
  }
  for (let key of keys) {
    if ("children" === key) {
      continue;
    }
    let newValue = newProps[key];
    if ("className" === key && (newProps.class = newValue, key = "class"), "class" === key && (newProps.class = newValue = serializeClass(newValue)), "ref" === key) {
      newValue.current = elm;
      continue;
    }
    if (isOnProp(key)) {
      addGlobalListener(rctx, elm, setEvent(listenerMap, key, newValue));
      continue;
    }
    const exception = PROP_HANDLER_MAP[key];
    exception && exception(rctx, elm, key, newValue, void 0) || (isSvg || !(key in elm) ? setAttribute(rctx, elm, key, newValue) : setProperty(rctx, elm, key, newValue));
  }
  return listenerMap;
};
const setComponentProps$1 = (ctx, rctx, expectProps) => {
  const keys = Object.keys(expectProps);
  if (0 === keys.length) {
    return false;
  }
  const qwikProps = getPropsMutator(ctx, rctx.$static$.$containerState$);
  for (const key of keys) {
    SKIPS_PROPS.includes(key) || qwikProps.set(key, expectProps[key]);
  }
  return ctx.$dirty$;
};
const cleanupTree = (parent, rctx, subsManager, stopSlots) => {
  if (stopSlots && parent.hasAttribute("q:s")) {
    return void rctx.$rmSlots$.push(parent);
  }
  cleanupElement(parent, subsManager);
  const ch = getChildren(parent, "elements");
  for (const child of ch) {
    cleanupTree(child, rctx, subsManager, stopSlots);
  }
};
const cleanupElement = (el, subsManager) => {
  const ctx = tryGetContext(el);
  ctx && cleanupContext(ctx, subsManager);
};
const directAppendChild = (parent, child) => {
  isVirtualElement(child) ? child.appendTo(parent) : parent.appendChild(child);
};
const directRemoveChild = (parent, child) => {
  isVirtualElement(child) ? child.remove() : parent.removeChild(child);
};
const directInsertBefore = (parent, child, ref) => {
  isVirtualElement(child) ? child.insertBeforeTo(parent, getRootNode(ref)) : parent.insertBefore(child, getRootNode(ref));
};
const createKeyToOldIdx = (children, beginIdx, endIdx) => {
  const map = {};
  for (let i = beginIdx; i <= endIdx; ++i) {
    const key = children[i].$key$;
    null != key && (map[key] = i);
  }
  return map;
};
const sameVnode = (vnode1, vnode2) => vnode1.$type$ === vnode2.$type$ && vnode1.$key$ === vnode2.$key$;
const isTagName = (elm, tagName) => elm.$type$ === tagName;
const useLexicalScope = () => {
  const context = getInvokeContext();
  let qrl = context.$qrl$;
  if (qrl) {
    qrl.$captureRef$;
  } else {
    const el = context.$element$;
    const container = getWrappingContainer(el);
    const ctx = getContext(el);
    qrl = parseQRL(decodeURIComponent(String(context.$url$)), container), resumeIfNeeded(container), inflateQrl(qrl, ctx);
  }
  return qrl.$captureRef$;
};
const notifyWatch = (watch, containerState) => {
  watch.$flags$ & WatchFlagsIsDirty || (watch.$flags$ |= WatchFlagsIsDirty, void 0 !== containerState.$hostsRendering$ ? (containerState.$renderPromise$, containerState.$watchStaging$.add(watch)) : (containerState.$watchNext$.add(watch), scheduleFrame(containerState)));
};
const scheduleFrame = (containerState) => (void 0 === containerState.$renderPromise$ && (containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState))), containerState.$renderPromise$);
const _hW = () => {
  const [watch] = useLexicalScope();
  notifyWatch(watch, getContainerState(getWrappingContainer(watch.$el$)));
};
const renderMarked = async (containerState) => {
  const hostsRendering = containerState.$hostsRendering$ = new Set(containerState.$hostsNext$);
  containerState.$hostsNext$.clear(), await executeWatchesBefore(containerState), containerState.$hostsStaging$.forEach((host) => {
    hostsRendering.add(host);
  }), containerState.$hostsStaging$.clear();
  const doc = getDocument(containerState.$containerEl$);
  const renderingQueue = Array.from(hostsRendering);
  sortNodes(renderingQueue);
  const ctx = createRenderContext(doc, containerState);
  const staticCtx = ctx.$static$;
  for (const el of renderingQueue) {
    if (!staticCtx.$hostElements$.has(el)) {
      const elCtx = getContext(el);
      if (elCtx.$renderQrl$) {
        el.isConnected, staticCtx.$roots$.push(elCtx);
        try {
          await renderComponent(ctx, elCtx, getFlags(el.parentElement));
        } catch (err2) {
          logError(err2);
        }
      }
    }
  }
  return staticCtx.$operations$.push(...staticCtx.$postOperations$), 0 === staticCtx.$operations$.length ? void postRendering(containerState, staticCtx) : getPlatform().raf(() => {
    (({ $static$: ctx2 }) => {
      executeDOMRender(ctx2);
    })(ctx), postRendering(containerState, staticCtx);
  });
};
const getFlags = (el) => {
  let flags = 0;
  return el && (el.namespaceURI === SVG_NS && (flags |= 1), "HEAD" === el.tagName && (flags |= 2)), flags;
};
const postRendering = async (containerState, ctx) => {
  await executeWatchesAfter(containerState, (watch, stage) => 0 != (watch.$flags$ & WatchFlagsIsEffect) && (!stage || ctx.$hostElements$.has(watch.$el$))), containerState.$hostsStaging$.forEach((el) => {
    containerState.$hostsNext$.add(el);
  }), containerState.$hostsStaging$.clear(), containerState.$hostsRendering$ = void 0, containerState.$renderPromise$ = void 0, containerState.$hostsNext$.size + containerState.$watchNext$.size > 0 && scheduleFrame(containerState);
};
const executeWatchesBefore = async (containerState) => {
  const resourcesPromises = [];
  const containerEl = containerState.$containerEl$;
  const watchPromises = [];
  const isWatch = (watch) => 0 != (watch.$flags$ & WatchFlagsIsWatch);
  const isResourceWatch2 = (watch) => 0 != (watch.$flags$ & WatchFlagsIsResource);
  containerState.$watchNext$.forEach((watch) => {
    isWatch(watch) && (watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch)), containerState.$watchNext$.delete(watch)), isResourceWatch2(watch) && (resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch)), containerState.$watchNext$.delete(watch));
  });
  do {
    if (containerState.$watchStaging$.forEach((watch) => {
      isWatch(watch) ? watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch)) : isResourceWatch2(watch) ? resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch)) : containerState.$watchNext$.add(watch);
    }), containerState.$watchStaging$.clear(), watchPromises.length > 0) {
      const watches = await Promise.all(watchPromises);
      sortWatches(watches), await Promise.all(watches.map((watch) => runSubscriber(watch, containerState))), watchPromises.length = 0;
    }
  } while (containerState.$watchStaging$.size > 0);
  if (resourcesPromises.length > 0) {
    const resources = await Promise.all(resourcesPromises);
    sortWatches(resources), resources.forEach((watch) => runSubscriber(watch, containerState));
  }
};
const executeWatchesAfter = async (containerState, watchPred) => {
  const watchPromises = [];
  const containerEl = containerState.$containerEl$;
  containerState.$watchNext$.forEach((watch) => {
    watchPred(watch, false) && (watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch)), containerState.$watchNext$.delete(watch));
  });
  do {
    if (containerState.$watchStaging$.forEach((watch) => {
      watchPred(watch, true) ? watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch)) : containerState.$watchNext$.add(watch);
    }), containerState.$watchStaging$.clear(), watchPromises.length > 0) {
      const watches = await Promise.all(watchPromises);
      sortWatches(watches), await Promise.all(watches.map((watch) => runSubscriber(watch, containerState))), watchPromises.length = 0;
    }
  } while (containerState.$watchStaging$.size > 0);
};
const sortNodes = (elements) => {
  elements.sort((a, b) => 2 & a.compareDocumentPosition(getRootNode(b)) ? 1 : -1);
};
const sortWatches = (watches) => {
  watches.sort((a, b) => a.$el$ === b.$el$ ? a.$index$ < b.$index$ ? -1 : 1 : 0 != (2 & a.$el$.compareDocumentPosition(getRootNode(b.$el$))) ? 1 : -1);
};
const CONTAINER_STATE = Symbol("ContainerState");
const getContainerState = (containerEl) => {
  let set = containerEl[CONTAINER_STATE];
  return set || (containerEl[CONTAINER_STATE] = set = createContainerState(containerEl)), set;
};
const createContainerState = (containerEl) => {
  const containerState = {
    $containerEl$: containerEl,
    $proxyMap$: /* @__PURE__ */ new WeakMap(),
    $subsManager$: null,
    $watchNext$: /* @__PURE__ */ new Set(),
    $watchStaging$: /* @__PURE__ */ new Set(),
    $hostsNext$: /* @__PURE__ */ new Set(),
    $hostsStaging$: /* @__PURE__ */ new Set(),
    $renderPromise$: void 0,
    $hostsRendering$: void 0,
    $envData$: {},
    $elementIndex$: 0,
    $styleIds$: /* @__PURE__ */ new Set(),
    $mutableProps$: false
  };
  return containerState.$subsManager$ = createSubscriptionManager(containerState), containerState;
};
const createSubscriptionManager = (containerState) => {
  const objToSubs = /* @__PURE__ */ new Map();
  const subsToObjs = /* @__PURE__ */ new Map();
  const tryGetLocal = (obj) => (getProxyTarget(obj), objToSubs.get(obj));
  const trackSubToObj = (subscriber, map) => {
    let set = subsToObjs.get(subscriber);
    set || subsToObjs.set(subscriber, set = /* @__PURE__ */ new Set()), set.add(map);
  };
  const manager = {
    $tryGetLocal$: tryGetLocal,
    $getLocal$: (obj, initialMap) => {
      let local = tryGetLocal(obj);
      if (local)
        ;
      else {
        const map = initialMap || /* @__PURE__ */ new Map();
        map.forEach((_, key) => {
          trackSubToObj(key, map);
        }), objToSubs.set(obj, local = {
          $subs$: map,
          $addSub$(subscriber, key) {
            if (null == key) {
              map.set(subscriber, null);
            } else {
              let sub = map.get(subscriber);
              void 0 === sub && map.set(subscriber, sub = /* @__PURE__ */ new Set()), sub && sub.add(key);
            }
            trackSubToObj(subscriber, map);
          },
          $notifySubs$(key) {
            map.forEach((value, subscriber) => {
              null !== value && key && !value.has(key) || ((subscriber2, containerState2) => {
                isQwikElement(subscriber2) ? ((hostElement, containerState3) => {
                  const server = isServer$1();
                  server || resumeIfNeeded(containerState3.$containerEl$);
                  const ctx = getContext(hostElement);
                  if (ctx.$renderQrl$, !ctx.$dirty$) {
                    if (ctx.$dirty$ = true, void 0 !== containerState3.$hostsRendering$) {
                      containerState3.$renderPromise$, containerState3.$hostsStaging$.add(hostElement);
                    } else {
                      if (server) {
                        return void logWarn();
                      }
                      containerState3.$hostsNext$.add(hostElement), scheduleFrame(containerState3);
                    }
                  }
                })(subscriber2, containerState2) : notifyWatch(subscriber2, containerState2);
              })(subscriber, containerState);
            });
          }
        });
      }
      return local;
    },
    $clearSub$: (sub) => {
      const subs = subsToObjs.get(sub);
      subs && (subs.forEach((s) => {
        s.delete(sub);
      }), subsToObjs.delete(sub), subs.clear());
    }
  };
  return manager;
};
const _pauseFromContexts = async (allContexts, containerState) => {
  const collector = createCollector(containerState);
  const listeners = [];
  for (const ctx of allContexts) {
    const el = ctx.$element$;
    const ctxLi = ctx.li;
    for (const key of Object.keys(ctxLi)) {
      for (const qrl of ctxLi[key]) {
        const captured = qrl.$captureRef$;
        if (captured) {
          for (const obj of captured) {
            collectValue(obj, collector, true);
          }
        }
        isElement(el) && listeners.push({
          key,
          qrl,
          el,
          eventName: getEventName(key)
        });
      }
    }
    ctx.$watches$ && collector.$watches$.push(...ctx.$watches$);
  }
  if (0 === listeners.length) {
    return {
      state: {
        ctx: {},
        objs: [],
        subs: []
      },
      objs: [],
      listeners: [],
      mode: "static"
    };
  }
  let promises;
  for (; (promises = collector.$promises$).length > 0; ) {
    collector.$promises$ = [], await Promise.allSettled(promises);
  }
  const canRender = collector.$elements$.length > 0;
  if (canRender) {
    for (const element of collector.$elements$) {
      collectElementData(tryGetContext(element), collector);
    }
    for (const ctx of allContexts) {
      if (ctx.$props$ && collectMutableProps(ctx.$element$, ctx.$props$, collector), ctx.$contexts$) {
        for (const item of ctx.$contexts$.values()) {
          collectValue(item, collector, false);
        }
      }
    }
  }
  for (; (promises = collector.$promises$).length > 0; ) {
    collector.$promises$ = [], await Promise.allSettled(promises);
  }
  const elementToIndex = /* @__PURE__ */ new Map();
  const objs = Array.from(collector.$objSet$.keys());
  const objToId = /* @__PURE__ */ new Map();
  const getElementID = (el) => {
    let id = elementToIndex.get(el);
    return void 0 === id && (id = ((el2) => {
      const ctx = tryGetContext(el2);
      return ctx ? ctx.$id$ : null;
    })(el), id ? id = "#" + id : console.warn("Missing ID", el), elementToIndex.set(el, id)), id;
  };
  const getObjId = (obj) => {
    let suffix = "";
    if (isMutable(obj) && (obj = obj.mut, suffix = "%"), isPromise(obj)) {
      const { value, resolved } = getPromiseValue(obj);
      obj = value, suffix += resolved ? "~" : "_";
    }
    if (isObject(obj)) {
      const target = getProxyTarget(obj);
      if (target) {
        suffix += "!", obj = target;
      } else if (isQwikElement(obj)) {
        const elID = getElementID(obj);
        return elID ? elID + suffix : null;
      }
    }
    const id = objToId.get(obj);
    return id ? id + suffix : null;
  };
  const mustGetObjId = (obj) => {
    const key = getObjId(obj);
    if (null === key) {
      throw qError(QError_missingObjectId, obj);
    }
    return key;
  };
  const subsMap = /* @__PURE__ */ new Map();
  objs.forEach((obj) => {
    const proxy = containerState.$proxyMap$.get(obj);
    const flags = getProxyFlags(proxy);
    if (void 0 === flags) {
      return;
    }
    const subsObj = [];
    flags > 0 && subsObj.push({
      subscriber: "$",
      data: flags
    }), getProxySubs(proxy).forEach((set, key) => {
      isNode(key) && isVirtualElement(key) && !collector.$elements$.includes(key) || subsObj.push({
        subscriber: key,
        data: set ? Array.from(set) : null
      });
    }), subsObj.length > 0 && subsMap.set(obj, subsObj);
  }), objs.sort((a, b) => (subsMap.has(a) ? 0 : 1) - (subsMap.has(b) ? 0 : 1));
  let count = 0;
  for (const obj of objs) {
    objToId.set(obj, intToStr(count)), count++;
  }
  if (collector.$noSerialize$.length > 0) {
    const undefinedID = objToId.get(void 0);
    for (const obj of collector.$noSerialize$) {
      objToId.set(obj, undefinedID);
    }
  }
  const subs = objs.map((obj) => {
    const sub = subsMap.get(obj);
    if (!sub) {
      return;
    }
    const subsObj = {};
    return sub.forEach(({ subscriber, data: data2 }) => {
      if ("$" === subscriber) {
        subsObj[subscriber] = data2;
      } else {
        const id = getObjId(subscriber);
        null !== id && (subsObj[id] = data2);
      }
    }), subsObj;
  }).filter(isNotNullable);
  const convertedObjs = objs.map((obj) => {
    if (null === obj) {
      return null;
    }
    const typeObj = typeof obj;
    switch (typeObj) {
      case "undefined":
        return UNDEFINED_PREFIX;
      case "string":
      case "number":
      case "boolean":
        return obj;
      default:
        const value = serializeValue(obj, getObjId, containerState);
        if (void 0 !== value) {
          return value;
        }
        if ("object" === typeObj) {
          if (isArray(obj)) {
            return obj.map(mustGetObjId);
          }
          if (isSerializableObject(obj)) {
            const output = {};
            for (const key of Object.keys(obj)) {
              output[key] = mustGetObjId(obj[key]);
            }
            return output;
          }
        }
    }
    throw qError(QError_verifySerializable, obj);
  });
  const meta = {};
  allContexts.forEach((ctx) => {
    const node = ctx.$element$;
    const ref = ctx.$refMap$;
    const props = ctx.$props$;
    const contexts = ctx.$contexts$;
    const watches = ctx.$watches$;
    const renderQrl = ctx.$renderQrl$;
    const seq = ctx.$seq$;
    const metaValue = {};
    const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(node);
    let add = false;
    if (ref.length > 0) {
      const value = ref.map(mustGetObjId).join(" ");
      value && (metaValue.r = value, add = true);
    }
    if (canRender) {
      if (elementCaptured && props && (metaValue.h = mustGetObjId(props) + " " + mustGetObjId(renderQrl), add = true), watches && watches.length > 0) {
        const value = watches.map(getObjId).filter(isNotNullable).join(" ");
        value && (metaValue.w = value, add = true);
      }
      if (elementCaptured && seq && seq.length > 0) {
        const value = seq.map(mustGetObjId).join(" ");
        metaValue.s = value, add = true;
      }
      if (contexts) {
        const serializedContexts = [];
        contexts.forEach((value2, key) => {
          serializedContexts.push(`${key}=${mustGetObjId(value2)}`);
        });
        const value = serializedContexts.join(" ");
        value && (metaValue.c = value, add = true);
      }
    }
    if (add) {
      const elementID = getElementID(node);
      meta[elementID] = metaValue;
    }
  });
  for (const watch of collector.$watches$) {
    destroyWatch(watch);
  }
  return {
    state: {
      ctx: meta,
      objs: convertedObjs,
      subs
    },
    objs,
    listeners,
    mode: canRender ? "render" : "listeners"
  };
};
const getNodesInScope = (parent, predicate) => {
  predicate(parent);
  const walker = parent.ownerDocument.createTreeWalker(parent, 129, {
    acceptNode: (node) => isContainer(node) ? 2 : predicate(node) ? 1 : 3
  });
  const pars = [];
  let currentNode = null;
  for (; currentNode = walker.nextNode(); ) {
    pars.push(processVirtualNodes(currentNode));
  }
  return pars;
};
const reviveNestedObjects = (obj, getObject, parser) => {
  if (!parser.fill(obj) && obj && "object" == typeof obj) {
    if (isArray(obj)) {
      for (let i = 0; i < obj.length; i++) {
        const value = obj[i];
        "string" == typeof value ? obj[i] = getObject(value) : reviveNestedObjects(value, getObject, parser);
      }
    } else if (isSerializableObject(obj)) {
      for (const key of Object.keys(obj)) {
        const value = obj[key];
        "string" == typeof value ? obj[key] = getObject(value) : reviveNestedObjects(value, getObject, parser);
      }
    }
  }
};
const OBJECT_TRANSFORMS = {
  "!": (obj, containerState) => {
    var _a2;
    return (_a2 = containerState.$proxyMap$.get(obj)) != null ? _a2 : getOrCreateProxy(obj, containerState);
  },
  "%": (obj) => mutable(obj),
  "~": (obj) => Promise.resolve(obj),
  _: (obj) => Promise.reject(obj)
};
const collectMutableProps = (el, props, collector) => {
  const subs = getProxySubs(props);
  subs && subs.has(el) && collectElement(el, collector);
};
const createCollector = (containerState) => ({
  $containerState$: containerState,
  $seen$: /* @__PURE__ */ new Set(),
  $objSet$: /* @__PURE__ */ new Set(),
  $noSerialize$: [],
  $elements$: [],
  $watches$: [],
  $promises$: []
});
const collectDeferElement = (el, collector) => {
  collector.$elements$.includes(el) || collector.$elements$.push(el);
};
const collectElement = (el, collector) => {
  if (collector.$elements$.includes(el)) {
    return;
  }
  const ctx = tryGetContext(el);
  ctx && (collector.$elements$.push(el), collectElementData(ctx, collector));
};
const collectElementData = (ctx, collector) => {
  if (ctx.$props$ && collectValue(ctx.$props$, collector, false), ctx.$renderQrl$ && collectValue(ctx.$renderQrl$, collector, false), ctx.$seq$) {
    for (const obj of ctx.$seq$) {
      collectValue(obj, collector, false);
    }
  }
  if (ctx.$watches$) {
    for (const obj of ctx.$watches$) {
      collectValue(obj, collector, false);
    }
  }
  if (ctx.$contexts$) {
    for (const obj of ctx.$contexts$.values()) {
      collectValue(obj, collector, false);
    }
  }
};
const PROMISE_VALUE = Symbol();
const getPromiseValue = (promise) => promise[PROMISE_VALUE];
const collectValue = (obj, collector, leaks) => {
  if (null !== obj) {
    const objType = typeof obj;
    const seen = collector.$seen$;
    switch (objType) {
      case "function":
        if (seen.has(obj)) {
          return;
        }
        if (seen.add(obj), !fastShouldSerialize(obj)) {
          return collector.$objSet$.add(void 0), void collector.$noSerialize$.push(obj);
        }
        if (isQrl$1(obj)) {
          if (collector.$objSet$.add(obj), obj.$captureRef$) {
            for (const item of obj.$captureRef$) {
              collectValue(item, collector, leaks);
            }
          }
          return;
        }
        break;
      case "object": {
        if (seen.has(obj)) {
          return;
        }
        if (seen.add(obj), !fastShouldSerialize(obj)) {
          return collector.$objSet$.add(void 0), void collector.$noSerialize$.push(obj);
        }
        if (isPromise(obj)) {
          return void collector.$promises$.push((promise = obj, promise.then((value) => {
            const v = {
              resolved: true,
              value
            };
            return promise[PROMISE_VALUE] = v, value;
          }, (value) => {
            const v = {
              resolved: false,
              value
            };
            return promise[PROMISE_VALUE] = v, value;
          })).then((value) => {
            collectValue(value, collector, leaks);
          }));
        }
        const target = getProxyTarget(obj);
        const input = obj;
        if (target) {
          if (leaks && ((proxy, collector2) => {
            const subs = getProxySubs(proxy);
            if (!collector2.$seen$.has(subs)) {
              collector2.$seen$.add(subs);
              for (const key of Array.from(subs.keys())) {
                isNode(key) && isVirtualElement(key) ? collectDeferElement(key, collector2) : collectValue(key, collector2, true);
              }
            }
          })(input, collector), obj = target, seen.has(obj)) {
            return;
          }
          if (seen.add(obj), isResourceReturn(obj)) {
            return collector.$objSet$.add(target), collectValue(obj.promise, collector, leaks), void collectValue(obj.resolved, collector, leaks);
          }
        } else if (isNode(obj)) {
          return;
        }
        if (isArray(obj)) {
          for (let i = 0; i < obj.length; i++) {
            collectValue(input[i], collector, leaks);
          }
        } else {
          for (const key of Object.keys(obj)) {
            collectValue(input[key], collector, leaks);
          }
        }
        break;
      }
    }
  }
  var promise;
  collector.$objSet$.add(obj);
};
const isContainer = (el) => isElement(el) && el.hasAttribute("q:container");
const hasQId = (el) => {
  const node = processVirtualNodes(el);
  return !!isQwikElement(node) && node.hasAttribute("q:id");
};
const intToStr = (nu) => nu.toString(36);
const strToInt = (nu) => parseInt(nu, 36);
const getEventName = (attribute) => {
  const colonPos = attribute.indexOf(":");
  return attribute.slice(colonPos + 1).replace(/-./g, (x) => x[1].toUpperCase());
};
const WatchFlagsIsEffect = 1;
const WatchFlagsIsWatch = 2;
const WatchFlagsIsDirty = 4;
const WatchFlagsIsCleanup = 8;
const WatchFlagsIsResource = 16;
const useWatchQrl = (qrl, opts) => {
  const { get: get2, set, ctx, i } = useSequentialScope();
  if (get2) {
    return;
  }
  const el = ctx.$hostElement$;
  const containerState = ctx.$renderCtx$.$static$.$containerState$;
  const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsWatch, i, el, qrl, void 0);
  const elCtx = getContext(el);
  set(true), qrl.$resolveLazy$(containerState.$containerEl$), elCtx.$watches$ || (elCtx.$watches$ = []), elCtx.$watches$.push(watch), waitAndRun(ctx, () => runSubscriber(watch, containerState, ctx.$renderCtx$)), isServer$1() && useRunWatch(watch, opts == null ? void 0 : opts.eagerness);
};
const isResourceWatch = (watch) => !!watch.$resource$;
const runSubscriber = (watch, containerState, rctx) => (watch.$flags$, isResourceWatch(watch) ? runResource(watch, containerState) : runWatch(watch, containerState, rctx));
const runResource = (watch, containerState, waitOn) => {
  watch.$flags$ &= ~WatchFlagsIsDirty, cleanupWatch(watch);
  const el = watch.$el$;
  const invokationContext = newInvokeContext(el, void 0, "WatchEvent");
  const { $subsManager$: subsManager } = containerState;
  const watchFn = watch.$qrl$.getFn(invokationContext, () => {
    subsManager.$clearSub$(watch);
  });
  const cleanups = [];
  const resource = watch.$resource$;
  const resourceTarget = unwrapProxy(resource);
  const opts = {
    track: (obj, prop) => {
      const target = getProxyTarget(obj);
      return target ? subsManager.$getLocal$(target).$addSub$(watch, prop) : logErrorAndStop(codeToText(QError_trackUseStore), obj), prop ? obj[prop] : obj;
    },
    cleanup(callback) {
      cleanups.push(callback);
    },
    previous: resourceTarget.resolved
  };
  let resolve;
  let reject;
  let done2 = false;
  const setState = (resolved, value) => !done2 && (done2 = true, resolved ? (done2 = true, resource.state = "resolved", resource.resolved = value, resource.error = void 0, resolve(value)) : (done2 = true, resource.state = "rejected", resource.resolved = void 0, resource.error = value, reject(value)), true);
  invoke(invokationContext, () => {
    resource.state = "pending", resource.resolved = void 0, resource.promise = new Promise((r, re) => {
      resolve = r, reject = re;
    });
  }), watch.$destroy$ = noSerialize(() => {
    cleanups.forEach((fn) => fn());
  });
  const promise = safeCall(() => then(waitOn, () => watchFn(opts)), (value) => {
    setState(true, value);
  }, (reason) => {
    setState(false, reason);
  });
  const timeout = resourceTarget.timeout;
  return timeout ? Promise.race([promise, delay(timeout).then(() => {
    setState(false, "timeout") && cleanupWatch(watch);
  })]) : promise;
};
const runWatch = (watch, containerState, rctx) => {
  watch.$flags$ &= ~WatchFlagsIsDirty, cleanupWatch(watch);
  const hostElement = watch.$el$;
  const invokationContext = newInvokeContext(hostElement, void 0, "WatchEvent");
  const { $subsManager$: subsManager } = containerState;
  const watchFn = watch.$qrl$.getFn(invokationContext, () => {
    subsManager.$clearSub$(watch);
  });
  const cleanups = [];
  watch.$destroy$ = noSerialize(() => {
    cleanups.forEach((fn) => fn());
  });
  const opts = {
    track: (obj, prop) => {
      const target = getProxyTarget(obj);
      return target ? subsManager.$getLocal$(target).$addSub$(watch, prop) : logErrorAndStop(codeToText(QError_trackUseStore), obj), prop ? obj[prop] : obj;
    },
    cleanup(callback) {
      cleanups.push(callback);
    }
  };
  return safeCall(() => watchFn(opts), (returnValue) => {
    isFunction(returnValue) && cleanups.push(returnValue);
  }, (reason) => {
    handleError$2(reason, hostElement, rctx);
  });
};
const cleanupWatch = (watch) => {
  const destroy2 = watch.$destroy$;
  if (destroy2) {
    watch.$destroy$ = void 0;
    try {
      destroy2();
    } catch (err2) {
      logError(err2);
    }
  }
};
const destroyWatch = (watch) => {
  watch.$flags$ & WatchFlagsIsCleanup ? (watch.$flags$ &= ~WatchFlagsIsCleanup, (0, watch.$qrl$)()) : cleanupWatch(watch);
};
const useRunWatch = (watch, eagerness) => {
  "load" === eagerness ? useOn("qinit", getWatchHandlerQrl(watch)) : "visible" === eagerness && useOn("qvisible", getWatchHandlerQrl(watch));
};
const getWatchHandlerQrl = (watch) => {
  const watchQrl = watch.$qrl$;
  return createQRL(watchQrl.$chunk$, "_hW", _hW, null, null, [watch], watchQrl.$symbol$);
};
class Watch {
  constructor($flags$, $index$, $el$, $qrl$, $resource$) {
    this.$flags$ = $flags$, this.$index$ = $index$, this.$el$ = $el$, this.$qrl$ = $qrl$, this.$resource$ = $resource$;
  }
}
const _createResourceReturn = (opts) => ({
  __brand: "resource",
  promise: void 0,
  resolved: void 0,
  error: void 0,
  state: "pending",
  timeout: opts == null ? void 0 : opts.timeout
});
const isResourceReturn = (obj) => isObject(obj) && "resource" === obj.__brand;
const UNDEFINED_PREFIX = "";
const QRLSerializer = {
  prefix: "",
  test: (v) => isQrl$1(v),
  serialize: (obj, getObjId, containerState) => stringifyQRL(obj, {
    $getObjId$: getObjId
  }),
  prepare: (data2, containerState) => parseQRL(data2, containerState.$containerEl$),
  fill: (qrl, getObject) => {
    qrl.$capture$ && qrl.$capture$.length > 0 && (qrl.$captureRef$ = qrl.$capture$.map(getObject), qrl.$capture$ = null);
  }
};
const WatchSerializer = {
  prefix: "",
  test: (v) => {
    return isObject(obj = v) && obj instanceof Watch;
    var obj;
  },
  serialize: (obj, getObjId) => ((watch, getObjId2) => {
    let value = `${intToStr(watch.$flags$)} ${intToStr(watch.$index$)} ${getObjId2(watch.$qrl$)} ${getObjId2(watch.$el$)}`;
    return isResourceWatch(watch) && (value += ` ${getObjId2(watch.$resource$)}`), value;
  })(obj, getObjId),
  prepare: (data2) => ((data3) => {
    const [flags, index2, qrl, el, resource] = data3.split(" ");
    return new Watch(strToInt(flags), strToInt(index2), el, qrl, resource);
  })(data2),
  fill: (watch, getObject) => {
    watch.$el$ = getObject(watch.$el$), watch.$qrl$ = getObject(watch.$qrl$), watch.$resource$ && (watch.$resource$ = getObject(watch.$resource$));
  }
};
const ResourceSerializer = {
  prefix: "",
  test: (v) => isResourceReturn(v),
  serialize: (obj, getObjId) => ((resource, getObjId2) => {
    const state2 = resource.state;
    return "resolved" === state2 ? `0 ${getObjId2(resource.resolved)}` : "pending" === state2 ? "1" : `2 ${getObjId2(resource.error)}`;
  })(obj, getObjId),
  prepare: (data2) => ((data3) => {
    const [first, id] = data3.split(" ");
    const result = _createResourceReturn(void 0);
    return result.promise = Promise.resolve(), "0" === first ? (result.state = "resolved", result.resolved = id) : "1" === first ? (result.state = "pending", result.promise = new Promise(() => {
    })) : "2" === first && (result.state = "rejected", result.error = id), result;
  })(data2),
  fill: (resource, getObject) => {
    if ("resolved" === resource.state) {
      resource.resolved = getObject(resource.resolved), resource.promise = Promise.resolve(resource.resolved);
    } else if ("rejected" === resource.state) {
      const p = Promise.reject(resource.error);
      p.catch(() => null), resource.error = getObject(resource.error), resource.promise = p;
    }
  }
};
const URLSerializer = {
  prefix: "",
  test: (v) => v instanceof URL,
  serialize: (obj) => obj.href,
  prepare: (data2) => new URL(data2),
  fill: void 0
};
const DateSerializer = {
  prefix: "",
  test: (v) => v instanceof Date,
  serialize: (obj) => obj.toISOString(),
  prepare: (data2) => new Date(data2),
  fill: void 0
};
const RegexSerializer = {
  prefix: "\x07",
  test: (v) => v instanceof RegExp,
  serialize: (obj) => `${obj.flags} ${obj.source}`,
  prepare: (data2) => {
    const space = data2.indexOf(" ");
    const source = data2.slice(space + 1);
    const flags = data2.slice(0, space);
    return new RegExp(source, flags);
  },
  fill: void 0
};
const ErrorSerializer = {
  prefix: "",
  test: (v) => v instanceof Error,
  serialize: (obj) => obj.message,
  prepare: (text) => {
    const err2 = new Error(text);
    return err2.stack = void 0, err2;
  },
  fill: void 0
};
const DocumentSerializer = {
  prefix: "",
  test: (v) => isDocument(v),
  serialize: void 0,
  prepare: (_, _c, doc) => doc,
  fill: void 0
};
const SERIALIZABLE_STATE = Symbol("serializable-data");
const ComponentSerializer = {
  prefix: "",
  test: (obj) => isQwikComponent(obj),
  serialize: (obj, getObjId, containerState) => {
    const [qrl] = obj[SERIALIZABLE_STATE];
    return stringifyQRL(qrl, {
      $getObjId$: getObjId
    });
  },
  prepare: (data2, containerState) => {
    const optionsIndex = data2.indexOf("{");
    const qrlString = -1 == optionsIndex ? data2 : data2.slice(0, optionsIndex);
    const qrl = parseQRL(qrlString, containerState.$containerEl$);
    return componentQrl(qrl);
  },
  fill: (component, getObject) => {
    const [qrl] = component[SERIALIZABLE_STATE];
    qrl.$capture$ && qrl.$capture$.length > 0 && (qrl.$captureRef$ = qrl.$capture$.map(getObject), qrl.$capture$ = null);
  }
};
const serializers = [QRLSerializer, WatchSerializer, ResourceSerializer, URLSerializer, DateSerializer, RegexSerializer, ErrorSerializer, DocumentSerializer, ComponentSerializer, {
  prefix: "",
  test: (obj) => "function" == typeof obj && void 0 !== obj.__qwik_serializable__,
  serialize: (obj) => obj.toString(),
  prepare: (data2) => {
    const fn = new Function("return " + data2)();
    return fn.__qwik_serializable__ = true, fn;
  },
  fill: void 0
}];
const serializeValue = (obj, getObjID, containerState) => {
  for (const s of serializers) {
    if (s.test(obj)) {
      let value = s.prefix;
      return s.serialize && (value += s.serialize(obj, getObjID, containerState)), value;
    }
  }
};
const getOrCreateProxy = (target, containerState, flags = 0) => containerState.$proxyMap$.get(target) || createProxy(target, containerState, flags, void 0);
const createProxy = (target, containerState, flags, subs) => {
  unwrapProxy(target), containerState.$proxyMap$.has(target);
  const manager = containerState.$subsManager$.$getLocal$(target, subs);
  const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager, flags));
  return containerState.$proxyMap$.set(target, proxy), proxy;
};
const QOjectTargetSymbol = Symbol();
const QOjectSubsSymbol = Symbol();
const QOjectFlagsSymbol = Symbol();
class ReadWriteProxyHandler {
  constructor($containerState$, $manager$, $flags$) {
    this.$containerState$ = $containerState$, this.$manager$ = $manager$, this.$flags$ = $flags$;
  }
  get(target, prop) {
    if ("symbol" == typeof prop) {
      return prop === QOjectTargetSymbol ? target : prop === QOjectFlagsSymbol ? this.$flags$ : prop === QOjectSubsSymbol ? this.$manager$.$subs$ : target[prop];
    }
    let subscriber;
    const invokeCtx = tryGetInvokeContext();
    const recursive = 0 != (1 & this.$flags$);
    const immutable2 = 0 != (2 & this.$flags$);
    invokeCtx && (subscriber = invokeCtx.$subscriber$);
    let value = target[prop];
    if (isMutable(value) ? value = value.mut : immutable2 && (subscriber = null), subscriber) {
      const isA = isArray(target);
      this.$manager$.$addSub$(subscriber, isA ? void 0 : prop);
    }
    return recursive ? wrap(value, this.$containerState$) : value;
  }
  set(target, prop, newValue) {
    if ("symbol" == typeof prop) {
      return target[prop] = newValue, true;
    }
    if (0 != (2 & this.$flags$)) {
      throw qError(QError_immutableProps);
    }
    const unwrappedNewValue = 0 != (1 & this.$flags$) ? unwrapProxy(newValue) : newValue;
    return isArray(target) ? (target[prop] = unwrappedNewValue, this.$manager$.$notifySubs$(), true) : (target[prop] !== unwrappedNewValue && (target[prop] = unwrappedNewValue, this.$manager$.$notifySubs$(prop)), true);
  }
  has(target, property) {
    return property === QOjectTargetSymbol || property === QOjectFlagsSymbol || Object.prototype.hasOwnProperty.call(target, property);
  }
  ownKeys(target) {
    let subscriber = null;
    const invokeCtx = tryGetInvokeContext();
    return invokeCtx && (subscriber = invokeCtx.$subscriber$), subscriber && this.$manager$.$addSub$(subscriber), Object.getOwnPropertyNames(target);
  }
}
const wrap = (value, containerState) => {
  if (isQrl$1(value)) {
    return value;
  }
  if (isObject(value)) {
    if (Object.isFrozen(value)) {
      return value;
    }
    const nakedValue = unwrapProxy(value);
    return nakedValue !== value || isNode(nakedValue) ? value : shouldSerialize(nakedValue) ? containerState.$proxyMap$.get(value) || getOrCreateProxy(value, containerState, 1) : value;
  }
  return value;
};
const noSerializeSet = /* @__PURE__ */ new WeakSet();
const shouldSerialize = (obj) => !isObject(obj) && !isFunction(obj) || !noSerializeSet.has(obj);
const fastShouldSerialize = (obj) => !noSerializeSet.has(obj);
const noSerialize = (input) => (null != input && noSerializeSet.add(input), input);
const mutable = (v) => new MutableImpl(v);
class MutableImpl {
  constructor(mut) {
    this.mut = mut;
  }
}
const isMutable = (v) => v instanceof MutableImpl;
const unwrapProxy = (proxy) => {
  var _a2;
  return isObject(proxy) ? (_a2 = getProxyTarget(proxy)) != null ? _a2 : proxy : proxy;
};
const getProxyTarget = (obj) => obj[QOjectTargetSymbol];
const getProxySubs = (obj) => obj[QOjectSubsSymbol];
const getProxyFlags = (obj) => {
  if (isObject(obj)) {
    return obj[QOjectFlagsSymbol];
  }
};
const resumeIfNeeded = (containerEl) => {
  "paused" === directGetAttribute(containerEl, "q:container") && (((containerEl2) => {
    if (!isContainer(containerEl2)) {
      return void logWarn();
    }
    const doc = getDocument(containerEl2);
    const script = ((parentElm) => {
      let child = parentElm.lastElementChild;
      for (; child; ) {
        if ("SCRIPT" === child.tagName && "qwik/json" === directGetAttribute(child, "type")) {
          return child;
        }
        child = child.previousElementSibling;
      }
    })(containerEl2 === doc.documentElement ? doc.body : containerEl2);
    if (!script) {
      return void logWarn();
    }
    script.remove();
    const containerState = getContainerState(containerEl2);
    ((containerEl3, containerState2) => {
      const head2 = containerEl3.ownerDocument.head;
      containerEl3.querySelectorAll("style[q\\:style]").forEach((el2) => {
        containerState2.$styleIds$.add(directGetAttribute(el2, "q:style")), head2.appendChild(el2);
      });
    })(containerEl2, containerState);
    const meta = JSON.parse((script.textContent || "{}").replace(/\\x3C(\/?script)/g, "<$1"));
    const elements = /* @__PURE__ */ new Map();
    const getObject = (id) => ((id2, elements2, objs, containerState2) => {
      if ("string" == typeof id2 && id2.length, id2.startsWith("#")) {
        return elements2.has(id2), elements2.get(id2);
      }
      const index2 = strToInt(id2);
      objs.length;
      let obj = objs[index2];
      for (let i = id2.length - 1; i >= 0; i--) {
        const code = id2[i];
        const transform = OBJECT_TRANSFORMS[code];
        if (!transform) {
          break;
        }
        obj = transform(obj, containerState2);
      }
      return obj;
    })(id, elements, meta.objs, containerState);
    let maxId = 0;
    getNodesInScope(containerEl2, hasQId).forEach((el2) => {
      const id = directGetAttribute(el2, "q:id");
      const ctx = getContext(el2);
      ctx.$id$ = id, isElement(el2) && (ctx.$vdom$ = domToVnode(el2)), elements.set("#" + id, el2), maxId = Math.max(maxId, strToInt(id));
    }), containerState.$elementIndex$ = ++maxId;
    const parser = ((getObject2, containerState2, doc2) => {
      const map = /* @__PURE__ */ new Map();
      return {
        prepare(data2) {
          for (const s of serializers) {
            const prefix = s.prefix;
            if (data2.startsWith(prefix)) {
              const value = s.prepare(data2.slice(prefix.length), containerState2, doc2);
              return s.fill && map.set(value, s), value;
            }
          }
          return data2;
        },
        fill(obj) {
          const serializer = map.get(obj);
          return !!serializer && (serializer.fill(obj, getObject2, containerState2), true);
        }
      };
    })(getObject, containerState, doc);
    ((objs, subs, getObject2, containerState2, parser2) => {
      for (let i = 0; i < objs.length; i++) {
        const value = objs[i];
        isString(value) && (objs[i] = value === UNDEFINED_PREFIX ? void 0 : parser2.prepare(value));
      }
      for (let i = 0; i < subs.length; i++) {
        const value = objs[i];
        const sub = subs[i];
        if (sub) {
          const converted = /* @__PURE__ */ new Map();
          let flags = 0;
          for (const key of Object.keys(sub)) {
            const v = sub[key];
            if ("$" === key) {
              flags = v;
              continue;
            }
            const el2 = getObject2(key);
            if (!el2) {
              continue;
            }
            const set = null === v ? null : new Set(v);
            converted.set(el2, set);
          }
          createProxy(value, containerState2, flags, converted);
        }
      }
    })(meta.objs, meta.subs, getObject, containerState, parser);
    for (const obj of meta.objs) {
      reviveNestedObjects(obj, getObject, parser);
    }
    for (const elementID of Object.keys(meta.ctx)) {
      elementID.startsWith("#");
      const ctxMeta = meta.ctx[elementID];
      const el2 = elements.get(elementID);
      const ctx = getContext(el2);
      const refMap = ctxMeta.r;
      const seq = ctxMeta.s;
      const host = ctxMeta.h;
      const contexts = ctxMeta.c;
      const watches = ctxMeta.w;
      if (refMap && (isElement(el2), ctx.$refMap$ = refMap.split(" ").map(getObject), ctx.li = getDomListeners(ctx, containerEl2)), seq && (ctx.$seq$ = seq.split(" ").map(getObject)), watches && (ctx.$watches$ = watches.split(" ").map(getObject)), contexts) {
        ctx.$contexts$ = /* @__PURE__ */ new Map();
        for (const part of contexts.split(" ")) {
          const [key, value] = part.split("=");
          ctx.$contexts$.set(key, getObject(value));
        }
      }
      if (host) {
        const [props, renderQrl] = host.split(" ");
        const styleIds = el2.getAttribute("q:sstyle");
        ctx.$scopeIds$ = styleIds ? styleIds.split(" ") : null, ctx.$mounted$ = true, ctx.$props$ = getObject(props), ctx.$renderQrl$ = getObject(renderQrl);
      }
    }
    var el;
    directSetAttribute(containerEl2, "q:container", "resumed"), (el = containerEl2) && "function" == typeof CustomEvent && el.dispatchEvent(new CustomEvent("qresume", {
      detail: void 0,
      bubbles: true,
      composed: true
    }));
  })(containerEl), appendQwikDevTools(containerEl));
};
const appendQwikDevTools = (containerEl) => {
  containerEl.qwik = {
    pause: () => (async (elmOrDoc, defaultParentJSON) => {
      const doc = getDocument(elmOrDoc);
      const documentElement = doc.documentElement;
      const containerEl2 = isDocument(elmOrDoc) ? documentElement : elmOrDoc;
      if ("paused" === directGetAttribute(containerEl2, "q:container")) {
        throw qError(QError_containerAlreadyPaused);
      }
      const parentJSON = containerEl2 === doc.documentElement ? doc.body : containerEl2;
      const data2 = await (async (containerEl3) => {
        const containerState = getContainerState(containerEl3);
        const contexts = getNodesInScope(containerEl3, hasQId).map(tryGetContext);
        return _pauseFromContexts(contexts, containerState);
      })(containerEl2);
      const script = doc.createElement("script");
      return directSetAttribute(script, "type", "qwik/json"), script.textContent = JSON.stringify(data2.state, void 0, void 0).replace(/<(\/?script)/g, "\\x3C$1"), parentJSON.appendChild(script), directSetAttribute(containerEl2, "q:container", "paused"), data2;
    })(containerEl),
    state: getContainerState(containerEl)
  };
};
const tryGetContext = (element) => element._qc_;
const getContext = (element) => {
  let ctx = tryGetContext(element);
  return ctx || (element._qc_ = ctx = {
    $dirty$: false,
    $mounted$: false,
    $attachedListeners$: false,
    $id$: "",
    $element$: element,
    $refMap$: [],
    li: {},
    $watches$: null,
    $seq$: null,
    $slots$: null,
    $scopeIds$: null,
    $appendStyles$: null,
    $props$: null,
    $vdom$: null,
    $renderQrl$: null,
    $contexts$: null
  }), ctx;
};
const cleanupContext = (ctx, subsManager) => {
  var _a2;
  const el = ctx.$element$;
  (_a2 = ctx.$watches$) == null ? void 0 : _a2.forEach((watch) => {
    subsManager.$clearSub$(watch), destroyWatch(watch);
  }), ctx.$renderQrl$ && subsManager.$clearSub$(el), ctx.$renderQrl$ = null, ctx.$seq$ = null, ctx.$watches$ = null, ctx.$dirty$ = false, el._qc_ = void 0;
};
const PREFIXES = ["on", "window:on", "document:on"];
const SCOPED = ["on", "on-window", "on-document"];
const normalizeOnProp = (prop) => {
  let scope = "on";
  for (let i = 0; i < PREFIXES.length; i++) {
    const prefix = PREFIXES[i];
    if (prop.startsWith(prefix)) {
      scope = SCOPED[i], prop = prop.slice(prefix.length);
      break;
    }
  }
  return scope + ":" + (prop.startsWith("-") ? fromCamelToKebabCase(prop.slice(1)) : prop.toLowerCase());
};
const createProps = (target, containerState) => createProxy(target, containerState, 2);
const getPropsMutator = (ctx, containerState) => {
  let props = ctx.$props$;
  props || (ctx.$props$ = props = createProps({}, containerState));
  const target = getProxyTarget(props);
  const manager = containerState.$subsManager$.$getLocal$(target);
  return {
    set(prop, value) {
      let oldValue = target[prop];
      isMutable(oldValue) && (oldValue = oldValue.mut), containerState.$mutableProps$ ? isMutable(value) ? (value = value.mut, target[prop] = value) : target[prop] = mutable(value) : (target[prop] = value, isMutable(value) && (value = value.mut, true)), oldValue !== value && manager.$notifySubs$(prop);
    }
  };
};
const inflateQrl = (qrl, elCtx) => (qrl.$capture$, qrl.$captureRef$ = qrl.$capture$.map((idx) => {
  const int = parseInt(idx, 10);
  const obj = elCtx.$refMap$[int];
  return elCtx.$refMap$.length, obj;
}));
const logError = (message, ...optionalParams) => {
  const err2 = message instanceof Error ? message : new Error(message);
  return "function" == typeof globalThis._handleError && message instanceof Error ? globalThis._handleError(message, optionalParams) : console.error("%cQWIK ERROR", "", err2.message, ...printParams(optionalParams), err2.stack), err2;
};
const logErrorAndStop = (message, ...optionalParams) => logError(message, ...optionalParams);
const logWarn = (message, ...optionalParams) => {
};
const printParams = (optionalParams) => optionalParams;
const QError_stringifyClassOrStyle = 0;
const QError_verifySerializable = 3;
const QError_setProperty = 6;
const QError_notFoundContext = 13;
const QError_useMethodOutsideContext = 14;
const QError_immutableProps = 17;
const QError_useInvokeContext = 20;
const QError_containerAlreadyPaused = 21;
const QError_invalidJsxNodeType = 25;
const QError_trackUseStore = 26;
const QError_missingObjectId = 27;
const qError = (code, ...parts) => {
  const text = codeToText(code);
  return logErrorAndStop(text, ...parts);
};
const codeToText = (code) => `Code(${code})`;
const isQrl$1 = (value) => "function" == typeof value && "function" == typeof value.getSymbol;
const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {
  let _containerEl;
  const setContainer = (el) => {
    _containerEl || (_containerEl = el);
  };
  const resolve = async (containerEl) => {
    if (containerEl && setContainer(containerEl), symbolRef) {
      return symbolRef;
    }
    if (symbolFn) {
      return symbolRef = symbolFn().then((module) => symbolRef = module[symbol]);
    }
    {
      if (!_containerEl) {
        throw new Error(`QRL '${chunk}#${symbol || "default"}' does not have an attached container`);
      }
      const symbol2 = getPlatform().importSymbol(_containerEl, chunk, symbol);
      return symbolRef = then(symbol2, (ref) => symbolRef = ref);
    }
  };
  const resolveLazy = (containerEl) => symbolRef || resolve(containerEl);
  const invokeFn = (currentCtx, beforeFn) => (...args) => {
    const fn = resolveLazy();
    return then(fn, (fn2) => {
      if (isFunction(fn2)) {
        if (beforeFn && false === beforeFn()) {
          return;
        }
        const context = {
          ...createInvokationContext(currentCtx),
          $qrl$: QRL
        };
        return emitUsedSymbol(symbol, context.$element$), invoke(context, fn2, ...args);
      }
      throw qError(10);
    });
  };
  const createInvokationContext = (invoke2) => null == invoke2 ? newInvokeContext() : isArray(invoke2) ? newInvokeContextFromTuple(invoke2) : invoke2;
  const invokeQRL = async function(...args) {
    const fn = invokeFn();
    return await fn(...args);
  };
  const resolvedSymbol = refSymbol != null ? refSymbol : symbol;
  const hash = getSymbolHash$1(resolvedSymbol);
  const QRL = invokeQRL;
  const methods = {
    getSymbol: () => resolvedSymbol,
    getHash: () => hash,
    resolve,
    $resolveLazy$: resolveLazy,
    $setContainer$: setContainer,
    $chunk$: chunk,
    $symbol$: symbol,
    $refSymbol$: refSymbol,
    $hash$: hash,
    getFn: invokeFn,
    $capture$: capture,
    $captureRef$: captureRef
  };
  return Object.assign(invokeQRL, methods);
};
const getSymbolHash$1 = (symbolName) => {
  const index2 = symbolName.lastIndexOf("_");
  return index2 > -1 ? symbolName.slice(index2 + 1) : symbolName;
};
const emitUsedSymbol = (symbol, element) => {
  isServer$1() || "object" != typeof document || document.dispatchEvent(new CustomEvent("qsymbol", {
    bubbles: false,
    detail: {
      symbol,
      element,
      timestamp: performance.now()
    }
  }));
};
let runtimeSymbolId = 0;
const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY$1) => createQRL("/inlinedQRL", symbolName, symbol, null, null, lexicalScopeCapture, null);
const stringifyQRL = (qrl, opts = {}) => {
  var _a2;
  let symbol = qrl.$symbol$;
  let chunk = qrl.$chunk$;
  const refSymbol = (_a2 = qrl.$refSymbol$) != null ? _a2 : symbol;
  const platform = getPlatform();
  if (platform) {
    const result = platform.chunkForSymbol(refSymbol);
    result && (chunk = result[1], qrl.$refSymbol$ || (symbol = result[0]));
  }
  chunk.startsWith("./") && (chunk = chunk.slice(2));
  const parts = [chunk];
  symbol && "default" !== symbol && parts.push("#", symbol);
  const capture = qrl.$capture$;
  const captureRef = qrl.$captureRef$;
  if (captureRef && captureRef.length) {
    if (opts.$getObjId$) {
      const capture2 = captureRef.map(opts.$getObjId$);
      parts.push(`[${capture2.join(" ")}]`);
    } else if (opts.$addRefMap$) {
      const capture2 = captureRef.map(opts.$addRefMap$);
      parts.push(`[${capture2.join(" ")}]`);
    }
  } else {
    capture && capture.length > 0 && parts.push(`[${capture.join(" ")}]`);
  }
  return parts.join("");
};
const serializeQRLs = (existingQRLs, elCtx) => {
  var value;
  (function(value2) {
    return value2 && "number" == typeof value2.nodeType;
  })(value = elCtx.$element$) && value.nodeType;
  const opts = {
    $element$: elCtx.$element$,
    $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj)
  };
  return existingQRLs.map((qrl) => stringifyQRL(qrl, opts)).join("\n");
};
const parseQRL = (qrl, containerEl) => {
  const endIdx = qrl.length;
  const hashIdx = indexOf(qrl, 0, "#");
  const captureIdx = indexOf(qrl, hashIdx, "[");
  const chunkEndIdx = Math.min(hashIdx, captureIdx);
  const chunk = qrl.substring(0, chunkEndIdx);
  const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;
  const symbolEndIdx = captureIdx;
  const symbol = symbolStartIdx == symbolEndIdx ? "default" : qrl.substring(symbolStartIdx, symbolEndIdx);
  const captureStartIdx = captureIdx;
  const captureEndIdx = endIdx;
  const capture = captureStartIdx === captureEndIdx ? EMPTY_ARRAY$1 : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(" ");
  "/runtimeQRL" === chunk && logError(codeToText(2), qrl);
  const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);
  return containerEl && iQrl.$setContainer$(containerEl), iQrl;
};
const indexOf = (text, startIdx, char) => {
  const endIdx = text.length;
  const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);
  return -1 == charIdx ? endIdx : charIdx;
};
const addToArray = (array, obj) => {
  const index2 = array.indexOf(obj);
  return -1 === index2 ? (array.push(obj), array.length - 1) : index2;
};
const $ = (expression) => ((symbol, lexicalScopeCapture = EMPTY_ARRAY$1) => createQRL("/runtimeQRL", "s" + runtimeSymbolId++, symbol, null, null, lexicalScopeCapture, null))(expression);
const componentQrl = (onRenderQrl) => {
  function QwikComponent(props, key) {
    const hash = onRenderQrl.$hash$;
    return jsx(Virtual, {
      "q:renderFn": onRenderQrl,
      ...props
    }, hash + ":" + (key || ""));
  }
  return QwikComponent[SERIALIZABLE_STATE] = [onRenderQrl], QwikComponent;
};
const isQwikComponent = (component) => "function" == typeof component && void 0 !== component[SERIALIZABLE_STATE];
const Slot = (props) => {
  var _a2;
  const name2 = (_a2 = props.name) != null ? _a2 : "";
  return jsx(Virtual, {
    "q:s": ""
  }, name2);
};
const renderSSR = async (node, opts) => {
  var _a2;
  const root = opts.containerTagName;
  const containerEl = createContext(1).$element$;
  const containerState = createContainerState(containerEl);
  const rctx = createRenderContext({
    nodeType: 9
  }, containerState);
  const headNodes = (_a2 = opts.beforeContent) != null ? _a2 : [];
  const ssrCtx = {
    rctx,
    $contexts$: [],
    projectedChildren: void 0,
    projectedContext: void 0,
    hostCtx: void 0,
    invocationContext: void 0,
    headNodes: "html" === root ? headNodes : []
  };
  const containerAttributes = {
    ...opts.containerAttributes,
    "q:container": "paused",
    "q:version": "0.9.0",
    "q:render": "ssr",
    "q:base": opts.base,
    children: "html" === root ? [node] : [headNodes, node]
  };
  containerState.$envData$ = {
    url: opts.url,
    ...opts.envData
  }, node = jsx(root, containerAttributes), containerState.$hostsRendering$ = /* @__PURE__ */ new Set(), containerState.$renderPromise$ = Promise.resolve().then(() => renderRoot(node, ssrCtx, opts.stream, containerState, opts)), await containerState.$renderPromise$;
};
const renderRoot = async (node, ssrCtx, stream2, containerState, opts) => {
  const beforeClose = opts.beforeClose;
  return await renderNode(node, ssrCtx, stream2, 0, beforeClose ? (stream3) => {
    const result = beforeClose(ssrCtx.$contexts$, containerState);
    return processData(result, ssrCtx, stream3, 0, void 0);
  } : void 0), ssrCtx.rctx.$static$;
};
const renderNodeVirtual = (node, elCtx, extraNodes, ssrCtx, stream2, flags, beforeClose) => {
  var _a2;
  const props = node.props;
  const renderQrl = props["q:renderFn"];
  if (renderQrl) {
    return elCtx.$renderQrl$ = renderQrl, renderSSRComponent(ssrCtx, stream2, elCtx, node, flags, beforeClose);
  }
  let virtualComment = "<!--qv" + renderVirtualAttributes(props);
  const isSlot = "q:s" in props;
  const key = null != node.key ? String(node.key) : null;
  if (isSlot && ((_a2 = ssrCtx.hostCtx) == null ? void 0 : _a2.$id$, virtualComment += " q:sref=" + ssrCtx.hostCtx.$id$), null != key && (virtualComment += " q:key=" + key), virtualComment += "-->", stream2.write(virtualComment), extraNodes) {
    for (const node2 of extraNodes) {
      renderNodeElementSync(node2.type, node2.props, stream2);
    }
  }
  const promise = walkChildren(props.children, ssrCtx, stream2, flags);
  return then(promise, () => {
    var _a3;
    if (!isSlot && !beforeClose) {
      return void stream2.write(CLOSE_VIRTUAL);
    }
    let promise2;
    if (isSlot) {
      const content = (_a3 = ssrCtx.projectedChildren) == null ? void 0 : _a3[key];
      content && (ssrCtx.projectedChildren[key] = void 0, promise2 = processData(content, ssrCtx.projectedContext, stream2, flags));
    }
    return beforeClose && (promise2 = then(promise2, () => beforeClose(stream2))), then(promise2, () => {
      stream2.write(CLOSE_VIRTUAL);
    });
  });
};
const CLOSE_VIRTUAL = "<!--/qv-->";
const renderVirtualAttributes = (attributes) => {
  let text = "";
  for (const prop of Object.keys(attributes)) {
    if ("children" === prop) {
      continue;
    }
    const value = attributes[prop];
    null != value && (text += " " + ("" === value ? prop : prop + "=" + value));
  }
  return text;
};
const renderNodeElementSync = (tagName, attributes, stream2) => {
  if (stream2.write("<" + tagName + ((attributes2) => {
    let text = "";
    for (const prop of Object.keys(attributes2)) {
      if ("dangerouslySetInnerHTML" === prop) {
        continue;
      }
      const value = attributes2[prop];
      null != value && (text += " " + ("" === value ? prop : prop + '="' + value + '"'));
    }
    return text;
  })(attributes) + ">"), !!emptyElements[tagName]) {
    return;
  }
  const innerHTML = attributes.dangerouslySetInnerHTML;
  null != innerHTML && stream2.write(innerHTML), stream2.write(`</${tagName}>`);
};
const renderSSRComponent = (ssrCtx, stream2, elCtx, node, flags, beforeClose) => (setComponentProps(ssrCtx.rctx, elCtx, node.props), then(executeComponent(ssrCtx.rctx, elCtx), (res) => {
  const hostElement = elCtx.$element$;
  const newCtx = res.rctx;
  const invocationContext = newInvokeContext(hostElement, void 0);
  invocationContext.$subscriber$ = hostElement, invocationContext.$renderCtx$ = newCtx;
  const projectedContext = {
    ...ssrCtx,
    rctx: newCtx
  };
  const newSSrContext = {
    ...ssrCtx,
    projectedChildren: splitProjectedChildren(node.props.children, ssrCtx),
    projectedContext,
    rctx: newCtx,
    invocationContext
  };
  const extraNodes = [];
  if (elCtx.$appendStyles$) {
    const array = 4 & flags ? ssrCtx.headNodes : extraNodes;
    for (const style of elCtx.$appendStyles$) {
      array.push(jsx("style", {
        "q:style": style.styleId,
        dangerouslySetInnerHTML: style.content
      }));
    }
  }
  const newID = getNextIndex(ssrCtx.rctx);
  const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : void 0;
  const processedNode = jsx(node.type, {
    "q:sstyle": scopeId,
    "q:id": newID,
    children: res.node
  }, node.key);
  return elCtx.$id$ = newID, ssrCtx.$contexts$.push(elCtx), newSSrContext.hostCtx = elCtx, renderNodeVirtual(processedNode, elCtx, extraNodes, newSSrContext, stream2, flags, (stream3) => beforeClose ? then(renderQTemplates(newSSrContext, stream3), () => beforeClose(stream3)) : renderQTemplates(newSSrContext, stream3));
}));
const renderQTemplates = (ssrContext, stream2) => {
  const projectedChildren = ssrContext.projectedChildren;
  if (projectedChildren) {
    const nodes = Object.keys(projectedChildren).map((slotName) => {
      const value = projectedChildren[slotName];
      if (value) {
        return jsx("q:template", {
          [QSlot]: slotName,
          hidden: "",
          "aria-hidden": "true",
          children: value
        });
      }
    });
    return processData(nodes, ssrContext, stream2, 0, void 0);
  }
};
const splitProjectedChildren = (children, ssrCtx) => {
  var _a2;
  const flatChildren = flatVirtualChildren(children, ssrCtx);
  if (null === flatChildren) {
    return;
  }
  const slotMap = {};
  for (const child of flatChildren) {
    let slotName = "";
    isJSXNode(child) && (slotName = (_a2 = child.props[QSlot]) != null ? _a2 : "");
    let array = slotMap[slotName];
    array || (slotMap[slotName] = array = []), array.push(child);
  }
  return slotMap;
};
const createContext = (nodeType) => getContext({
  nodeType,
  _qc_: null
});
const renderNode = (node, ssrCtx, stream2, flags, beforeClose) => {
  var _a2;
  const tagName = node.type;
  if ("string" == typeof tagName) {
    const key = node.key;
    const props = node.props;
    const elCtx = createContext(1);
    const isHead = "head" === tagName;
    const hostCtx = ssrCtx.hostCtx;
    let openingElement = "<" + tagName + ((elCtx2, attributes) => {
      let text = "";
      for (const prop of Object.keys(attributes)) {
        if ("children" === prop || "key" === prop || "class" === prop || "className" === prop || "dangerouslySetInnerHTML" === prop) {
          continue;
        }
        const value = attributes[prop];
        if ("ref" === prop) {
          value.current = elCtx2.$element$;
          continue;
        }
        if (isOnProp(prop)) {
          setEvent(elCtx2.li, prop, value);
          continue;
        }
        const attrName = processPropKey(prop);
        const attrValue = processPropValue(attrName, value);
        null != attrValue && (text += " " + ("" === value ? attrName : attrName + '="' + escapeAttr(attrValue) + '"'));
      }
      return text;
    })(elCtx, props);
    let classStr = stringifyClass((_a2 = props.class) != null ? _a2 : props.className);
    if (hostCtx && (hostCtx.$scopeIds$ && (classStr = hostCtx.$scopeIds$.join(" ") + " " + classStr), !hostCtx.$attachedListeners$)) {
      hostCtx.$attachedListeners$ = true;
      for (const eventName of Object.keys(hostCtx.li)) {
        addQRLListener(elCtx.li, eventName, hostCtx.li[eventName]);
      }
    }
    isHead && (flags |= 1), classStr = classStr.trim(), classStr && (openingElement += ' class="' + classStr + '"');
    const listeners = Object.keys(elCtx.li);
    for (const key2 of listeners) {
      openingElement += " " + key2 + '="' + serializeQRLs(elCtx.li[key2], elCtx) + '"';
    }
    if (null != key && (openingElement += ' q:key="' + key + '"'), "ref" in props || listeners.length > 0) {
      const newID = getNextIndex(ssrCtx.rctx);
      openingElement += ' q:id="' + newID + '"', elCtx.$id$ = newID, ssrCtx.$contexts$.push(elCtx);
    }
    if (1 & flags && (openingElement += " q:head"), openingElement += ">", stream2.write(openingElement), emptyElements[tagName]) {
      return;
    }
    const innerHTML = props.dangerouslySetInnerHTML;
    if (null != innerHTML) {
      return stream2.write(String(innerHTML)), void stream2.write(`</${tagName}>`);
    }
    isHead || (flags &= -2), "html" === tagName ? flags |= 4 : flags &= -5;
    const promise = processData(props.children, ssrCtx, stream2, flags);
    return then(promise, () => {
      if (isHead) {
        for (const node2 of ssrCtx.headNodes) {
          renderNodeElementSync(node2.type, node2.props, stream2);
        }
        ssrCtx.headNodes.length = 0;
      }
      if (beforeClose) {
        return then(beforeClose(stream2), () => {
          stream2.write(`</${tagName}>`);
        });
      }
      stream2.write(`</${tagName}>`);
    });
  }
  if (tagName === Virtual) {
    const elCtx = createContext(111);
    return renderNodeVirtual(node, elCtx, void 0, ssrCtx, stream2, flags, beforeClose);
  }
  if (tagName === SSRComment) {
    return void stream2.write("<!--" + node.props.data + "-->");
  }
  if (tagName === InternalSSRStream) {
    return (async (node2, ssrCtx2, stream3, flags2) => {
      stream3.write("<!--qkssr-f-->");
      const generator = node2.props.children;
      let value;
      if (isFunction(generator)) {
        const v = generator({
          write(chunk) {
            stream3.write(chunk), stream3.write("<!--qkssr-f-->");
          }
        });
        if (isPromise(v)) {
          return v;
        }
        value = v;
      } else {
        value = generator;
      }
      for await (const chunk of value) {
        await processData(chunk, ssrCtx2, stream3, flags2, void 0), stream3.write("<!--qkssr-f-->");
      }
    })(node, ssrCtx, stream2, flags);
  }
  const res = invoke(ssrCtx.invocationContext, tagName, node.props, node.key);
  return processData(res, ssrCtx, stream2, flags, beforeClose);
};
const processData = (node, ssrCtx, stream2, flags, beforeClose) => {
  if (null != node && "boolean" != typeof node) {
    if (isString(node) || "number" == typeof node) {
      stream2.write(escapeHtml(String(node)));
    } else {
      if (isJSXNode(node)) {
        return renderNode(node, ssrCtx, stream2, flags, beforeClose);
      }
      if (isArray(node)) {
        return walkChildren(node, ssrCtx, stream2, flags);
      }
      if (isPromise(node)) {
        return stream2.write("<!--qkssr-f-->"), node.then((node2) => processData(node2, ssrCtx, stream2, flags, beforeClose));
      }
    }
  }
};
function walkChildren(children, ssrContext, stream2, flags) {
  if (null == children) {
    return;
  }
  if (!isArray(children)) {
    return processData(children, ssrContext, stream2, flags);
  }
  if (1 === children.length) {
    return processData(children[0], ssrContext, stream2, flags);
  }
  if (0 === children.length) {
    return;
  }
  let currentIndex = 0;
  const buffers = [];
  return children.reduce((prevPromise, child, index2) => {
    const buffer = [];
    buffers.push(buffer);
    const rendered = processData(child, ssrContext, prevPromise ? {
      write(chunk) {
        currentIndex === index2 ? stream2.write(chunk) : buffer.push(chunk);
      }
    } : stream2, flags);
    return isPromise(rendered) || prevPromise ? then(rendered, () => then(prevPromise, () => {
      currentIndex++, buffers.length > currentIndex && buffers[currentIndex].forEach((chunk) => stream2.write(chunk));
    })) : void currentIndex++;
  }, void 0);
}
const flatVirtualChildren = (children, ssrCtx) => {
  if (null == children) {
    return null;
  }
  const result = _flatVirtualChildren(children, ssrCtx);
  const nodes = isArray(result) ? result : [result];
  return 0 === nodes.length ? null : nodes;
};
const stringifyClass = (str) => {
  if (!str) {
    return "";
  }
  if ("string" == typeof str) {
    return str;
  }
  if (Array.isArray(str)) {
    return str.join(" ");
  }
  const output = [];
  for (const key in str) {
    Object.prototype.hasOwnProperty.call(str, key) && str[key] && output.push(key);
  }
  return output.join(" ");
};
const _flatVirtualChildren = (children, ssrCtx) => {
  if (null == children) {
    return null;
  }
  if (isArray(children)) {
    return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));
  }
  if (isJSXNode(children) && isFunction(children.type) && children.type !== SSRComment && children.type !== InternalSSRStream && children.type !== Virtual) {
    const res = invoke(ssrCtx.invocationContext, children.type, children.props, children.key);
    return flatVirtualChildren(res, ssrCtx);
  }
  return children;
};
const setComponentProps = (rctx, ctx, expectProps) => {
  const keys = Object.keys(expectProps);
  if (0 === keys.length) {
    return;
  }
  const target = {};
  ctx.$props$ = createProps(target, rctx.$static$.$containerState$);
  for (const key of keys) {
    "children" !== key && "q:renderFn" !== key && (target[key] = expectProps[key]);
  }
};
function processPropKey(prop) {
  return "htmlFor" === prop ? "for" : prop;
}
function processPropValue(prop, value) {
  return "style" === prop ? stringifyStyle(value) : false === value || null == value ? null : true === value ? "" : String(value);
}
const emptyElements = {
  area: true,
  base: true,
  basefont: true,
  bgsound: true,
  br: true,
  col: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};
const ESCAPE_HTML = /[&<>]/g;
const ESCAPE_ATTRIBUTES = /[&"]/g;
const escapeHtml = (s) => s.replace(ESCAPE_HTML, (c) => {
  switch (c) {
    case "&":
      return "&amp;";
    case "<":
      return "&lt;";
    case ">":
      return "&gt;";
    default:
      return "";
  }
});
const escapeAttr = (s) => s.replace(ESCAPE_ATTRIBUTES, (c) => {
  switch (c) {
    case "&":
      return "&amp;";
    case '"':
      return "&quot;";
    default:
      return "";
  }
});
const useStore = (initialState, opts) => {
  var _a2;
  const { get: get2, set, ctx } = useSequentialScope();
  if (null != get2) {
    return get2;
  }
  const value = isFunction(initialState) ? initialState() : initialState;
  if (false === (opts == null ? void 0 : opts.reactive)) {
    return set(value), value;
  }
  {
    const containerState = ctx.$renderCtx$.$static$.$containerState$;
    const newStore = createProxy(value, containerState, ((_a2 = opts == null ? void 0 : opts.recursive) != null ? _a2 : false) ? 1 : 0, void 0);
    return set(newStore), newStore;
  }
};
function useEnvData(key, defaultValue) {
  var _a2;
  return (_a2 = useInvokeContext().$renderCtx$.$static$.$containerState$.$envData$[key]) != null ? _a2 : defaultValue;
}
const useStylesQrl = (styles2) => {
  _useStyles(styles2, (str) => str, false);
};
const _useStyles = (styleQrl, transform, scoped) => {
  const { get: get2, set, ctx, i } = useSequentialScope();
  if (get2) {
    return get2;
  }
  const renderCtx = ctx.$renderCtx$;
  const styleId = (index2 = i, `${((text, hash = 0) => {
    if (0 === text.length) {
      return hash;
    }
    for (let i2 = 0; i2 < text.length; i2++) {
      hash = (hash << 5) - hash + text.charCodeAt(i2), hash |= 0;
    }
    return Number(Math.abs(hash)).toString(36);
  })(styleQrl.$hash$)}-${index2}`);
  var index2;
  const containerState = renderCtx.$static$.$containerState$;
  const elCtx = getContext(ctx.$hostElement$);
  if (set(styleId), elCtx.$appendStyles$ || (elCtx.$appendStyles$ = []), elCtx.$scopeIds$ || (elCtx.$scopeIds$ = []), scoped && elCtx.$scopeIds$.push(((styleId2) => "\u2B50\uFE0F" + styleId2)(styleId)), ((containerState2, styleId2) => containerState2.$styleIds$.has(styleId2))(containerState, styleId)) {
    return styleId;
  }
  containerState.$styleIds$.add(styleId);
  const value = styleQrl.$resolveLazy$(containerState.$containerEl$);
  const appendStyle = (styleText) => {
    elCtx.$appendStyles$, elCtx.$appendStyles$.push({
      styleId,
      content: transform(styleText, styleId)
    });
  };
  return isPromise(value) ? ctx.$waitOn$.push(value.then(appendStyle)) : appendStyle(value), styleId;
};
const Header = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "w-screen"
  });
}, "s_gm3f0H6v3fA"));
const isServer = true;
const isBrowser$1 = false;
const ContentContext = /* @__PURE__ */ createContext$1("qc-c");
const ContentInternalContext = /* @__PURE__ */ createContext$1("qc-ic");
const DocumentHeadContext = /* @__PURE__ */ createContext$1("qc-h");
const RouteLocationContext = /* @__PURE__ */ createContext$1("qc-l");
const RouteNavigateContext = /* @__PURE__ */ createContext$1("qc-n");
const RouterOutlet = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const { contents } = useContext(ContentInternalContext);
  if (contents && contents.length > 0) {
    const contentsLen = contents.length;
    let cmp = null;
    for (let i = contentsLen - 1; i >= 0; i--)
      cmp = jsx(contents[i].default, {
        children: cmp
      });
    return cmp;
  }
  return SkipRender;
}, "RouterOutlet_component_nd8yk3KO22c"));
const MODULE_CACHE$1 = /* @__PURE__ */ new WeakMap();
const loadRoute$1 = async (routes2, menus2, cacheModules2, pathname) => {
  if (Array.isArray(routes2))
    for (const route of routes2) {
      const match = route[0].exec(pathname);
      if (match) {
        const loaders = route[1];
        const params = getRouteParams$1(route[2], match);
        const routeBundleNames = route[4];
        const mods = new Array(loaders.length);
        const pendingLoads = [];
        const menuLoader = getMenuLoader$1(menus2, pathname);
        let menu = void 0;
        loaders.forEach((moduleLoader, i) => {
          loadModule$1(moduleLoader, pendingLoads, (routeModule) => mods[i] = routeModule, cacheModules2);
        });
        loadModule$1(menuLoader, pendingLoads, (menuModule) => menu = menuModule == null ? void 0 : menuModule.default, cacheModules2);
        if (pendingLoads.length > 0)
          await Promise.all(pendingLoads);
        return [
          params,
          mods,
          menu,
          routeBundleNames
        ];
      }
    }
  return null;
};
const loadModule$1 = (moduleLoader, pendingLoads, moduleSetter, cacheModules2) => {
  if (typeof moduleLoader === "function") {
    const loadedModule = MODULE_CACHE$1.get(moduleLoader);
    if (loadedModule)
      moduleSetter(loadedModule);
    else {
      const l = moduleLoader();
      if (typeof l.then === "function")
        pendingLoads.push(l.then((loadedModule2) => {
          if (cacheModules2 !== false)
            MODULE_CACHE$1.set(moduleLoader, loadedModule2);
          moduleSetter(loadedModule2);
        }));
      else if (l)
        moduleSetter(l);
    }
  }
};
const getMenuLoader$1 = (menus2, pathname) => {
  if (menus2) {
    const menu = menus2.find((m) => m[0] === pathname || pathname.startsWith(m[0] + (pathname.endsWith("/") ? "" : "/")));
    if (menu)
      return menu[1];
  }
  return void 0;
};
const getRouteParams$1 = (paramNames, match) => {
  const params = {};
  if (paramNames)
    for (let i = 0; i < paramNames.length; i++)
      params[paramNames[i]] = match ? match[i + 1] : "";
  return params;
};
const resolveHead = (endpoint, routeLocation, contentModules) => {
  const head2 = createDocumentHead();
  const headProps = {
    data: endpoint ? endpoint.body : null,
    head: head2,
    ...routeLocation
  };
  for (let i = contentModules.length - 1; i >= 0; i--) {
    const contentModuleHead = contentModules[i] && contentModules[i].head;
    if (contentModuleHead) {
      if (typeof contentModuleHead === "function")
        resolveDocumentHead(head2, contentModuleHead(headProps));
      else if (typeof contentModuleHead === "object")
        resolveDocumentHead(head2, contentModuleHead);
    }
  }
  return headProps.head;
};
const resolveDocumentHead = (resolvedHead, updatedHead) => {
  if (typeof updatedHead.title === "string")
    resolvedHead.title = updatedHead.title;
  mergeArray(resolvedHead.meta, updatedHead.meta);
  mergeArray(resolvedHead.links, updatedHead.links);
  mergeArray(resolvedHead.styles, updatedHead.styles);
};
const mergeArray = (existingArr, newArr) => {
  if (Array.isArray(newArr))
    for (const newItem of newArr) {
      if (typeof newItem.key === "string") {
        const existingIndex = existingArr.findIndex((i) => i.key === newItem.key);
        if (existingIndex > -1) {
          existingArr[existingIndex] = newItem;
          continue;
        }
      }
      existingArr.push(newItem);
    }
};
const createDocumentHead = () => ({
  title: "",
  meta: [],
  links: [],
  styles: []
});
const useDocumentHead = () => useContext(DocumentHeadContext);
const useLocation = () => useContext(RouteLocationContext);
const useNavigate = () => useContext(RouteNavigateContext);
const useQwikCityEnv = () => noSerialize(useEnvData("qwikcity"));
const toPath = (url) => url.pathname + url.search + url.hash;
const toUrl = (url, baseUrl) => new URL(url, baseUrl.href);
const isSameOrigin = (a, b) => a.origin === b.origin;
const isSamePath = (a, b) => a.pathname + a.search === b.pathname + b.search;
const isSamePathname = (a, b) => a.pathname === b.pathname;
const isSameOriginDifferentPathname = (a, b) => isSameOrigin(a, b) && !isSamePath(a, b);
const getClientEndpointPath = (pathname) => pathname + (pathname.endsWith("/") ? "" : "/") + "q-data.json";
const getClientNavPath = (props, baseUrl) => {
  const href = props.href;
  if (typeof href === "string" && href.trim() !== "" && typeof props.target !== "string")
    try {
      const linkUrl = toUrl(href, baseUrl);
      const currentUrl = toUrl("", baseUrl);
      if (isSameOrigin(linkUrl, currentUrl))
        return toPath(linkUrl);
    } catch (e) {
      console.error(e);
    }
  return null;
};
const getPrefetchUrl = (props, clientNavPath, currentLoc) => {
  if (props.prefetch && clientNavPath) {
    const prefetchUrl = toUrl(clientNavPath, currentLoc);
    if (!isSamePathname(prefetchUrl, toUrl("", currentLoc)))
      return prefetchUrl + "";
  }
  return null;
};
const clientNavigate = (win, routeNavigate) => {
  const currentUrl = win.location;
  const newUrl = toUrl(routeNavigate.path, currentUrl);
  if (isSameOriginDifferentPathname(currentUrl, newUrl)) {
    handleScroll(win, currentUrl, newUrl);
    win.history.pushState("", "", toPath(newUrl));
  }
  if (!win[CLIENT_HISTORY_INITIALIZED]) {
    win[CLIENT_HISTORY_INITIALIZED] = 1;
    win.addEventListener("popstate", () => {
      const currentUrl2 = win.location;
      const previousUrl = toUrl(routeNavigate.path, currentUrl2);
      if (isSameOriginDifferentPathname(currentUrl2, previousUrl)) {
        handleScroll(win, previousUrl, currentUrl2);
        routeNavigate.path = toPath(currentUrl2);
      }
    });
  }
};
const handleScroll = async (win, previousUrl, newUrl) => {
  const doc = win.document;
  const newHash = newUrl.hash;
  if (isSamePath(previousUrl, newUrl)) {
    if (previousUrl.hash !== newHash) {
      await domWait();
      if (newHash)
        scrollToHashId(doc, newHash);
      else
        win.scrollTo(0, 0);
    }
  } else {
    if (newHash)
      for (let i = 0; i < 24; i++) {
        await domWait();
        if (scrollToHashId(doc, newHash))
          break;
      }
    else {
      await domWait();
      win.scrollTo(0, 0);
    }
  }
};
const domWait = () => new Promise((resolve) => setTimeout(resolve, 12));
const scrollToHashId = (doc, hash) => {
  const elmId = hash.slice(1);
  const elm = doc.getElementById(elmId);
  if (elm)
    elm.scrollIntoView();
  return elm;
};
const dispatchPrefetchEvent = (prefetchData) => dispatchEvent(new CustomEvent("qprefetch", {
  detail: prefetchData
}));
const CLIENT_HISTORY_INITIALIZED = /* @__PURE__ */ Symbol();
const loadClientData = async (href) => {
  const { cacheModules: cacheModules2 } = await Promise.resolve().then(() => _qwikCityPlan);
  const pagePathname = new URL(href).pathname;
  const endpointUrl = getClientEndpointPath(pagePathname);
  const now = Date.now();
  const expiration = cacheModules2 ? 6e5 : 15e3;
  const cachedClientPageIndex = cachedClientPages.findIndex((c) => c.u === endpointUrl);
  let cachedClientPageData = cachedClientPages[cachedClientPageIndex];
  dispatchPrefetchEvent({
    links: [
      pagePathname
    ]
  });
  if (!cachedClientPageData || cachedClientPageData.t + expiration < now) {
    cachedClientPageData = {
      u: endpointUrl,
      t: now,
      c: new Promise((resolve) => {
        fetch(endpointUrl).then((clientResponse) => {
          const contentType = clientResponse.headers.get("content-type") || "";
          if (clientResponse.ok && contentType.includes("json"))
            clientResponse.json().then((clientData) => {
              dispatchPrefetchEvent({
                bundles: clientData.prefetch,
                links: [
                  pagePathname
                ]
              });
              resolve(clientData);
            }, () => resolve(null));
          else
            resolve(null);
        }, () => resolve(null));
      })
    };
    for (let i = cachedClientPages.length - 1; i >= 0; i--)
      if (cachedClientPages[i].t + expiration < now)
        cachedClientPages.splice(i, 1);
    cachedClientPages.push(cachedClientPageData);
  }
  cachedClientPageData.c.catch((e) => console.error(e));
  return cachedClientPageData.c;
};
const cachedClientPages = [];
const QwikCity = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const env = useQwikCityEnv();
  if (!(env == null ? void 0 : env.params))
    throw new Error(`Missing Qwik City Env Data`);
  const urlEnv = useEnvData("url");
  if (!urlEnv)
    throw new Error(`Missing Qwik URL Env Data`);
  const url = new URL(urlEnv);
  const routeLocation = useStore({
    href: url.href,
    pathname: url.pathname,
    query: Object.fromEntries(url.searchParams.entries()),
    params: env.params
  });
  const routeNavigate = useStore({
    path: toPath(url)
  });
  const documentHead = useStore(createDocumentHead);
  const content = useStore({
    headings: void 0,
    menu: void 0
  });
  const contentInternal = useStore({
    contents: void 0
  });
  useContextProvider(ContentContext, content);
  useContextProvider(ContentInternalContext, contentInternal);
  useContextProvider(DocumentHeadContext, documentHead);
  useContextProvider(RouteLocationContext, routeLocation);
  useContextProvider(RouteNavigateContext, routeNavigate);
  useWatchQrl(inlinedQrl(async ({ track }) => {
    const [content2, contentInternal2, documentHead2, env2, routeLocation2, routeNavigate2] = useLexicalScope();
    const { routes: routes2, menus: menus2, cacheModules: cacheModules2 } = await Promise.resolve().then(() => _qwikCityPlan);
    const path = track(routeNavigate2, "path");
    const url2 = new URL(path, routeLocation2.href);
    const pathname = url2.pathname;
    const loadRoutePromise = loadRoute$1(routes2, menus2, cacheModules2, pathname);
    const endpointResponse = isServer ? env2.response : loadClientData(url2.href);
    const loadedRoute = await loadRoutePromise;
    if (loadedRoute) {
      const [params, mods, menu] = loadedRoute;
      const contentModules = mods;
      const pageModule = contentModules[contentModules.length - 1];
      routeLocation2.href = url2.href;
      routeLocation2.pathname = pathname;
      routeLocation2.params = {
        ...params
      };
      routeLocation2.query = Object.fromEntries(url2.searchParams.entries());
      content2.headings = pageModule.headings;
      content2.menu = menu;
      contentInternal2.contents = noSerialize(contentModules);
      const clientPageData = await endpointResponse;
      const resolvedHead = resolveHead(clientPageData, routeLocation2, contentModules);
      documentHead2.links = resolvedHead.links;
      documentHead2.meta = resolvedHead.meta;
      documentHead2.styles = resolvedHead.styles;
      documentHead2.title = resolvedHead.title;
      if (isBrowser$1)
        clientNavigate(window, routeNavigate2);
    }
  }, "QwikCity_component_useWatch_AaAlzKH0KlQ", [
    content,
    contentInternal,
    documentHead,
    env,
    routeLocation,
    routeNavigate
  ]));
  return /* @__PURE__ */ jsx(Slot, {});
}, "QwikCity_component_z1nvHyEppoI"));
const Link = /* @__PURE__ */ componentQrl(inlinedQrl((props) => {
  const nav = useNavigate();
  const loc = useLocation();
  const originalHref = props.href;
  const linkProps = {
    ...props
  };
  const clientNavPath = getClientNavPath(linkProps, loc);
  const prefetchUrl = getPrefetchUrl(props, clientNavPath, loc);
  linkProps["preventdefault:click"] = !!clientNavPath;
  linkProps.href = clientNavPath || originalHref;
  return /* @__PURE__ */ jsx("a", {
    ...linkProps,
    onClick$: inlinedQrl(() => {
      const [clientNavPath2, linkProps2, nav2] = useLexicalScope();
      if (clientNavPath2)
        nav2.path = linkProps2.href;
    }, "Link_component_a_onClick_hA9UPaY8sNQ", [
      clientNavPath,
      linkProps,
      nav
    ]),
    "data-prefetch": prefetchUrl,
    onMouseOver$: inlinedQrl((_, elm) => prefetchLinkResources(elm), "Link_component_a_onMouseOver_skxgNVWVOT8"),
    onQVisible$: inlinedQrl((_, elm) => prefetchLinkResources(elm, true), "Link_component_a_onQVisible_uVE5iM9H73c"),
    children: /* @__PURE__ */ jsx(Slot, {})
  });
}, "Link_component_mYsiJcA4IBc"));
const prefetchLinkResources = (elm, isOnVisible) => {
  var _a2;
  const prefetchUrl = (_a2 = elm == null ? void 0 : elm.dataset) == null ? void 0 : _a2.prefetch;
  if (prefetchUrl) {
    if (!windowInnerWidth)
      windowInnerWidth = window.innerWidth;
    if (!isOnVisible || isOnVisible && windowInnerWidth < 520)
      loadClientData(prefetchUrl);
  }
};
let windowInnerWidth = 0;
const Menu$1 = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const loc = useLocation();
  return /* @__PURE__ */ jsx("div", {
    class: "menucont",
    children: /* @__PURE__ */ jsx("div", {
      class: "menumain md:mx-0 mx-1 ",
      children: [
        /* @__PURE__ */ jsx(Link, {
          id: "central",
          href: "/",
          class: mutable(`flex flex-row-reverse items-center content-center space-x-3 px-2 md:mx-2 mx-1 py-3 lg:py-[8px] ${loc.pathname === "/" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify lg:w-4 lg:h-4 w-5 h-5 lg:ml-auto lg:mx-0 mx-2 lg:mr-2 my-auto",
              "data-icon": "tabler:home"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden lg:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Home"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "search",
          href: "/search",
          class: mutable(`flex flex-row-reverse items-center content-center space-x-3 px-2 mx-1 md:mx-2  py-3 lg:py-[8px] ${loc.pathname === "/search" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify lg:w-4 lg:h-4 w-5 h-5 lg:ml-auto lg:mx-0 mx-2 lg:mr-2 my-auto",
              "data-icon": "tabler:search"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden lg:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Search"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "clips",
          href: "/clips",
          class: mutable(`flex flex-row-reverse items-center content-center space-x-3 px-2 mx-1 md:mx-2  py-3 lg:py-[8px] ${loc.pathname === "/clips" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify lg:w-4 lg:h-4 w-5 h-5 lg:ml-auto lg:mx-0 mx-2 lg:mr-2 my-auto",
              "data-icon": "tabler:video"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden lg:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Clips"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "favourites",
          href: "/favs",
          class: mutable(`flex flex-row-reverse items-center content-center space-x-3 px-2  mx-1 md:mx-2  py-3 lg:py-[8px] ${loc.pathname === "/favs" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify lg:w-4 lg:h-4 w-5 h-5 lg:ml-auto lg:mx-0 mx-2 lg:mr-2 my-auto",
              "data-icon": "ant-design:heart"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden lg:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Favourites"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "settings",
          href: "/settings",
          class: mutable(`flex  md:mt-auto ml-auto flex-row-reverse items-center content-center space-x-3 px-2  mx-1 mr-[6px] md:mx-2  py-3 lg:py-[8px] ${loc.pathname === "/settings" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify lg:w-4 lg:h-4 w-5 h-5 lg:ml-auto lg:mx-0 mx-2 lg:mr-2 my-auto",
              "data-icon": "ant-design:setting"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden lg:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Settings"
            })
          ]
        })
      ]
    })
  });
}, "s_uwWhp2E5O4I"));
const Sidebar = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "sidebarwrapper",
    children: [
      /* @__PURE__ */ jsx("div", {
        class: " sidebarprofile",
        children: /* @__PURE__ */ jsx("div", {
          class: "py-[10px] pt-0 flex flex-col items-center content-center ",
          children: [
            /* @__PURE__ */ jsx("div", {
              class: "flex flex-row w-full items-center content-center",
              children: [
                /* @__PURE__ */ jsx("span", {
                  class: "profiletext",
                  children: "Profile"
                }),
                /* @__PURE__ */ jsx("div", {
                  class: "logtext",
                  children: "Logout"
                })
              ]
            }),
            /* @__PURE__ */ jsx("div", {
              class: "flex flex-col mt-6",
              children: [
                /* @__PURE__ */ jsx("img", {
                  class: "w-20 h-20 rounded-full mx-auto",
                  src: "https://picsum.photos/200/300"
                }),
                /* @__PURE__ */ jsx("div", {
                  class: "font-inter font-semibold pt-5 text-md mx-auto text-neutral-300 my-auto",
                  children: "Admin Acct"
                }),
                /* @__PURE__ */ jsx("div", {
                  class: "font-inter font-medium pt-[1px] text-[12.75px] mx-auto text-neutral-500 my-auto",
                  children: "@admin"
                }),
                /* @__PURE__ */ jsx("div", {
                  class: "font-inter font-medium pt-[18.5px] text-sm mx-auto text-neutral-400 my-auto",
                  children: "I am the admin of this app"
                })
              ]
            })
          ]
        })
      }),
      /* @__PURE__ */ jsx("div", {
        class: "sidebardivs",
        children: [
          /* @__PURE__ */ jsx("span", {
            class: "quicktext",
            children: "Quick Actions"
          }),
          /* @__PURE__ */ jsx("div", {
            class: "quickcont",
            children: /* @__PURE__ */ jsx("div", {
              class: "flex flex-row space-x-4 mx-auto items-center content-center",
              children: [
                /* @__PURE__ */ jsx("button", {
                  class: "py-2 px-5 bg-white bg-opacity-[2%] rounded-md",
                  children: /* @__PURE__ */ jsx("span", {
                    class: "iconify text-neutral-300 w-4 h-4",
                    "data-icon": "ep:message"
                  })
                }),
                /* @__PURE__ */ jsx("button", {
                  class: "py-2 px-5 hidden lg:block bg-white bg-opacity-[2%] rounded-md",
                  children: /* @__PURE__ */ jsx("span", {
                    class: "iconify text-neutral-300 w-4 h-4",
                    "data-icon": "ep:edit"
                  })
                }),
                /* @__PURE__ */ jsx("button", {
                  class: "py-2 px-5 bg-white bg-opacity-[2%] rounded-md",
                  children: /* @__PURE__ */ jsx("span", {
                    class: "iconify text-neutral-300 w-4 h-4",
                    "data-icon": "ep:setting"
                  })
                }),
                /* @__PURE__ */ jsx("button", {
                  class: "py-2 px-5 bg-white bg-opacity-[2%] rounded-md",
                  children: /* @__PURE__ */ jsx("span", {
                    class: "iconify text-neutral-300 w-4 h-4",
                    "data-icon": "ep:user"
                  })
                })
              ]
            })
          })
        ]
      }),
      /* @__PURE__ */ jsx("div", {
        class: "sidebarmessage",
        children: [
          /* @__PURE__ */ jsx("div", {
            class: "msgcont",
            children: [
              /* @__PURE__ */ jsx("span", {
                class: "pl-[6px] mt-1 text-[15px] font-medium text-neutral-300 font-sf",
                children: "Messages"
              }),
              /* @__PURE__ */ jsx("span", {
                class: "iconify w-5 h-5 ml-auto mr-1 text-neutral-400 my-auto",
                "data-icon": "ep:edit"
              })
            ]
          }),
          /* @__PURE__ */ jsx("div", {
            class: "flex flex-col my-1 py-1 space-y-[22px] px-1",
            children: [
              /* @__PURE__ */ jsx("div", {
                class: "flex flex-row space-x-[10px]",
                children: [
                  /* @__PURE__ */ jsx("img", {
                    class: "w-10 border border-[rgba(0,0,0,0)] flex-shrink-0 h-10 mx-2 mr-1 rounded-md",
                    src: "https://picsum.photos/100/100"
                  }),
                  /* @__PURE__ */ jsx("div", {
                    class: "flex flex-col my-auto space-y-[2px] relative w-full",
                    children: [
                      /* @__PURE__ */ jsx("span", {
                        class: "text-[13px] font-semibold font-sf text-neutral-400",
                        children: " Bon Jovi "
                      }),
                      /* @__PURE__ */ jsx("span", {
                        class: "text-[11px] font-sf text-neutral-500 pl-[0px]",
                        children: " Active Yesterday "
                      })
                    ]
                  })
                ]
              }),
              /* @__PURE__ */ jsx("div", {
                class: "flex flex-row space-x-[10px]",
                children: [
                  /* @__PURE__ */ jsx("img", {
                    class: "w-10 border border-[rgba(0,0,0,0)] flex-shrink-0 h-10 mx-2 mr-1 rounded-md",
                    src: "https://picsum.photos/100/300"
                  }),
                  /* @__PURE__ */ jsx("div", {
                    class: "flex flex-col my-auto space-y-[2px] relative w-full",
                    children: [
                      /* @__PURE__ */ jsx("span", {
                        class: "text-[13px] font-semibold font-sf text-neutral-400",
                        children: " George Bush "
                      }),
                      /* @__PURE__ */ jsx("span", {
                        class: "text-[11px] font-sf text-neutral-500 pl-[0px]",
                        children: " Online "
                      })
                    ]
                  })
                ]
              }),
              /* @__PURE__ */ jsx("div", {
                class: "flex flex-row space-x-[10px]",
                children: [
                  /* @__PURE__ */ jsx("img", {
                    class: "w-10 flex-shrink-0 border border-[rgba(0,0,0,0)] h-10 mx-2 mr-1 rounded-md",
                    src: "https://picsum.photos/100/200"
                  }),
                  /* @__PURE__ */ jsx("div", {
                    class: "flex flex-col my-auto space-y-[2px] relative w-full",
                    children: [
                      /* @__PURE__ */ jsx("span", {
                        class: "text-[13px] font-semibold font-sf text-neutral-400",
                        children: " Alec Ben "
                      }),
                      /* @__PURE__ */ jsx("span", {
                        class: "text-[11px] font-sf text-neutral-500 pl-[0px]",
                        children: " Last Seen on Aug 19"
                      })
                    ]
                  })
                ]
              })
            ]
          })
        ]
      })
    ]
  });
}, "s_BtnGjf3PdHw"));
const layout = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "bgcol mb-6",
    children: [
      /* @__PURE__ */ jsx(Header, {}),
      /* @__PURE__ */ jsx("main", {
        class: "flex flex-row w-screen flex-grow overflow-hidden ",
        children: [
          /* @__PURE__ */ jsx(Menu$1, {}),
          /* @__PURE__ */ jsx(Slot, {}),
          /* @__PURE__ */ jsx(Sidebar, {})
        ]
      })
    ]
  });
}, "s_yM0L9NCDGUk"));
const Layout_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: layout
}, Symbol.toStringTag, { value: "Module" }));
function StoriesView(props) {
  return /* @__PURE__ */ jsx("div", {
    style: `background-image:
linear-gradient(to bottom, rgba(0, 0, 0, 0.4) 10%, rgba(0, 0, 0, .6) 40%, rgba(0, 0, 0, .8) 65%, rgba(0, 0, 0, 1) 100%),
url('${props.url}');

background-size: cover;

`,
    class: " flex flex-col flex-shrink-0 h-36 w-28 p-2 rounded-md",
    children: [
      /* @__PURE__ */ jsx("img", {
        class: "rounded-full w-8 h-8 m-1 flex-shrink-0 ",
        src: props.poster
      }),
      /* @__PURE__ */ jsx("span", {
        class: "text-neutral-300 text-xs ml-1 mb-1 font-inter font-semibold mt-auto text-left",
        children: props.name
      })
    ]
  });
}
const resolveFetch$3 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => Promise.resolve().then(() => index).then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
class FunctionsError extends Error {
  constructor(message, name2 = "FunctionsError", context) {
    super(message);
    this.name = name2;
    this.context = context;
  }
}
class FunctionsFetchError extends FunctionsError {
  constructor(context) {
    super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
  }
}
class FunctionsRelayError extends FunctionsError {
  constructor(context) {
    super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
  }
}
class FunctionsHttpError extends FunctionsError {
  constructor(context) {
    super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
  }
}
var __awaiter$8 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class FunctionsClient {
  constructor(url, { headers = {}, customFetch } = {}) {
    this.url = url;
    this.headers = headers;
    this.fetch = resolveFetch$3(customFetch);
  }
  setAuth(token) {
    this.headers.Authorization = `Bearer ${token}`;
  }
  invoke(functionName, options = {}) {
    var _a2;
    return __awaiter$8(this, void 0, void 0, function* () {
      try {
        const { headers, method, body: functionArgs } = options;
        let _headers = {};
        let body;
        if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
          if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
            _headers["Content-Type"] = "application/octet-stream";
            body = functionArgs;
          } else if (typeof functionArgs === "string") {
            _headers["Content-Type"] = "text/plain";
            body = functionArgs;
          } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
            body = functionArgs;
          } else {
            _headers["Content-Type"] = "application/json";
            body = JSON.stringify(functionArgs);
          }
        }
        const response2 = yield this.fetch(`${this.url}/${functionName}`, {
          method: method || "POST",
          headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
          body
        }).catch((fetchError) => {
          throw new FunctionsFetchError(fetchError);
        });
        const isRelayError = response2.headers.get("x-relay-error");
        if (isRelayError && isRelayError === "true") {
          throw new FunctionsRelayError(response2);
        }
        if (!response2.ok) {
          throw new FunctionsHttpError(response2);
        }
        let responseType = ((_a2 = response2.headers.get("Content-Type")) !== null && _a2 !== void 0 ? _a2 : "text/plain").split(";")[0].trim();
        let data2;
        if (responseType === "application/json") {
          data2 = yield response2.json();
        } else if (responseType === "application/octet-stream") {
          data2 = yield response2.blob();
        } else if (responseType === "multipart/form-data") {
          data2 = yield response2.formData();
        } else {
          data2 = yield response2.text();
        }
        return { data: data2, error: null };
      } catch (error) {
        return { data: null, error };
      }
    });
  }
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  var f = n.default;
  if (typeof f == "function") {
    var a = function() {
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var browserPonyfill$1 = { exports: {} };
(function(module, exports) {
  var global2 = typeof self !== "undefined" ? self : commonjsGlobal;
  var __self__ = function() {
    function F() {
      this.fetch = false;
      this.DOMException = global2.DOMException;
    }
    F.prototype = global2;
    return new F();
  }();
  (function(self2) {
    (function(exports2) {
      var support = {
        searchParams: "URLSearchParams" in self2,
        iterable: "Symbol" in self2 && "iterator" in Symbol,
        blob: "FileReader" in self2 && "Blob" in self2 && function() {
          try {
            new Blob();
            return true;
          } catch (e) {
            return false;
          }
        }(),
        formData: "FormData" in self2,
        arrayBuffer: "ArrayBuffer" in self2
      };
      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }
      if (support.arrayBuffer) {
        var viewClasses = [
          "[object Int8Array]",
          "[object Uint8Array]",
          "[object Uint8ClampedArray]",
          "[object Int16Array]",
          "[object Uint16Array]",
          "[object Int32Array]",
          "[object Uint32Array]",
          "[object Float32Array]",
          "[object Float64Array]"
        ];
        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
      }
      function normalizeName(name2) {
        if (typeof name2 !== "string") {
          name2 = String(name2);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name2)) {
          throw new TypeError("Invalid character in header field name");
        }
        return name2.toLowerCase();
      }
      function normalizeValue(value) {
        if (typeof value !== "string") {
          value = String(value);
        }
        return value;
      }
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value = items.shift();
            return { done: value === void 0, value };
          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator;
          };
        }
        return iterator;
      }
      function Headers2(headers) {
        this.map = {};
        if (headers instanceof Headers2) {
          headers.forEach(function(value, name2) {
            this.append(name2, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name2) {
            this.append(name2, headers[name2]);
          }, this);
        }
      }
      Headers2.prototype.append = function(name2, value) {
        name2 = normalizeName(name2);
        value = normalizeValue(value);
        var oldValue = this.map[name2];
        this.map[name2] = oldValue ? oldValue + ", " + value : value;
      };
      Headers2.prototype["delete"] = function(name2) {
        delete this.map[normalizeName(name2)];
      };
      Headers2.prototype.get = function(name2) {
        name2 = normalizeName(name2);
        return this.has(name2) ? this.map[name2] : null;
      };
      Headers2.prototype.has = function(name2) {
        return this.map.hasOwnProperty(normalizeName(name2));
      };
      Headers2.prototype.set = function(name2, value) {
        this.map[normalizeName(name2)] = normalizeValue(value);
      };
      Headers2.prototype.forEach = function(callback, thisArg) {
        for (var name2 in this.map) {
          if (this.map.hasOwnProperty(name2)) {
            callback.call(thisArg, this.map[name2], name2, this);
          }
        }
      };
      Headers2.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name2) {
          items.push(name2);
        });
        return iteratorFor(items);
      };
      Headers2.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
          items.push(value);
        });
        return iteratorFor(items);
      };
      Headers2.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name2) {
          items.push([name2, value]);
        });
        return iteratorFor(items);
      };
      if (support.iterable) {
        Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
      }
      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError("Already read"));
        }
        body.bodyUsed = true;
      }
      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        });
      }
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }
      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
        return promise;
      }
      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join("");
      }
      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }
      function Body2() {
        this.bodyUsed = false;
        this._initBody = function(body) {
          this._bodyInit = body;
          if (!body) {
            this._bodyText = "";
          } else if (typeof body === "string") {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get("content-type")) {
            if (typeof body === "string") {
              this.headers.set("content-type", "text/plain;charset=UTF-8");
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set("content-type", this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
          }
        };
        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as blob");
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
            } else {
              return this.blob().then(readBlobAsArrayBuffer);
            }
          };
        }
        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
            throw new Error("could not read FormData body as text");
          } else {
            return Promise.resolve(this._bodyText);
          }
        };
        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode);
          };
        }
        this.json = function() {
          return this.text().then(JSON.parse);
        };
        return this;
      }
      var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
      }
      function Request2(input, options) {
        options = options || {};
        var body = options.body;
        if (input instanceof Request2) {
          if (input.bodyUsed) {
            throw new TypeError("Already read");
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers2(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || "same-origin";
        if (options.headers || !this.headers) {
          this.headers = new Headers2(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || "GET");
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal;
        this.referrer = null;
        if ((this.method === "GET" || this.method === "HEAD") && body) {
          throw new TypeError("Body not allowed for GET or HEAD requests");
        }
        this._initBody(body);
      }
      Request2.prototype.clone = function() {
        return new Request2(this, { body: this._bodyInit });
      };
      function decode(body) {
        var form = new FormData();
        body.trim().split("&").forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split("=");
            var name2 = split.shift().replace(/\+/g, " ");
            var value = split.join("=").replace(/\+/g, " ");
            form.append(decodeURIComponent(name2), decodeURIComponent(value));
          }
        });
        return form;
      }
      function parseHeaders(rawHeaders) {
        var headers = new Headers2();
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
        preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
          var parts = line.split(":");
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(":").trim();
            headers.append(key, value);
          }
        });
        return headers;
      }
      Body2.call(Request2.prototype);
      function Response2(bodyInit, options) {
        if (!options) {
          options = {};
        }
        this.type = "default";
        this.status = options.status === void 0 ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = "statusText" in options ? options.statusText : "OK";
        this.headers = new Headers2(options.headers);
        this.url = options.url || "";
        this._initBody(bodyInit);
      }
      Body2.call(Response2.prototype);
      Response2.prototype.clone = function() {
        return new Response2(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers2(this.headers),
          url: this.url
        });
      };
      Response2.error = function() {
        var response2 = new Response2(null, { status: 0, statusText: "" });
        response2.type = "error";
        return response2;
      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response2.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError("Invalid status code");
        }
        return new Response2(null, { status, headers: { location: url } });
      };
      exports2.DOMException = self2.DOMException;
      try {
        new exports2.DOMException();
      } catch (err2) {
        exports2.DOMException = function(message, name2) {
          this.message = message;
          this.name = name2;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports2.DOMException.prototype = Object.create(Error.prototype);
        exports2.DOMException.prototype.constructor = exports2.DOMException;
      }
      function fetch2(input, init) {
        return new Promise(function(resolve, reject) {
          var request2 = new Request2(input, init);
          if (request2.signal && request2.signal.aborted) {
            return reject(new exports2.DOMException("Aborted", "AbortError"));
          }
          var xhr = new XMLHttpRequest();
          function abortXhr() {
            xhr.abort();
          }
          xhr.onload = function() {
            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || "")
            };
            options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
            var body = "response" in xhr ? xhr.response : xhr.responseText;
            resolve(new Response2(body, options));
          };
          xhr.onerror = function() {
            reject(new TypeError("Network request failed"));
          };
          xhr.ontimeout = function() {
            reject(new TypeError("Network request failed"));
          };
          xhr.onabort = function() {
            reject(new exports2.DOMException("Aborted", "AbortError"));
          };
          xhr.open(request2.method, request2.url, true);
          if (request2.credentials === "include") {
            xhr.withCredentials = true;
          } else if (request2.credentials === "omit") {
            xhr.withCredentials = false;
          }
          if ("responseType" in xhr && support.blob) {
            xhr.responseType = "blob";
          }
          request2.headers.forEach(function(value, name2) {
            xhr.setRequestHeader(name2, value);
          });
          if (request2.signal) {
            request2.signal.addEventListener("abort", abortXhr);
            xhr.onreadystatechange = function() {
              if (xhr.readyState === 4) {
                request2.signal.removeEventListener("abort", abortXhr);
              }
            };
          }
          xhr.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
        });
      }
      fetch2.polyfill = true;
      if (!self2.fetch) {
        self2.fetch = fetch2;
        self2.Headers = Headers2;
        self2.Request = Request2;
        self2.Response = Response2;
      }
      exports2.Headers = Headers2;
      exports2.Request = Request2;
      exports2.Response = Response2;
      exports2.fetch = fetch2;
      Object.defineProperty(exports2, "__esModule", { value: true });
      return exports2;
    })({});
  })(__self__);
  __self__.fetch.ponyfill = true;
  delete __self__.fetch.polyfill;
  var ctx = __self__;
  exports = ctx.fetch;
  exports.default = ctx.fetch;
  exports.fetch = ctx.fetch;
  exports.Headers = ctx.Headers;
  exports.Request = ctx.Request;
  exports.Response = ctx.Response;
  module.exports = exports;
})(browserPonyfill$1, browserPonyfill$1.exports);
const crossFetch = /* @__PURE__ */ getDefaultExportFromCjs(browserPonyfill$1.exports);
const browserPonyfill = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: crossFetch
}, [browserPonyfill$1.exports]);
class PostgrestBuilder {
  constructor(builder) {
    this.shouldThrowOnError = false;
    this.method = builder.method;
    this.url = builder.url;
    this.headers = builder.headers;
    this.schema = builder.schema;
    this.body = builder.body;
    this.shouldThrowOnError = builder.shouldThrowOnError;
    this.signal = builder.signal;
    this.isMaybeSingle = builder.isMaybeSingle;
    if (builder.fetch) {
      this.fetch = builder.fetch;
    } else if (typeof fetch === "undefined") {
      this.fetch = crossFetch;
    } else {
      this.fetch = fetch;
    }
  }
  throwOnError() {
    this.shouldThrowOnError = true;
    return this;
  }
  then(onfulfilled, onrejected) {
    if (this.schema === void 0)
      ;
    else if (["GET", "HEAD"].includes(this.method)) {
      this.headers["Accept-Profile"] = this.schema;
    } else {
      this.headers["Content-Profile"] = this.schema;
    }
    if (this.method !== "GET" && this.method !== "HEAD") {
      this.headers["Content-Type"] = "application/json";
    }
    const _fetch = this.fetch;
    let res = _fetch(this.url.toString(), {
      method: this.method,
      headers: this.headers,
      body: JSON.stringify(this.body),
      signal: this.signal
    }).then(async (res2) => {
      var _a2, _b, _c;
      let error = null;
      let data2 = null;
      let count = null;
      let status = res2.status;
      let statusText = res2.statusText;
      if (res2.ok) {
        if (this.method !== "HEAD") {
          const body = await res2.text();
          if (body === "")
            ;
          else if (this.headers["Accept"] === "text/csv") {
            data2 = body;
          } else if (this.headers["Accept"] && this.headers["Accept"].includes("application/vnd.pgrst.plan+text")) {
            data2 = body;
          } else {
            data2 = JSON.parse(body);
          }
        }
        const countHeader = (_a2 = this.headers["Prefer"]) === null || _a2 === void 0 ? void 0 : _a2.match(/count=(exact|planned|estimated)/);
        const contentRange = (_b = res2.headers.get("content-range")) === null || _b === void 0 ? void 0 : _b.split("/");
        if (countHeader && contentRange && contentRange.length > 1) {
          count = parseInt(contentRange[1]);
        }
        if (this.isMaybeSingle && this.method === "GET" && Array.isArray(data2)) {
          if (data2.length > 1) {
            error = {
              code: "PGRST116",
              details: `Results contain ${data2.length} rows, application/vnd.pgrst.object+json requires 1 row`,
              hint: null,
              message: "JSON object requested, multiple (or no) rows returned"
            };
            data2 = null;
            count = null;
            status = 406;
            statusText = "Not Acceptable";
          } else if (data2.length === 1) {
            data2 = data2[0];
          } else {
            data2 = null;
          }
        }
      } else {
        const body = await res2.text();
        try {
          error = JSON.parse(body);
          if (Array.isArray(error) && res2.status === 404) {
            data2 = [];
            error = null;
            status = 200;
            statusText = "OK";
          }
        } catch (_d) {
          if (res2.status === 404 && body === "") {
            status = 204;
            statusText = "No Content";
          } else {
            error = {
              message: body
            };
          }
        }
        if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes("Results contain 0 rows"))) {
          error = null;
          status = 200;
          statusText = "OK";
        }
        if (error && this.shouldThrowOnError) {
          throw error;
        }
      }
      const postgrestResponse = {
        error,
        data: data2,
        count,
        status,
        statusText
      };
      return postgrestResponse;
    });
    if (!this.shouldThrowOnError) {
      res = res.catch((fetchError) => {
        var _a2, _b, _c;
        return {
          error: {
            message: `${(_a2 = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a2 !== void 0 ? _a2 : "FetchError"}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
            details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ""}`,
            hint: "",
            code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ""}`
          },
          data: null,
          count: null,
          status: 0,
          statusText: ""
        };
      });
    }
    return res.then(onfulfilled, onrejected);
  }
}
class PostgrestTransformBuilder extends PostgrestBuilder {
  select(columns) {
    let quoted = false;
    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
      if (/\s/.test(c) && !quoted) {
        return "";
      }
      if (c === '"') {
        quoted = !quoted;
      }
      return c;
    }).join("");
    this.url.searchParams.set("select", cleanedColumns);
    if (this.headers["Prefer"]) {
      this.headers["Prefer"] += ",";
    }
    this.headers["Prefer"] += "return=representation";
    return this;
  }
  order(column, { ascending = true, nullsFirst, foreignTable } = {}) {
    const key = foreignTable ? `${foreignTable}.order` : "order";
    const existingOrder = this.url.searchParams.get(key);
    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
    return this;
  }
  limit(count, { foreignTable } = {}) {
    const key = typeof foreignTable === "undefined" ? "limit" : `${foreignTable}.limit`;
    this.url.searchParams.set(key, `${count}`);
    return this;
  }
  range(from, to, { foreignTable } = {}) {
    const keyOffset = typeof foreignTable === "undefined" ? "offset" : `${foreignTable}.offset`;
    const keyLimit = typeof foreignTable === "undefined" ? "limit" : `${foreignTable}.limit`;
    this.url.searchParams.set(keyOffset, `${from}`);
    this.url.searchParams.set(keyLimit, `${to - from + 1}`);
    return this;
  }
  abortSignal(signal) {
    this.signal = signal;
    return this;
  }
  single() {
    this.headers["Accept"] = "application/vnd.pgrst.object+json";
    return this;
  }
  maybeSingle() {
    if (this.method === "GET") {
      this.headers["Accept"] = "application/json";
    } else {
      this.headers["Accept"] = "application/vnd.pgrst.object+json";
    }
    this.isMaybeSingle = true;
    return this;
  }
  csv() {
    this.headers["Accept"] = "text/csv";
    return this;
  }
  geojson() {
    this.headers["Accept"] = "application/geo+json";
    return this;
  }
  explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = "text" } = {}) {
    const options = [
      analyze ? "analyze" : null,
      verbose ? "verbose" : null,
      settings ? "settings" : null,
      buffers ? "buffers" : null,
      wal ? "wal" : null
    ].filter(Boolean).join("|");
    const forMediatype = this.headers["Accept"];
    this.headers["Accept"] = `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`;
    if (format === "json")
      return this;
    else
      return this;
  }
  rollback() {
    var _a2;
    if (((_a2 = this.headers["Prefer"]) !== null && _a2 !== void 0 ? _a2 : "").trim().length > 0) {
      this.headers["Prefer"] += ",tx=rollback";
    } else {
      this.headers["Prefer"] = "tx=rollback";
    }
    return this;
  }
  returns() {
    return this;
  }
}
class PostgrestFilterBuilder extends PostgrestTransformBuilder {
  eq(column, value) {
    this.url.searchParams.append(column, `eq.${value}`);
    return this;
  }
  neq(column, value) {
    this.url.searchParams.append(column, `neq.${value}`);
    return this;
  }
  gt(column, value) {
    this.url.searchParams.append(column, `gt.${value}`);
    return this;
  }
  gte(column, value) {
    this.url.searchParams.append(column, `gte.${value}`);
    return this;
  }
  lt(column, value) {
    this.url.searchParams.append(column, `lt.${value}`);
    return this;
  }
  lte(column, value) {
    this.url.searchParams.append(column, `lte.${value}`);
    return this;
  }
  like(column, pattern) {
    this.url.searchParams.append(column, `like.${pattern}`);
    return this;
  }
  likeAllOf(column, patterns) {
    this.url.searchParams.append(column, `like(all).{${patterns.join(",")}}`);
    return this;
  }
  likeAnyOf(column, patterns) {
    this.url.searchParams.append(column, `like(any).{${patterns.join(",")}}`);
    return this;
  }
  ilike(column, pattern) {
    this.url.searchParams.append(column, `ilike.${pattern}`);
    return this;
  }
  ilikeAllOf(column, patterns) {
    this.url.searchParams.append(column, `ilike(all).{${patterns.join(",")}}`);
    return this;
  }
  ilikeAnyOf(column, patterns) {
    this.url.searchParams.append(column, `ilike(any).{${patterns.join(",")}}`);
    return this;
  }
  is(column, value) {
    this.url.searchParams.append(column, `is.${value}`);
    return this;
  }
  in(column, values) {
    const cleanedValues = values.map((s) => {
      if (typeof s === "string" && new RegExp("[,()]").test(s))
        return `"${s}"`;
      else
        return `${s}`;
    }).join(",");
    this.url.searchParams.append(column, `in.(${cleanedValues})`);
    return this;
  }
  contains(column, value) {
    if (typeof value === "string") {
      this.url.searchParams.append(column, `cs.${value}`);
    } else if (Array.isArray(value)) {
      this.url.searchParams.append(column, `cs.{${value.join(",")}}`);
    } else {
      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
    }
    return this;
  }
  containedBy(column, value) {
    if (typeof value === "string") {
      this.url.searchParams.append(column, `cd.${value}`);
    } else if (Array.isArray(value)) {
      this.url.searchParams.append(column, `cd.{${value.join(",")}}`);
    } else {
      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
    }
    return this;
  }
  rangeGt(column, range) {
    this.url.searchParams.append(column, `sr.${range}`);
    return this;
  }
  rangeGte(column, range) {
    this.url.searchParams.append(column, `nxl.${range}`);
    return this;
  }
  rangeLt(column, range) {
    this.url.searchParams.append(column, `sl.${range}`);
    return this;
  }
  rangeLte(column, range) {
    this.url.searchParams.append(column, `nxr.${range}`);
    return this;
  }
  rangeAdjacent(column, range) {
    this.url.searchParams.append(column, `adj.${range}`);
    return this;
  }
  overlaps(column, value) {
    if (typeof value === "string") {
      this.url.searchParams.append(column, `ov.${value}`);
    } else {
      this.url.searchParams.append(column, `ov.{${value.join(",")}}`);
    }
    return this;
  }
  textSearch(column, query, { config: config2, type } = {}) {
    let typePart = "";
    if (type === "plain") {
      typePart = "pl";
    } else if (type === "phrase") {
      typePart = "ph";
    } else if (type === "websearch") {
      typePart = "w";
    }
    const configPart = config2 === void 0 ? "" : `(${config2})`;
    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
    return this;
  }
  match(query) {
    Object.entries(query).forEach(([column, value]) => {
      this.url.searchParams.append(column, `eq.${value}`);
    });
    return this;
  }
  not(column, operator, value) {
    this.url.searchParams.append(column, `not.${operator}.${value}`);
    return this;
  }
  or(filters, { foreignTable } = {}) {
    const key = foreignTable ? `${foreignTable}.or` : "or";
    this.url.searchParams.append(key, `(${filters})`);
    return this;
  }
  filter(column, operator, value) {
    this.url.searchParams.append(column, `${operator}.${value}`);
    return this;
  }
}
class PostgrestQueryBuilder {
  constructor(url, { headers = {}, schema, fetch: fetch2 }) {
    this.url = url;
    this.headers = headers;
    this.schema = schema;
    this.fetch = fetch2;
  }
  select(columns, { head: head2 = false, count } = {}) {
    const method = head2 ? "HEAD" : "GET";
    let quoted = false;
    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
      if (/\s/.test(c) && !quoted) {
        return "";
      }
      if (c === '"') {
        quoted = !quoted;
      }
      return c;
    }).join("");
    this.url.searchParams.set("select", cleanedColumns);
    if (count) {
      this.headers["Prefer"] = `count=${count}`;
    }
    return new PostgrestFilterBuilder({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  insert(values, { count, defaultToNull = true } = {}) {
    const method = "POST";
    const prefersHeaders = [];
    if (this.headers["Prefer"]) {
      prefersHeaders.push(this.headers["Prefer"]);
    }
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    if (!defaultToNull) {
      prefersHeaders.push("missing=default");
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    if (Array.isArray(values)) {
      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
      if (columns.length > 0) {
        const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
        this.url.searchParams.set("columns", uniqueColumns.join(","));
      }
    }
    return new PostgrestFilterBuilder({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: values,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true } = {}) {
    const method = "POST";
    const prefersHeaders = [`resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`];
    if (onConflict !== void 0)
      this.url.searchParams.set("on_conflict", onConflict);
    if (this.headers["Prefer"]) {
      prefersHeaders.push(this.headers["Prefer"]);
    }
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    if (!defaultToNull) {
      prefersHeaders.push("missing=default");
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    if (Array.isArray(values)) {
      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
      if (columns.length > 0) {
        const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
        this.url.searchParams.set("columns", uniqueColumns.join(","));
      }
    }
    return new PostgrestFilterBuilder({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: values,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  update(values, { count } = {}) {
    const method = "PATCH";
    const prefersHeaders = [];
    if (this.headers["Prefer"]) {
      prefersHeaders.push(this.headers["Prefer"]);
    }
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    return new PostgrestFilterBuilder({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: values,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  delete({ count } = {}) {
    const method = "DELETE";
    const prefersHeaders = [];
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    if (this.headers["Prefer"]) {
      prefersHeaders.unshift(this.headers["Prefer"]);
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    return new PostgrestFilterBuilder({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
}
const version$6 = "1.8.3";
const DEFAULT_HEADERS$4 = { "X-Client-Info": `postgrest-js/${version$6}` };
class PostgrestClient {
  constructor(url, { headers = {}, schema, fetch: fetch2 } = {}) {
    this.url = url;
    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS$4), headers);
    this.schemaName = schema;
    this.fetch = fetch2;
  }
  from(relation) {
    const url = new URL(`${this.url}/${relation}`);
    return new PostgrestQueryBuilder(url, {
      headers: Object.assign({}, this.headers),
      schema: this.schemaName,
      fetch: this.fetch
    });
  }
  schema(schema) {
    return new PostgrestClient(this.url, {
      headers: this.headers,
      schema,
      fetch: this.fetch
    });
  }
  rpc(fn, args = {}, { head: head2 = false, count } = {}) {
    let method;
    const url = new URL(`${this.url}/rpc/${fn}`);
    let body;
    if (head2) {
      method = "HEAD";
      Object.entries(args).forEach(([name2, value]) => {
        url.searchParams.append(name2, `${value}`);
      });
    } else {
      method = "POST";
      body = args;
    }
    const headers = Object.assign({}, this.headers);
    if (count) {
      headers["Prefer"] = `count=${count}`;
    }
    return new PostgrestFilterBuilder({
      method,
      url,
      headers,
      schema: this.schemaName,
      body,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
}
var global$1;
var hasRequiredGlobal;
function requireGlobal() {
  if (hasRequiredGlobal)
    return global$1;
  hasRequiredGlobal = 1;
  var naiveFallback = function() {
    if (typeof self === "object" && self)
      return self;
    if (typeof window === "object" && window)
      return window;
    throw new Error("Unable to resolve global `this`");
  };
  global$1 = function() {
    if (this)
      return this;
    if (typeof globalThis === "object" && globalThis)
      return globalThis;
    try {
      Object.defineProperty(Object.prototype, "__global__", {
        get: function() {
          return this;
        },
        configurable: true
      });
    } catch (error) {
      return naiveFallback();
    }
    try {
      if (!__global__)
        return naiveFallback();
      return __global__;
    } finally {
      delete Object.prototype.__global__;
    }
  }();
  return global$1;
}
const name = "websocket";
const description = "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.";
const keywords = [
  "websocket",
  "websockets",
  "socket",
  "networking",
  "comet",
  "push",
  "RFC-6455",
  "realtime",
  "server",
  "client"
];
const author = "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)";
const contributors = [
  "I\xF1aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
];
const version$5 = "1.0.34";
const repository = {
  type: "git",
  url: "https://github.com/theturtle32/WebSocket-Node.git"
};
const homepage = "https://github.com/theturtle32/WebSocket-Node";
const engines = {
  node: ">=4.0.0"
};
const dependencies = {
  bufferutil: "^4.0.1",
  debug: "^2.2.0",
  "es5-ext": "^0.10.50",
  "typedarray-to-buffer": "^3.1.5",
  "utf-8-validate": "^5.0.2",
  yaeti: "^0.0.6"
};
const devDependencies = {
  "buffer-equal": "^1.0.0",
  gulp: "^4.0.2",
  "gulp-jshint": "^2.0.4",
  "jshint-stylish": "^2.2.1",
  jshint: "^2.0.0",
  tape: "^4.9.1"
};
const config = {
  verbose: false
};
const scripts = {
  test: "tape test/unit/*.js",
  gulp: "gulp"
};
const main = "index";
const directories = {
  lib: "./lib"
};
const browser$3 = "lib/browser.js";
const license = "Apache-2.0";
const require$$0 = {
  name,
  description,
  keywords,
  author,
  contributors,
  version: version$5,
  repository,
  homepage,
  engines,
  dependencies,
  devDependencies,
  config,
  scripts,
  main,
  directories,
  browser: browser$3,
  license
};
var version$4 = require$$0.version;
var _globalThis;
if (typeof globalThis === "object") {
  _globalThis = globalThis;
} else {
  try {
    _globalThis = requireGlobal();
  } catch (error) {
  } finally {
    if (!_globalThis && typeof window !== "undefined") {
      _globalThis = window;
    }
    if (!_globalThis) {
      throw new Error("Could not determine global this");
    }
  }
}
var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
var websocket_version = version$4;
function W3CWebSocket(uri, protocols) {
  var native_instance;
  if (protocols) {
    native_instance = new NativeWebSocket(uri, protocols);
  } else {
    native_instance = new NativeWebSocket(uri);
  }
  return native_instance;
}
if (NativeWebSocket) {
  ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(prop) {
    Object.defineProperty(W3CWebSocket, prop, {
      get: function() {
        return NativeWebSocket[prop];
      }
    });
  });
}
var browser$2 = {
  "w3cwebsocket": NativeWebSocket ? W3CWebSocket : null,
  "version": websocket_version
};
const version$3 = "2.7.4";
const DEFAULT_HEADERS$3 = { "X-Client-Info": `realtime-js/${version$3}` };
const VSN = "1.0.0";
const DEFAULT_TIMEOUT = 1e4;
const WS_CLOSE_NORMAL = 1e3;
var SOCKET_STATES;
(function(SOCKET_STATES2) {
  SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
  SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
  SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
  SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
})(SOCKET_STATES || (SOCKET_STATES = {}));
var CHANNEL_STATES;
(function(CHANNEL_STATES2) {
  CHANNEL_STATES2["closed"] = "closed";
  CHANNEL_STATES2["errored"] = "errored";
  CHANNEL_STATES2["joined"] = "joined";
  CHANNEL_STATES2["joining"] = "joining";
  CHANNEL_STATES2["leaving"] = "leaving";
})(CHANNEL_STATES || (CHANNEL_STATES = {}));
var CHANNEL_EVENTS;
(function(CHANNEL_EVENTS2) {
  CHANNEL_EVENTS2["close"] = "phx_close";
  CHANNEL_EVENTS2["error"] = "phx_error";
  CHANNEL_EVENTS2["join"] = "phx_join";
  CHANNEL_EVENTS2["reply"] = "phx_reply";
  CHANNEL_EVENTS2["leave"] = "phx_leave";
  CHANNEL_EVENTS2["access_token"] = "access_token";
})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
var TRANSPORTS;
(function(TRANSPORTS2) {
  TRANSPORTS2["websocket"] = "websocket";
})(TRANSPORTS || (TRANSPORTS = {}));
var CONNECTION_STATE;
(function(CONNECTION_STATE2) {
  CONNECTION_STATE2["Connecting"] = "connecting";
  CONNECTION_STATE2["Open"] = "open";
  CONNECTION_STATE2["Closing"] = "closing";
  CONNECTION_STATE2["Closed"] = "closed";
})(CONNECTION_STATE || (CONNECTION_STATE = {}));
class Timer {
  constructor(callback, timerCalc) {
    this.callback = callback;
    this.timerCalc = timerCalc;
    this.timer = void 0;
    this.tries = 0;
    this.callback = callback;
    this.timerCalc = timerCalc;
  }
  reset() {
    this.tries = 0;
    clearTimeout(this.timer);
  }
  scheduleTimeout() {
    clearTimeout(this.timer);
    this.timer = setTimeout(() => {
      this.tries = this.tries + 1;
      this.callback();
    }, this.timerCalc(this.tries + 1));
  }
}
class Serializer {
  constructor() {
    this.HEADER_LENGTH = 1;
  }
  decode(rawPayload, callback) {
    if (rawPayload.constructor === ArrayBuffer) {
      return callback(this._binaryDecode(rawPayload));
    }
    if (typeof rawPayload === "string") {
      return callback(JSON.parse(rawPayload));
    }
    return callback({});
  }
  _binaryDecode(buffer) {
    const view = new DataView(buffer);
    const decoder = new TextDecoder();
    return this._decodeBroadcast(buffer, view, decoder);
  }
  _decodeBroadcast(buffer, view, decoder) {
    const topicSize = view.getUint8(1);
    const eventSize = view.getUint8(2);
    let offset = this.HEADER_LENGTH + 2;
    const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
    offset = offset + topicSize;
    const event = decoder.decode(buffer.slice(offset, offset + eventSize));
    offset = offset + eventSize;
    const data2 = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
    return { ref: null, topic, event, payload: data2 };
  }
}
class Push {
  constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {
    this.channel = channel;
    this.event = event;
    this.payload = payload;
    this.timeout = timeout;
    this.sent = false;
    this.timeoutTimer = void 0;
    this.ref = "";
    this.receivedResp = null;
    this.recHooks = [];
    this.refEvent = null;
    this.rateLimited = false;
  }
  resend(timeout) {
    this.timeout = timeout;
    this._cancelRefEvent();
    this.ref = "";
    this.refEvent = null;
    this.receivedResp = null;
    this.sent = false;
    this.send();
  }
  send() {
    if (this._hasReceived("timeout")) {
      return;
    }
    this.startTimeout();
    this.sent = true;
    const status = this.channel.socket.push({
      topic: this.channel.topic,
      event: this.event,
      payload: this.payload,
      ref: this.ref,
      join_ref: this.channel._joinRef()
    });
    if (status === "rate limited") {
      this.rateLimited = true;
    }
  }
  updatePayload(payload) {
    this.payload = Object.assign(Object.assign({}, this.payload), payload);
  }
  receive(status, callback) {
    var _a2;
    if (this._hasReceived(status)) {
      callback((_a2 = this.receivedResp) === null || _a2 === void 0 ? void 0 : _a2.response);
    }
    this.recHooks.push({ status, callback });
    return this;
  }
  startTimeout() {
    if (this.timeoutTimer) {
      return;
    }
    this.ref = this.channel.socket._makeRef();
    this.refEvent = this.channel._replyEventName(this.ref);
    const callback = (payload) => {
      this._cancelRefEvent();
      this._cancelTimeout();
      this.receivedResp = payload;
      this._matchReceive(payload);
    };
    this.channel._on(this.refEvent, {}, callback);
    this.timeoutTimer = setTimeout(() => {
      this.trigger("timeout", {});
    }, this.timeout);
  }
  trigger(status, response2) {
    if (this.refEvent)
      this.channel._trigger(this.refEvent, { status, response: response2 });
  }
  destroy() {
    this._cancelRefEvent();
    this._cancelTimeout();
  }
  _cancelRefEvent() {
    if (!this.refEvent) {
      return;
    }
    this.channel._off(this.refEvent, {});
  }
  _cancelTimeout() {
    clearTimeout(this.timeoutTimer);
    this.timeoutTimer = void 0;
  }
  _matchReceive({ status, response: response2 }) {
    this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response2));
  }
  _hasReceived(status) {
    return this.receivedResp && this.receivedResp.status === status;
  }
}
var REALTIME_PRESENCE_LISTEN_EVENTS;
(function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
  REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
  REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
  REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
class RealtimePresence {
  constructor(channel, opts) {
    this.channel = channel;
    this.state = {};
    this.pendingDiffs = [];
    this.joinRef = null;
    this.caller = {
      onJoin: () => {
      },
      onLeave: () => {
      },
      onSync: () => {
      }
    };
    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {
      state: "presence_state",
      diff: "presence_diff"
    };
    this.channel._on(events.state, {}, (newState) => {
      const { onJoin, onLeave, onSync } = this.caller;
      this.joinRef = this.channel._joinRef();
      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
      this.pendingDiffs.forEach((diff) => {
        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
      });
      this.pendingDiffs = [];
      onSync();
    });
    this.channel._on(events.diff, {}, (diff) => {
      const { onJoin, onLeave, onSync } = this.caller;
      if (this.inPendingSyncState()) {
        this.pendingDiffs.push(diff);
      } else {
        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
        onSync();
      }
    });
    this.onJoin((key, currentPresences, newPresences) => {
      this.channel._trigger("presence", {
        event: "join",
        key,
        currentPresences,
        newPresences
      });
    });
    this.onLeave((key, currentPresences, leftPresences) => {
      this.channel._trigger("presence", {
        event: "leave",
        key,
        currentPresences,
        leftPresences
      });
    });
    this.onSync(() => {
      this.channel._trigger("presence", { event: "sync" });
    });
  }
  static syncState(currentState, newState, onJoin, onLeave) {
    const state2 = this.cloneDeep(currentState);
    const transformedState = this.transformState(newState);
    const joins = {};
    const leaves = {};
    this.map(state2, (key, presences) => {
      if (!transformedState[key]) {
        leaves[key] = presences;
      }
    });
    this.map(transformedState, (key, newPresences) => {
      const currentPresences = state2[key];
      if (currentPresences) {
        const newPresenceRefs = newPresences.map((m) => m.presence_ref);
        const curPresenceRefs = currentPresences.map((m) => m.presence_ref);
        const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);
        const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);
        if (joinedPresences.length > 0) {
          joins[key] = joinedPresences;
        }
        if (leftPresences.length > 0) {
          leaves[key] = leftPresences;
        }
      } else {
        joins[key] = newPresences;
      }
    });
    return this.syncDiff(state2, { joins, leaves }, onJoin, onLeave);
  }
  static syncDiff(state2, diff, onJoin, onLeave) {
    const { joins, leaves } = {
      joins: this.transformState(diff.joins),
      leaves: this.transformState(diff.leaves)
    };
    if (!onJoin) {
      onJoin = () => {
      };
    }
    if (!onLeave) {
      onLeave = () => {
      };
    }
    this.map(joins, (key, newPresences) => {
      var _a2;
      const currentPresences = (_a2 = state2[key]) !== null && _a2 !== void 0 ? _a2 : [];
      state2[key] = this.cloneDeep(newPresences);
      if (currentPresences.length > 0) {
        const joinedPresenceRefs = state2[key].map((m) => m.presence_ref);
        const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);
        state2[key].unshift(...curPresences);
      }
      onJoin(key, currentPresences, newPresences);
    });
    this.map(leaves, (key, leftPresences) => {
      let currentPresences = state2[key];
      if (!currentPresences)
        return;
      const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);
      currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);
      state2[key] = currentPresences;
      onLeave(key, currentPresences, leftPresences);
      if (currentPresences.length === 0)
        delete state2[key];
    });
    return state2;
  }
  static map(obj, func) {
    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));
  }
  static transformState(state2) {
    state2 = this.cloneDeep(state2);
    return Object.getOwnPropertyNames(state2).reduce((newState, key) => {
      const presences = state2[key];
      if ("metas" in presences) {
        newState[key] = presences.metas.map((presence) => {
          presence["presence_ref"] = presence["phx_ref"];
          delete presence["phx_ref"];
          delete presence["phx_ref_prev"];
          return presence;
        });
      } else {
        newState[key] = presences;
      }
      return newState;
    }, {});
  }
  static cloneDeep(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  onJoin(callback) {
    this.caller.onJoin = callback;
  }
  onLeave(callback) {
    this.caller.onLeave = callback;
  }
  onSync(callback) {
    this.caller.onSync = callback;
  }
  inPendingSyncState() {
    return !this.joinRef || this.joinRef !== this.channel._joinRef();
  }
}
var PostgresTypes;
(function(PostgresTypes2) {
  PostgresTypes2["abstime"] = "abstime";
  PostgresTypes2["bool"] = "bool";
  PostgresTypes2["date"] = "date";
  PostgresTypes2["daterange"] = "daterange";
  PostgresTypes2["float4"] = "float4";
  PostgresTypes2["float8"] = "float8";
  PostgresTypes2["int2"] = "int2";
  PostgresTypes2["int4"] = "int4";
  PostgresTypes2["int4range"] = "int4range";
  PostgresTypes2["int8"] = "int8";
  PostgresTypes2["int8range"] = "int8range";
  PostgresTypes2["json"] = "json";
  PostgresTypes2["jsonb"] = "jsonb";
  PostgresTypes2["money"] = "money";
  PostgresTypes2["numeric"] = "numeric";
  PostgresTypes2["oid"] = "oid";
  PostgresTypes2["reltime"] = "reltime";
  PostgresTypes2["text"] = "text";
  PostgresTypes2["time"] = "time";
  PostgresTypes2["timestamp"] = "timestamp";
  PostgresTypes2["timestamptz"] = "timestamptz";
  PostgresTypes2["timetz"] = "timetz";
  PostgresTypes2["tsrange"] = "tsrange";
  PostgresTypes2["tstzrange"] = "tstzrange";
})(PostgresTypes || (PostgresTypes = {}));
const convertChangeData = (columns, record, options = {}) => {
  var _a2;
  const skipTypes = (_a2 = options.skipTypes) !== null && _a2 !== void 0 ? _a2 : [];
  return Object.keys(record).reduce((acc, rec_key) => {
    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
    return acc;
  }, {});
};
const convertColumn = (columnName, columns, record, skipTypes) => {
  const column = columns.find((x) => x.name === columnName);
  const colType = column === null || column === void 0 ? void 0 : column.type;
  const value = record[columnName];
  if (colType && !skipTypes.includes(colType)) {
    return convertCell(colType, value);
  }
  return noop$3(value);
};
const convertCell = (type, value) => {
  if (type.charAt(0) === "_") {
    const dataType = type.slice(1, type.length);
    return toArray(value, dataType);
  }
  switch (type) {
    case PostgresTypes.bool:
      return toBoolean(value);
    case PostgresTypes.float4:
    case PostgresTypes.float8:
    case PostgresTypes.int2:
    case PostgresTypes.int4:
    case PostgresTypes.int8:
    case PostgresTypes.numeric:
    case PostgresTypes.oid:
      return toNumber(value);
    case PostgresTypes.json:
    case PostgresTypes.jsonb:
      return toJson(value);
    case PostgresTypes.timestamp:
      return toTimestampString(value);
    case PostgresTypes.abstime:
    case PostgresTypes.date:
    case PostgresTypes.daterange:
    case PostgresTypes.int4range:
    case PostgresTypes.int8range:
    case PostgresTypes.money:
    case PostgresTypes.reltime:
    case PostgresTypes.text:
    case PostgresTypes.time:
    case PostgresTypes.timestamptz:
    case PostgresTypes.timetz:
    case PostgresTypes.tsrange:
    case PostgresTypes.tstzrange:
      return noop$3(value);
    default:
      return noop$3(value);
  }
};
const noop$3 = (value) => {
  return value;
};
const toBoolean = (value) => {
  switch (value) {
    case "t":
      return true;
    case "f":
      return false;
    default:
      return value;
  }
};
const toNumber = (value) => {
  if (typeof value === "string") {
    const parsedValue = parseFloat(value);
    if (!Number.isNaN(parsedValue)) {
      return parsedValue;
    }
  }
  return value;
};
const toJson = (value) => {
  if (typeof value === "string") {
    try {
      return JSON.parse(value);
    } catch (error) {
      console.log(`JSON parse error: ${error}`);
      return value;
    }
  }
  return value;
};
const toArray = (value, type) => {
  if (typeof value !== "string") {
    return value;
  }
  const lastIdx = value.length - 1;
  const closeBrace = value[lastIdx];
  const openBrace = value[0];
  if (openBrace === "{" && closeBrace === "}") {
    let arr;
    const valTrim = value.slice(1, lastIdx);
    try {
      arr = JSON.parse("[" + valTrim + "]");
    } catch (_) {
      arr = valTrim ? valTrim.split(",") : [];
    }
    return arr.map((val) => convertCell(type, val));
  }
  return value;
};
const toTimestampString = (value) => {
  if (typeof value === "string") {
    return value.replace(" ", "T");
  }
  return value;
};
var __awaiter$7 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
(function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
var REALTIME_LISTEN_TYPES;
(function(REALTIME_LISTEN_TYPES2) {
  REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
  REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
  REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
var REALTIME_SUBSCRIBE_STATES;
(function(REALTIME_SUBSCRIBE_STATES2) {
  REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
  REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
  REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
  REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
class RealtimeChannel {
  constructor(topic, params = { config: {} }, socket) {
    this.topic = topic;
    this.params = params;
    this.socket = socket;
    this.bindings = {};
    this.state = CHANNEL_STATES.closed;
    this.joinedOnce = false;
    this.pushBuffer = [];
    this.params.config = Object.assign({
      broadcast: { ack: false, self: false },
      presence: { key: "" }
    }, params.config);
    this.timeout = this.socket.timeout;
    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
    this.joinPush.receive("ok", () => {
      this.state = CHANNEL_STATES.joined;
      this.rejoinTimer.reset();
      this.pushBuffer.forEach((pushEvent) => pushEvent.send());
      this.pushBuffer = [];
    });
    this._onClose(() => {
      this.rejoinTimer.reset();
      this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
      this.state = CHANNEL_STATES.closed;
      this.socket._remove(this);
    });
    this._onError((reason) => {
      if (this._isLeaving() || this._isClosed()) {
        return;
      }
      this.socket.log("channel", `error ${this.topic}`, reason);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this.joinPush.receive("timeout", () => {
      if (!this._isJoining()) {
        return;
      }
      this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
      this._trigger(this._replyEventName(ref), payload);
    });
    this.presence = new RealtimePresence(this);
  }
  subscribe(callback, timeout = this.timeout) {
    var _a2, _b;
    if (this.joinedOnce) {
      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;
    } else {
      const { config: { broadcast, presence } } = this.params;
      this._onError((e) => callback && callback("CHANNEL_ERROR", e));
      this._onClose(() => callback && callback("CLOSED"));
      const accessTokenPayload = {};
      const config2 = {
        broadcast,
        presence,
        postgres_changes: (_b = (_a2 = this.bindings.postgres_changes) === null || _a2 === void 0 ? void 0 : _a2.map((r) => r.filter)) !== null && _b !== void 0 ? _b : []
      };
      if (this.socket.accessToken) {
        accessTokenPayload.access_token = this.socket.accessToken;
      }
      this.updateJoinPayload(Object.assign({ config: config2 }, accessTokenPayload));
      this.joinedOnce = true;
      this._rejoin(timeout);
      this.joinPush.receive("ok", ({ postgres_changes: serverPostgresFilters }) => {
        var _a3;
        this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);
        if (serverPostgresFilters === void 0) {
          callback && callback("SUBSCRIBED");
          return;
        } else {
          const clientPostgresBindings = this.bindings.postgres_changes;
          const bindingsLen = (_a3 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a3 !== void 0 ? _a3 : 0;
          const newPostgresBindings = [];
          for (let i = 0; i < bindingsLen; i++) {
            const clientPostgresBinding = clientPostgresBindings[i];
            const { filter: { event, schema, table, filter } } = clientPostgresBinding;
            const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];
            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {
              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
            } else {
              this.unsubscribe();
              callback && callback("CHANNEL_ERROR", new Error("mismatch between server and client bindings for postgres changes"));
              return;
            }
          }
          this.bindings.postgres_changes = newPostgresBindings;
          callback && callback("SUBSCRIBED");
          return;
        }
      }).receive("error", (error) => {
        callback && callback("CHANNEL_ERROR", new Error(JSON.stringify(Object.values(error).join(", ") || "error")));
        return;
      }).receive("timeout", () => {
        callback && callback("TIMED_OUT");
        return;
      });
    }
    return this;
  }
  presenceState() {
    return this.presence.state;
  }
  track(payload, opts = {}) {
    return __awaiter$7(this, void 0, void 0, function* () {
      return yield this.send({
        type: "presence",
        event: "track",
        payload
      }, opts.timeout || this.timeout);
    });
  }
  untrack(opts = {}) {
    return __awaiter$7(this, void 0, void 0, function* () {
      return yield this.send({
        type: "presence",
        event: "untrack"
      }, opts);
    });
  }
  on(type, filter, callback) {
    return this._on(type, filter, callback);
  }
  send(payload, opts = {}) {
    return new Promise((resolve) => {
      var _a2, _b, _c;
      const push = this._push(payload.type, payload, opts.timeout || this.timeout);
      if (push.rateLimited) {
        resolve("rate limited");
      }
      if (payload.type === "broadcast" && !((_c = (_b = (_a2 = this.params) === null || _a2 === void 0 ? void 0 : _a2.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {
        resolve("ok");
      }
      push.receive("ok", () => resolve("ok"));
      push.receive("timeout", () => resolve("timed out"));
    });
  }
  updateJoinPayload(payload) {
    this.joinPush.updatePayload(payload);
  }
  unsubscribe(timeout = this.timeout) {
    this.state = CHANNEL_STATES.leaving;
    const onClose = () => {
      this.socket.log("channel", `leave ${this.topic}`);
      this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
    };
    this.rejoinTimer.reset();
    this.joinPush.destroy();
    return new Promise((resolve) => {
      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);
      leavePush.receive("ok", () => {
        onClose();
        resolve("ok");
      }).receive("timeout", () => {
        onClose();
        resolve("timed out");
      }).receive("error", () => {
        resolve("error");
      });
      leavePush.send();
      if (!this._canPush()) {
        leavePush.trigger("ok", {});
      }
    });
  }
  _push(event, payload, timeout = this.timeout) {
    if (!this.joinedOnce) {
      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
    }
    let pushEvent = new Push(this, event, payload, timeout);
    if (this._canPush()) {
      pushEvent.send();
    } else {
      pushEvent.startTimeout();
      this.pushBuffer.push(pushEvent);
    }
    return pushEvent;
  }
  _onMessage(_event, payload, _ref) {
    return payload;
  }
  _isMember(topic) {
    return this.topic === topic;
  }
  _joinRef() {
    return this.joinPush.ref;
  }
  _trigger(type, payload, ref) {
    var _a2, _b;
    const typeLower = type.toLocaleLowerCase();
    const { close, error, leave, join } = CHANNEL_EVENTS;
    const events = [close, error, leave, join];
    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
      return;
    }
    let handledPayload = this._onMessage(typeLower, payload, ref);
    if (payload && !handledPayload) {
      throw "channel onMessage callbacks must return the payload, modified or unmodified";
    }
    if (["insert", "update", "delete"].includes(typeLower)) {
      (_a2 = this.bindings.postgres_changes) === null || _a2 === void 0 ? void 0 : _a2.filter((bind) => {
        var _a3, _b2, _c;
        return ((_a3 = bind.filter) === null || _a3 === void 0 ? void 0 : _a3.event) === "*" || ((_c = (_b2 = bind.filter) === null || _b2 === void 0 ? void 0 : _b2.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;
      }).map((bind) => bind.callback(handledPayload, ref));
    } else {
      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {
        var _a3, _b2, _c, _d, _e, _f;
        if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
          if ("id" in bind) {
            const bindId = bind.id;
            const bindEvent = (_a3 = bind.filter) === null || _a3 === void 0 ? void 0 : _a3.event;
            return bindId && ((_b2 = payload.ids) === null || _b2 === void 0 ? void 0 : _b2.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));
          } else {
            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();
            return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
          }
        } else {
          return bind.type.toLocaleLowerCase() === typeLower;
        }
      }).map((bind) => {
        if (typeof handledPayload === "object" && "ids" in handledPayload) {
          const postgresChanges = handledPayload.data;
          const { schema, table, commit_timestamp, type: type2, errors } = postgresChanges;
          const enrichedPayload = {
            schema,
            table,
            commit_timestamp,
            eventType: type2,
            new: {},
            old: {},
            errors
          };
          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
        }
        bind.callback(handledPayload, ref);
      });
    }
  }
  _isClosed() {
    return this.state === CHANNEL_STATES.closed;
  }
  _isJoined() {
    return this.state === CHANNEL_STATES.joined;
  }
  _isJoining() {
    return this.state === CHANNEL_STATES.joining;
  }
  _isLeaving() {
    return this.state === CHANNEL_STATES.leaving;
  }
  _replyEventName(ref) {
    return `chan_reply_${ref}`;
  }
  _on(type, filter, callback) {
    const typeLower = type.toLocaleLowerCase();
    const binding2 = {
      type: typeLower,
      filter,
      callback
    };
    if (this.bindings[typeLower]) {
      this.bindings[typeLower].push(binding2);
    } else {
      this.bindings[typeLower] = [binding2];
    }
    return this;
  }
  _off(type, filter) {
    const typeLower = type.toLocaleLowerCase();
    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
      var _a2;
      return !(((_a2 = bind.type) === null || _a2 === void 0 ? void 0 : _a2.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));
    });
    return this;
  }
  static isEqual(obj1, obj2) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length) {
      return false;
    }
    for (const k in obj1) {
      if (obj1[k] !== obj2[k]) {
        return false;
      }
    }
    return true;
  }
  _rejoinUntilConnected() {
    this.rejoinTimer.scheduleTimeout();
    if (this.socket.isConnected()) {
      this._rejoin();
    }
  }
  _onClose(callback) {
    this._on(CHANNEL_EVENTS.close, {}, callback);
  }
  _onError(callback) {
    this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));
  }
  _canPush() {
    return this.socket.isConnected() && this._isJoined();
  }
  _rejoin(timeout = this.timeout) {
    if (this._isLeaving()) {
      return;
    }
    this.socket._leaveOpenTopic(this.topic);
    this.state = CHANNEL_STATES.joining;
    this.joinPush.resend(timeout);
  }
  _getPayloadRecords(payload) {
    const records = {
      new: {},
      old: {}
    };
    if (payload.type === "INSERT" || payload.type === "UPDATE") {
      records.new = convertChangeData(payload.columns, payload.record);
    }
    if (payload.type === "UPDATE" || payload.type === "DELETE") {
      records.old = convertChangeData(payload.columns, payload.old_record);
    }
    return records;
  }
}
var __awaiter$6 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const noop$2 = () => {
};
class RealtimeClient {
  constructor(endPoint, options) {
    var _a2, _b;
    this.accessToken = null;
    this.channels = [];
    this.endPoint = "";
    this.headers = DEFAULT_HEADERS$3;
    this.params = {};
    this.timeout = DEFAULT_TIMEOUT;
    this.transport = browser$2.w3cwebsocket;
    this.heartbeatIntervalMs = 3e4;
    this.heartbeatTimer = void 0;
    this.pendingHeartbeatRef = null;
    this.ref = 0;
    this.logger = noop$2;
    this.conn = null;
    this.sendBuffer = [];
    this.serializer = new Serializer();
    this.stateChangeCallbacks = {
      open: [],
      close: [],
      error: [],
      message: []
    };
    this.eventsPerSecondLimitMs = 100;
    this.inThrottle = false;
    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
    if (options === null || options === void 0 ? void 0 : options.params)
      this.params = options.params;
    if (options === null || options === void 0 ? void 0 : options.headers)
      this.headers = Object.assign(Object.assign({}, this.headers), options.headers);
    if (options === null || options === void 0 ? void 0 : options.timeout)
      this.timeout = options.timeout;
    if (options === null || options === void 0 ? void 0 : options.logger)
      this.logger = options.logger;
    if (options === null || options === void 0 ? void 0 : options.transport)
      this.transport = options.transport;
    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)
      this.heartbeatIntervalMs = options.heartbeatIntervalMs;
    const eventsPerSecond = (_a2 = options === null || options === void 0 ? void 0 : options.params) === null || _a2 === void 0 ? void 0 : _a2.eventsPerSecond;
    if (eventsPerSecond)
      this.eventsPerSecondLimitMs = Math.floor(1e3 / eventsPerSecond);
    const accessToken = (_b = options === null || options === void 0 ? void 0 : options.params) === null || _b === void 0 ? void 0 : _b.apikey;
    if (accessToken)
      this.accessToken = accessToken;
    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : (tries) => {
      return [1e3, 2e3, 5e3, 1e4][tries - 1] || 1e4;
    };
    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {
      return callback(JSON.stringify(payload));
    };
    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);
    this.reconnectTimer = new Timer(() => __awaiter$6(this, void 0, void 0, function* () {
      this.disconnect();
      this.connect();
    }), this.reconnectAfterMs);
  }
  connect() {
    if (this.conn) {
      return;
    }
    this.conn = new this.transport(this._endPointURL(), [], null, this.headers);
    if (this.conn) {
      this.conn.binaryType = "arraybuffer";
      this.conn.onopen = () => this._onConnOpen();
      this.conn.onerror = (error) => this._onConnError(error);
      this.conn.onmessage = (event) => this._onConnMessage(event);
      this.conn.onclose = (event) => this._onConnClose(event);
    }
  }
  disconnect(code, reason) {
    if (this.conn) {
      this.conn.onclose = function() {
      };
      if (code) {
        this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
      } else {
        this.conn.close();
      }
      this.conn = null;
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.reconnectTimer.reset();
    }
  }
  getChannels() {
    return this.channels;
  }
  removeChannel(channel) {
    return __awaiter$6(this, void 0, void 0, function* () {
      const status = yield channel.unsubscribe();
      if (this.channels.length === 0) {
        this.disconnect();
      }
      return status;
    });
  }
  removeAllChannels() {
    return __awaiter$6(this, void 0, void 0, function* () {
      const values_1 = yield Promise.all(this.channels.map((channel) => channel.unsubscribe()));
      this.disconnect();
      return values_1;
    });
  }
  log(kind, msg2, data2) {
    this.logger(kind, msg2, data2);
  }
  connectionState() {
    switch (this.conn && this.conn.readyState) {
      case SOCKET_STATES.connecting:
        return CONNECTION_STATE.Connecting;
      case SOCKET_STATES.open:
        return CONNECTION_STATE.Open;
      case SOCKET_STATES.closing:
        return CONNECTION_STATE.Closing;
      default:
        return CONNECTION_STATE.Closed;
    }
  }
  isConnected() {
    return this.connectionState() === CONNECTION_STATE.Open;
  }
  channel(topic, params = { config: {} }) {
    if (!this.isConnected()) {
      this.connect();
    }
    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
    this.channels.push(chan);
    return chan;
  }
  push(data2) {
    const { topic, event, payload, ref } = data2;
    let callback = () => {
      this.encode(data2, (result) => {
        var _a2;
        (_a2 = this.conn) === null || _a2 === void 0 ? void 0 : _a2.send(result);
      });
    };
    this.log("push", `${topic} ${event} (${ref})`, payload);
    if (this.isConnected()) {
      if (["broadcast", "presence", "postgres_changes"].includes(event)) {
        const isThrottled = this._throttle(callback)();
        if (isThrottled) {
          return "rate limited";
        }
      } else {
        callback();
      }
    } else {
      this.sendBuffer.push(callback);
    }
  }
  setAuth(token) {
    this.accessToken = token;
    this.channels.forEach((channel) => {
      token && channel.updateJoinPayload({ access_token: token });
      if (channel.joinedOnce && channel._isJoined()) {
        channel._push(CHANNEL_EVENTS.access_token, { access_token: token });
      }
    });
  }
  _makeRef() {
    let newRef = this.ref + 1;
    if (newRef === this.ref) {
      this.ref = 0;
    } else {
      this.ref = newRef;
    }
    return this.ref.toString();
  }
  _leaveOpenTopic(topic) {
    let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));
    if (dupChannel) {
      this.log("transport", `leaving duplicate topic "${topic}"`);
      dupChannel.unsubscribe();
    }
  }
  _remove(channel) {
    this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());
  }
  _endPointURL() {
    return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
  }
  _onConnMessage(rawMessage) {
    this.decode(rawMessage.data, (msg2) => {
      let { topic, event, payload, ref } = msg2;
      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {
        this.pendingHeartbeatRef = null;
      }
      this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
      this.channels.filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
      this.stateChangeCallbacks.message.forEach((callback) => callback(msg2));
    });
  }
  _onConnOpen() {
    this.log("transport", `connected to ${this._endPointURL()}`);
    this._flushSendBuffer();
    this.reconnectTimer.reset();
    this.heartbeatTimer && clearInterval(this.heartbeatTimer);
    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);
    this.stateChangeCallbacks.open.forEach((callback) => callback());
  }
  _onConnClose(event) {
    this.log("transport", "close", event);
    this._triggerChanError();
    this.heartbeatTimer && clearInterval(this.heartbeatTimer);
    this.reconnectTimer.scheduleTimeout();
    this.stateChangeCallbacks.close.forEach((callback) => callback(event));
  }
  _onConnError(error) {
    this.log("transport", error.message);
    this._triggerChanError();
    this.stateChangeCallbacks.error.forEach((callback) => callback(error));
  }
  _triggerChanError() {
    this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
  }
  _appendParams(url, params) {
    if (Object.keys(params).length === 0) {
      return url;
    }
    const prefix = url.match(/\?/) ? "&" : "?";
    const query = new URLSearchParams(params);
    return `${url}${prefix}${query}`;
  }
  _flushSendBuffer() {
    if (this.isConnected() && this.sendBuffer.length > 0) {
      this.sendBuffer.forEach((callback) => callback());
      this.sendBuffer = [];
    }
  }
  _sendHeartbeat() {
    var _a2;
    if (!this.isConnected()) {
      return;
    }
    if (this.pendingHeartbeatRef) {
      this.pendingHeartbeatRef = null;
      this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
      (_a2 = this.conn) === null || _a2 === void 0 ? void 0 : _a2.close(WS_CLOSE_NORMAL, "hearbeat timeout");
      return;
    }
    this.pendingHeartbeatRef = this._makeRef();
    this.push({
      topic: "phoenix",
      event: "heartbeat",
      payload: {},
      ref: this.pendingHeartbeatRef
    });
    this.setAuth(this.accessToken);
  }
  _throttle(callback, eventsPerSecondLimitMs = this.eventsPerSecondLimitMs) {
    return () => {
      if (this.inThrottle)
        return true;
      callback();
      if (eventsPerSecondLimitMs > 0) {
        this.inThrottle = true;
        setTimeout(() => {
          this.inThrottle = false;
        }, eventsPerSecondLimitMs);
      }
      return false;
    };
  }
}
class StorageError extends Error {
  constructor(message) {
    super(message);
    this.__isStorageError = true;
    this.name = "StorageError";
  }
}
function isStorageError(error) {
  return typeof error === "object" && error !== null && "__isStorageError" in error;
}
class StorageApiError extends StorageError {
  constructor(message, status) {
    super(message);
    this.name = "StorageApiError";
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
}
class StorageUnknownError extends StorageError {
  constructor(message, originalError) {
    super(message);
    this.name = "StorageUnknownError";
    this.originalError = originalError;
  }
}
var __awaiter$5 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const resolveFetch$2 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => Promise.resolve().then(() => index).then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
const resolveResponse = () => __awaiter$5(void 0, void 0, void 0, function* () {
  if (typeof Response === "undefined") {
    return (yield Promise.resolve().then(() => index)).Response;
  }
  return Response;
});
var __awaiter$4 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const _getErrorMessage$1 = (err2) => err2.msg || err2.message || err2.error_description || err2.error || JSON.stringify(err2);
const handleError$1 = (error, reject) => __awaiter$4(void 0, void 0, void 0, function* () {
  const Res = yield resolveResponse();
  if (error instanceof Res) {
    error.json().then((err2) => {
      reject(new StorageApiError(_getErrorMessage$1(err2), error.status || 500));
    }).catch((err2) => {
      reject(new StorageUnknownError(_getErrorMessage$1(err2), err2));
    });
  } else {
    reject(new StorageUnknownError(_getErrorMessage$1(error), error));
  }
});
const _getRequestParams$1 = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers);
  params.body = JSON.stringify(body);
  return Object.assign(Object.assign({}, params), parameters);
};
function _handleRequest$1(fetcher, method, url, options, parameters, body) {
  return __awaiter$4(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      fetcher(url, _getRequestParams$1(method, options, parameters, body)).then((result) => {
        if (!result.ok)
          throw result;
        if (options === null || options === void 0 ? void 0 : options.noResolveJson)
          return result;
        return result.json();
      }).then((data2) => resolve(data2)).catch((error) => handleError$1(error, reject));
    });
  });
}
function get(fetcher, url, options, parameters) {
  return __awaiter$4(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "GET", url, options, parameters);
  });
}
function post(fetcher, url, body, options, parameters) {
  return __awaiter$4(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "POST", url, options, parameters, body);
  });
}
function put(fetcher, url, body, options, parameters) {
  return __awaiter$4(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "PUT", url, options, parameters, body);
  });
}
function remove(fetcher, url, body, options, parameters) {
  return __awaiter$4(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "DELETE", url, options, parameters, body);
  });
}
var __awaiter$3 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const DEFAULT_SEARCH_OPTIONS = {
  limit: 100,
  offset: 0,
  sortBy: {
    column: "name",
    order: "asc"
  }
};
const DEFAULT_FILE_OPTIONS = {
  cacheControl: "3600",
  contentType: "text/plain;charset=UTF-8",
  upsert: false
};
class StorageFileApi {
  constructor(url, headers = {}, bucketId, fetch2) {
    this.url = url;
    this.headers = headers;
    this.bucketId = bucketId;
    this.fetch = resolveFetch$2(fetch2);
  }
  uploadOrUpdate(method, path, fileBody, fileOptions) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        let body;
        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
        const headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options.upsert) });
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
        }
        const cleanPath = this._removeEmptyFolders(path);
        const _path = this._getFinalPath(cleanPath);
        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body, headers }, (options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {}));
        if (res.ok) {
          return {
            data: { path: cleanPath },
            error: null
          };
        } else {
          const error = yield res.json();
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  upload(path, fileBody, fileOptions) {
    return __awaiter$3(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("POST", path, fileBody, fileOptions);
    });
  }
  uploadToSignedUrl(path, token, fileBody, fileOptions) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const cleanPath = this._removeEmptyFolders(path);
      const _path = this._getFinalPath(cleanPath);
      const url = new URL(this.url + `/object/upload/sign/${_path}`);
      url.searchParams.set("token", token);
      try {
        let body;
        const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);
        const headers = Object.assign(Object.assign({}, this.headers), { "x-upsert": String(options.upsert) });
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
        }
        const res = yield this.fetch(url.toString(), {
          method: "PUT",
          body,
          headers
        });
        if (res.ok) {
          return {
            data: { path: cleanPath },
            error: null
          };
        } else {
          const error = yield res.json();
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  createSignedUploadUrl(path) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        const data2 = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers: this.headers });
        const url = new URL(this.url + data2.url);
        const token = url.searchParams.get("token");
        if (!token) {
          throw new StorageError("No token returned by API");
        }
        return { data: { signedUrl: url.toString(), path, token }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  update(path, fileBody, fileOptions) {
    return __awaiter$3(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("PUT", path, fileBody, fileOptions);
    });
  }
  move(fromPath, toPath2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data2 = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath2 }, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  copy(fromPath, toPath2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data2 = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath2 }, { headers: this.headers });
        return { data: { path: data2.Key }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  createSignedUrl(path, expiresIn, options) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        let data2 = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {}), { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        const signedUrl = encodeURI(`${this.url}${data2.signedURL}${downloadQueryParam}`);
        data2 = { signedUrl };
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  createSignedUrls(paths, expiresIn, options) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data2 = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        return {
          data: data2.map((datum) => Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null })),
          error: null
        };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  download(path, options) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      const queryString = transformationQuery ? `?${transformationQuery}` : "";
      try {
        const _path = this._getFinalPath(path);
        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
          headers: this.headers,
          noResolveJson: true
        });
        const data2 = yield res.blob();
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  getPublicUrl(path, options) {
    const _path = this._getFinalPath(path);
    const _queryString = [];
    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? "" : options.download}` : "";
    if (downloadQueryParam !== "") {
      _queryString.push(downloadQueryParam);
    }
    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
    const renderPath = wantsTransformation ? "render/image" : "object";
    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
    if (transformationQuery !== "") {
      _queryString.push(transformationQuery);
    }
    let queryString = _queryString.join("&");
    if (queryString !== "") {
      queryString = `?${queryString}`;
    }
    return {
      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
    };
  }
  remove(paths) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data2 = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  list(path, options, parameters) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || "" });
        const data2 = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  _getFinalPath(path) {
    return `${this.bucketId}/${path}`;
  }
  _removeEmptyFolders(path) {
    return path.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
  }
  transformOptsToQueryString(transform) {
    const params = [];
    if (transform.width) {
      params.push(`width=${transform.width}`);
    }
    if (transform.height) {
      params.push(`height=${transform.height}`);
    }
    if (transform.resize) {
      params.push(`resize=${transform.resize}`);
    }
    if (transform.format) {
      params.push(`format=${transform.format}`);
    }
    if (transform.quality) {
      params.push(`quality=${transform.quality}`);
    }
    return params.join("&");
  }
}
const version$2 = "2.5.2";
const DEFAULT_HEADERS$2 = { "X-Client-Info": `storage-js/${version$2}` };
var __awaiter$2 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class StorageBucketApi {
  constructor(url, headers = {}, fetch2) {
    this.url = url;
    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS$2), headers);
    this.fetch = resolveFetch$2(fetch2);
  }
  listBuckets() {
    return __awaiter$2(this, void 0, void 0, function* () {
      try {
        const data2 = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  getBucket(id) {
    return __awaiter$2(this, void 0, void 0, function* () {
      try {
        const data2 = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  createBucket(id, options = {
    public: false
  }) {
    return __awaiter$2(this, void 0, void 0, function* () {
      try {
        const data2 = yield post(this.fetch, `${this.url}/bucket`, {
          id,
          name: id,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  updateBucket(id, options) {
    return __awaiter$2(this, void 0, void 0, function* () {
      try {
        const data2 = yield put(this.fetch, `${this.url}/bucket/${id}`, {
          id,
          name: id,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  emptyBucket(id) {
    return __awaiter$2(this, void 0, void 0, function* () {
      try {
        const data2 = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  deleteBucket(id) {
    return __awaiter$2(this, void 0, void 0, function* () {
      try {
        const data2 = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });
        return { data: data2, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
}
class StorageClient extends StorageBucketApi {
  constructor(url, headers = {}, fetch2) {
    super(url, headers, fetch2);
  }
  from(id) {
    return new StorageFileApi(this.url, this.headers, id, this.fetch);
  }
}
const version$1 = "2.33.1";
const DEFAULT_HEADERS$1 = { "X-Client-Info": `supabase-js/${version$1}` };
var __awaiter$1 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const resolveFetch$1 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = crossFetch;
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
const resolveHeadersConstructor = () => {
  if (typeof Headers === "undefined") {
    return browserPonyfill$1.exports.Headers;
  }
  return Headers;
};
const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {
  const fetch2 = resolveFetch$1(customFetch);
  const HeadersConstructor = resolveHeadersConstructor();
  return (input, init) => __awaiter$1(void 0, void 0, void 0, function* () {
    var _a2;
    const accessToken = (_a2 = yield getAccessToken()) !== null && _a2 !== void 0 ? _a2 : supabaseKey;
    let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
    if (!headers.has("apikey")) {
      headers.set("apikey", supabaseKey);
    }
    if (!headers.has("Authorization")) {
      headers.set("Authorization", `Bearer ${accessToken}`);
    }
    return fetch2(input, Object.assign(Object.assign({}, init), { headers }));
  });
};
function stripTrailingSlash(url) {
  return url.replace(/\/$/, "");
}
function applySettingDefaults(options, defaults) {
  const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options;
  const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults;
  return {
    db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
    auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
    realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
    global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions)
  };
}
function expiresAt(expiresIn) {
  const timeNow = Math.round(Date.now() / 1e3);
  return timeNow + expiresIn;
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
const isBrowser = () => typeof document !== "undefined";
const localStorageWriteTests = {
  tested: false,
  writable: false
};
const supportsLocalStorage = () => {
  if (!isBrowser()) {
    return false;
  }
  try {
    if (typeof globalThis.localStorage !== "object") {
      return false;
    }
  } catch (e) {
    return false;
  }
  if (localStorageWriteTests.tested) {
    return localStorageWriteTests.writable;
  }
  const randomKey = `lswt-${Math.random()}${Math.random()}`;
  try {
    globalThis.localStorage.setItem(randomKey, randomKey);
    globalThis.localStorage.removeItem(randomKey);
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = true;
  } catch (e) {
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = false;
  }
  return localStorageWriteTests.writable;
};
function parseParametersFromURL(href) {
  const result = {};
  const url = new URL(href);
  if (url.hash && url.hash[0] === "#") {
    try {
      const hashSearchParams = new URLSearchParams(url.hash.substring(1));
      hashSearchParams.forEach((value, key) => {
        result[key] = value;
      });
    } catch (e) {
    }
  }
  url.searchParams.forEach((value, key) => {
    result[key] = value;
  });
  return result;
}
const resolveFetch = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = async (...args) => await (await Promise.resolve().then(() => browserPonyfill)).fetch(...args);
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
const looksLikeFetchResponse = (maybeResponse) => {
  return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
};
const setItemAsync = async (storage, key, data2) => {
  await storage.setItem(key, JSON.stringify(data2));
};
const getItemAsync = async (storage, key) => {
  const value = await storage.getItem(key);
  if (!value) {
    return null;
  }
  try {
    return JSON.parse(value);
  } catch (_a2) {
    return value;
  }
};
const removeItemAsync = async (storage, key) => {
  await storage.removeItem(key);
};
function decodeBase64URL(value) {
  const key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  let base64 = "";
  let chr1, chr2, chr3;
  let enc1, enc2, enc3, enc4;
  let i = 0;
  value = value.replace("-", "+").replace("_", "/");
  while (i < value.length) {
    enc1 = key.indexOf(value.charAt(i++));
    enc2 = key.indexOf(value.charAt(i++));
    enc3 = key.indexOf(value.charAt(i++));
    enc4 = key.indexOf(value.charAt(i++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    base64 = base64 + String.fromCharCode(chr1);
    if (enc3 != 64 && chr2 != 0) {
      base64 = base64 + String.fromCharCode(chr2);
    }
    if (enc4 != 64 && chr3 != 0) {
      base64 = base64 + String.fromCharCode(chr3);
    }
  }
  return base64;
}
class Deferred {
  constructor() {
    this.promise = new Deferred.promiseConstructor((res, rej) => {
      this.resolve = res;
      this.reject = rej;
    });
  }
}
Deferred.promiseConstructor = Promise;
function decodeJWTPayload(token) {
  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i;
  const parts = token.split(".");
  if (parts.length !== 3) {
    throw new Error("JWT is not valid: not a JWT structure");
  }
  if (!base64UrlRegex.test(parts[1])) {
    throw new Error("JWT is not valid: payload is not in base64url format");
  }
  const base64Url = parts[1];
  return JSON.parse(decodeBase64URL(base64Url));
}
async function sleep(time) {
  return await new Promise((accept) => {
    setTimeout(() => accept(null), time);
  });
}
function retryable(fn, isRetryable) {
  const promise = new Promise((accept, reject) => {
    (async () => {
      for (let attempt = 0; attempt < Infinity; attempt++) {
        try {
          const result = await fn(attempt);
          if (!isRetryable(attempt, null, result)) {
            accept(result);
            return;
          }
        } catch (e) {
          if (!isRetryable(attempt, e)) {
            reject(e);
            return;
          }
        }
      }
    })();
  });
  return promise;
}
function dec2hex(dec) {
  return ("0" + dec.toString(16)).substr(-2);
}
function generatePKCEVerifier() {
  const verifierLength = 56;
  const array = new Uint32Array(verifierLength);
  if (typeof crypto === "undefined") {
    const charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
    const charSetLen = charSet.length;
    let verifier = "";
    for (let i = 0; i < verifierLength; i++) {
      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));
    }
    return verifier;
  }
  crypto.getRandomValues(array);
  return Array.from(array, dec2hex).join("");
}
async function sha256(randomString) {
  const encoder = new TextEncoder();
  const encodedData = encoder.encode(randomString);
  const hash = await crypto.subtle.digest("SHA-256", encodedData);
  const bytes = new Uint8Array(hash);
  return Array.from(bytes).map((c) => String.fromCharCode(c)).join("");
}
function base64urlencode(str) {
  return btoa(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
async function generatePKCEChallenge(verifier) {
  if (typeof crypto === "undefined") {
    console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.");
    return verifier;
  }
  const hashed = await sha256(verifier);
  return base64urlencode(hashed);
}
class AuthError extends Error {
  constructor(message, status) {
    super(message);
    this.__isAuthError = true;
    this.name = "AuthError";
    this.status = status;
  }
}
function isAuthError(error) {
  return typeof error === "object" && error !== null && "__isAuthError" in error;
}
class AuthApiError extends AuthError {
  constructor(message, status) {
    super(message, status);
    this.name = "AuthApiError";
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
}
function isAuthApiError(error) {
  return isAuthError(error) && error.name === "AuthApiError";
}
class AuthUnknownError extends AuthError {
  constructor(message, originalError) {
    super(message);
    this.name = "AuthUnknownError";
    this.originalError = originalError;
  }
}
class CustomAuthError extends AuthError {
  constructor(message, name2, status) {
    super(message);
    this.name = name2;
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
}
class AuthSessionMissingError extends CustomAuthError {
  constructor() {
    super("Auth session missing!", "AuthSessionMissingError", 400);
  }
}
class AuthInvalidTokenResponseError extends CustomAuthError {
  constructor() {
    super("Auth session or user missing", "AuthInvalidTokenResponseError", 500);
  }
}
class AuthInvalidCredentialsError extends CustomAuthError {
  constructor(message) {
    super(message, "AuthInvalidCredentialsError", 400);
  }
}
class AuthImplicitGrantRedirectError extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthImplicitGrantRedirectError", 500);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
}
class AuthPKCEGrantCodeExchangeError extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthPKCEGrantCodeExchangeError", 500);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
}
class AuthRetryableFetchError extends CustomAuthError {
  constructor(message, status) {
    super(message, "AuthRetryableFetchError", status);
  }
}
function isAuthRetryableFetchError(error) {
  return isAuthError(error) && error.name === "AuthRetryableFetchError";
}
var __rest$1 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const _getErrorMessage = (err2) => err2.msg || err2.message || err2.error_description || err2.error || JSON.stringify(err2);
const NETWORK_ERROR_CODES = [502, 503, 504];
async function handleError(error) {
  if (!looksLikeFetchResponse(error)) {
    throw new AuthRetryableFetchError(_getErrorMessage(error), 0);
  }
  if (NETWORK_ERROR_CODES.includes(error.status)) {
    throw new AuthRetryableFetchError(_getErrorMessage(error), error.status);
  }
  let data2;
  try {
    data2 = await error.json();
  } catch (e) {
    throw new AuthUnknownError(_getErrorMessage(e), e);
  }
  throw new AuthApiError(_getErrorMessage(data2), error.status || 500);
}
const _getRequestParams = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options === null || options === void 0 ? void 0 : options.headers);
  params.body = JSON.stringify(body);
  return Object.assign(Object.assign({}, params), parameters);
};
async function _request(fetcher, method, url, options) {
  var _a2;
  const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
  if (options === null || options === void 0 ? void 0 : options.jwt) {
    headers["Authorization"] = `Bearer ${options.jwt}`;
  }
  const qs = (_a2 = options === null || options === void 0 ? void 0 : options.query) !== null && _a2 !== void 0 ? _a2 : {};
  if (options === null || options === void 0 ? void 0 : options.redirectTo) {
    qs["redirect_to"] = options.redirectTo;
  }
  const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
  const data2 = await _handleRequest(fetcher, method, url + queryString, { headers, noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson }, {}, options === null || options === void 0 ? void 0 : options.body);
  return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data2) : { data: Object.assign({}, data2), error: null };
}
async function _handleRequest(fetcher, method, url, options, parameters, body) {
  const requestParams = _getRequestParams(method, options, parameters, body);
  let result;
  try {
    result = await fetcher(url, requestParams);
  } catch (e) {
    console.error(e);
    throw new AuthRetryableFetchError(_getErrorMessage(e), 0);
  }
  if (!result.ok) {
    await handleError(result);
  }
  if (options === null || options === void 0 ? void 0 : options.noResolveJson) {
    return result;
  }
  try {
    return await result.json();
  } catch (e) {
    await handleError(e);
  }
}
function _sessionResponse(data2) {
  var _a2;
  let session = null;
  if (hasSession(data2)) {
    session = Object.assign({}, data2);
    session.expires_at = expiresAt(data2.expires_in);
  }
  const user = (_a2 = data2.user) !== null && _a2 !== void 0 ? _a2 : data2;
  return { data: { session, user }, error: null };
}
function _userResponse(data2) {
  var _a2;
  const user = (_a2 = data2.user) !== null && _a2 !== void 0 ? _a2 : data2;
  return { data: { user }, error: null };
}
function _ssoResponse(data2) {
  return { data: data2, error: null };
}
function _generateLinkResponse(data2) {
  const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data2, rest = __rest$1(data2, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
  const properties = {
    action_link,
    email_otp,
    hashed_token,
    redirect_to,
    verification_type
  };
  const user = Object.assign({}, rest);
  return {
    data: {
      properties,
      user
    },
    error: null
  };
}
function _noResolveJsonResponse(data2) {
  return data2;
}
function hasSession(data2) {
  return data2.access_token && data2.refresh_token && data2.expires_in;
}
var __rest = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
class GoTrueAdminApi {
  constructor({ url = "", headers = {}, fetch: fetch2 }) {
    this.url = url;
    this.headers = headers;
    this.fetch = resolveFetch(fetch2);
    this.mfa = {
      listFactors: this._listFactors.bind(this),
      deleteFactor: this._deleteFactor.bind(this)
    };
  }
  async signOut(jwt, scope = "global") {
    try {
      await _request(this.fetch, "POST", `${this.url}/logout?scope=${scope}`, {
        headers: this.headers,
        jwt,
        noResolveJson: true
      });
      return { data: null, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async inviteUserByEmail(email, options = {}) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/invite`, {
        body: { email, data: options.data },
        headers: this.headers,
        redirectTo: options.redirectTo,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async generateLink(params) {
    try {
      const { options } = params, rest = __rest(params, ["options"]);
      const body = Object.assign(Object.assign({}, rest), options);
      if ("newEmail" in rest) {
        body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
        delete body["newEmail"];
      }
      return await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
        body,
        headers: this.headers,
        xform: _generateLinkResponse,
        redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return {
          data: {
            properties: null,
            user: null
          },
          error
        };
      }
      throw error;
    }
  }
  async createUser(attributes) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async listUsers(params) {
    var _a2, _b, _c, _d, _e, _f, _g;
    try {
      const pagination = { nextPage: null, lastPage: 0, total: 0 };
      const response2 = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
        headers: this.headers,
        noResolveJson: true,
        query: {
          page: (_b = (_a2 = params === null || params === void 0 ? void 0 : params.page) === null || _a2 === void 0 ? void 0 : _a2.toString()) !== null && _b !== void 0 ? _b : "",
          per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
        },
        xform: _noResolveJsonResponse
      });
      if (response2.error)
        throw response2.error;
      const users = await response2.json();
      const total = (_e = response2.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
      const links = (_g = (_f = response2.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
      if (links.length > 0) {
        links.forEach((link) => {
          const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
          const rel = JSON.parse(link.split(";")[1].split("=")[1]);
          pagination[`${rel}Page`] = page;
        });
        pagination.total = parseInt(total);
      }
      return { data: Object.assign(Object.assign({}, users), pagination), error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { users: [] }, error };
      }
      throw error;
    }
  }
  async getUserById(uid) {
    try {
      return await _request(this.fetch, "GET", `${this.url}/admin/users/${uid}`, {
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async updateUserById(uid, attributes) {
    try {
      return await _request(this.fetch, "PUT", `${this.url}/admin/users/${uid}`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async deleteUser(id, shouldSoftDelete = false) {
    try {
      return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${id}`, {
        headers: this.headers,
        body: {
          should_soft_delete: shouldSoftDelete
        },
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async _listFactors(params) {
    try {
      const { data: data2, error } = await _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
        headers: this.headers,
        xform: (factors) => {
          return { data: { factors }, error: null };
        }
      });
      return { data: data2, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _deleteFactor(params) {
    try {
      const data2 = await _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
        headers: this.headers
      });
      return { data: data2, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
}
const version = "2.48.1";
const GOTRUE_URL = "http://localhost:9999";
const STORAGE_KEY = "supabase.auth.token";
const DEFAULT_HEADERS = { "X-Client-Info": `gotrue-js/${version}` };
const EXPIRY_MARGIN = 10;
const localStorageAdapter = {
  getItem: (key) => {
    if (!supportsLocalStorage()) {
      return null;
    }
    return globalThis.localStorage.getItem(key);
  },
  setItem: (key, value) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.setItem(key, value);
  },
  removeItem: (key) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.removeItem(key);
  }
};
function polyfillGlobalThis() {
  if (typeof globalThis === "object")
    return;
  try {
    Object.defineProperty(Object.prototype, "__magic__", {
      get: function() {
        return this;
      },
      configurable: true
    });
    __magic__.globalThis = __magic__;
    delete Object.prototype.__magic__;
  } catch (e) {
    if (typeof self !== "undefined") {
      self.globalThis = self;
    }
  }
}
polyfillGlobalThis();
const DEFAULT_OPTIONS = {
  url: GOTRUE_URL,
  storageKey: STORAGE_KEY,
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  headers: DEFAULT_HEADERS,
  flowType: "implicit",
  debug: false
};
const AUTO_REFRESH_TICK_DURATION = 30 * 1e3;
const AUTO_REFRESH_TICK_THRESHOLD = 3;
async function lockNoOp(name2, acquireTimeout, fn) {
  return await fn();
}
class GoTrueClient {
  constructor(options) {
    var _a2;
    this.stateChangeEmitters = /* @__PURE__ */ new Map();
    this.autoRefreshTicker = null;
    this.visibilityChangedCallback = null;
    this.refreshingDeferred = null;
    this.initializePromise = null;
    this.detectSessionInUrl = true;
    this.lockAcquired = false;
    this.pendingInLock = [];
    this.broadcastChannel = null;
    this.instanceID = GoTrueClient.nextInstanceID;
    GoTrueClient.nextInstanceID += 1;
    if (this.instanceID > 0 && isBrowser()) {
      console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
    }
    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
    this.logDebugMessages = settings.debug;
    this.inMemorySession = null;
    this.storageKey = settings.storageKey;
    this.autoRefreshToken = settings.autoRefreshToken;
    this.persistSession = settings.persistSession;
    this.storage = settings.storage || localStorageAdapter;
    this.admin = new GoTrueAdminApi({
      url: settings.url,
      headers: settings.headers,
      fetch: settings.fetch
    });
    this.url = settings.url;
    this.headers = settings.headers;
    this.fetch = resolveFetch(settings.fetch);
    this.lock = settings.lock || lockNoOp;
    this.detectSessionInUrl = settings.detectSessionInUrl;
    this.flowType = settings.flowType;
    this.mfa = {
      verify: this._verify.bind(this),
      enroll: this._enroll.bind(this),
      unenroll: this._unenroll.bind(this),
      challenge: this._challenge.bind(this),
      listFactors: this._listFactors.bind(this),
      challengeAndVerify: this._challengeAndVerify.bind(this),
      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
    };
    if (this.persistSession && this.storage === localStorageAdapter && !supportsLocalStorage()) {
      console.warn(`No storage option exists to persist the session, which may result in unexpected behavior when using auth.
        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.`);
    }
    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
      try {
        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
      } catch (e) {
        console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", e);
      }
      (_a2 = this.broadcastChannel) === null || _a2 === void 0 ? void 0 : _a2.addEventListener("message", async (event) => {
        this._debug("received broadcast notification from other tab or client", event);
        await this._notifyAllSubscribers(event.data.event, event.data.session, false);
      });
    }
    this.initialize();
  }
  _debug(...args) {
    if (this.logDebugMessages) {
      console.log(`GoTrueClient@${this.instanceID} (${version}) ${new Date().toISOString()}`, ...args);
    }
    return this;
  }
  async initialize() {
    if (this.initializePromise) {
      return await this.initializePromise;
    }
    this.initializePromise = (async () => {
      return await this._acquireLock(-1, async () => {
        return await this._initialize();
      });
    })();
    return await this.initializePromise;
  }
  async _initialize() {
    try {
      const isPKCEFlow = isBrowser() ? await this._isPKCEFlow() : false;
      this._debug("#_initialize()", "begin", "is PKCE flow", isPKCEFlow);
      if (isPKCEFlow || this.detectSessionInUrl && this._isImplicitGrantFlow()) {
        const { data: data2, error } = await this._getSessionFromURL(isPKCEFlow);
        if (error) {
          this._debug("#_initialize()", "error detecting session from URL", error);
          await this._removeSession();
          return { error };
        }
        const { session, redirectType } = data2;
        this._debug("#_initialize()", "detected session in URL", session, "redirect type", redirectType);
        await this._saveSession(session);
        setTimeout(async () => {
          if (redirectType === "recovery") {
            await this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
          } else {
            await this._notifyAllSubscribers("SIGNED_IN", session);
          }
        }, 0);
        return { error: null };
      }
      await this._recoverAndRefresh();
      return { error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { error };
      }
      return {
        error: new AuthUnknownError("Unexpected error during initialization", error)
      };
    } finally {
      await this._handleVisibilityChange();
      this._debug("#_initialize()", "end");
    }
  }
  async signUp(credentials) {
    var _a2, _b, _c;
    try {
      await this._removeSession();
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          const codeVerifier = generatePKCEVerifier();
          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier);
          codeChallenge = await generatePKCEChallenge(codeVerifier);
          codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
        }
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: {
            email,
            password,
            data: (_a2 = options === null || options === void 0 ? void 0 : options.data) !== null && _a2 !== void 0 ? _a2 : {},
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          xform: _sessionResponse
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          body: {
            phone,
            password,
            data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},
            channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : "sms",
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data: data2, error } = res;
      if (error || !data2) {
        return { data: { user: null, session: null }, error };
      }
      const session = data2.session;
      const user = data2.user;
      if (data2.session) {
        await this._saveSession(data2.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async signInWithPassword(credentials) {
    try {
      await this._removeSession();
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            email,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            phone,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data: data2, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data2 || !data2.session || !data2.user) {
        return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
      }
      if (data2.session) {
        await this._saveSession(data2.session);
        await this._notifyAllSubscribers("SIGNED_IN", data2.session);
      }
      return { data: { user: data2.user, session: data2.session }, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async signInWithOAuth(credentials) {
    var _a2, _b, _c, _d;
    await this._removeSession();
    return await this._handleProviderSignIn(credentials.provider, {
      redirectTo: (_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo,
      scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
      queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
      skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect
    });
  }
  async exchangeCodeForSession(authCode) {
    await this.initializePromise;
    return this._acquireLock(-1, async () => {
      return this._exchangeCodeForSession(authCode);
    });
  }
  async _exchangeCodeForSession(authCode) {
    const codeVerifier = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
      headers: this.headers,
      body: {
        auth_code: authCode,
        code_verifier: codeVerifier
      },
      xform: _sessionResponse
    });
    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    if (error) {
      return { data: { user: null, session: null }, error };
    } else if (!data2 || !data2.session || !data2.user) {
      return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
    }
    if (data2.session) {
      await this._saveSession(data2.session);
      await this._notifyAllSubscribers("SIGNED_IN", data2.session);
    }
    return { data: data2, error };
  }
  async signInWithIdToken(credentials) {
    await this._removeSession();
    try {
      const { options, provider, token, access_token, nonce } = credentials;
      const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
        headers: this.headers,
        body: {
          provider,
          id_token: token,
          access_token,
          nonce,
          gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data: data2, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data2 || !data2.session || !data2.user) {
        return {
          data: { user: null, session: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data2.session) {
        await this._saveSession(data2.session);
        await this._notifyAllSubscribers("SIGNED_IN", data2.session);
      }
      return { data: data2, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async signInWithOtp(credentials) {
    var _a2, _b, _c, _d, _e;
    try {
      await this._removeSession();
      if ("email" in credentials) {
        const { email, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          const codeVerifier = generatePKCEVerifier();
          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier);
          codeChallenge = await generatePKCEChallenge(codeVerifier);
          codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
        }
        const { error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            email,
            data: (_a2 = options === null || options === void 0 ? void 0 : options.data) !== null && _a2 !== void 0 ? _a2 : {},
            create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      }
      if ("phone" in credentials) {
        const { phone, options } = credentials;
        const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            phone,
            data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},
            create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : "sms"
          }
        });
        return { data: { user: null, session: null, messageId: data2 === null || data2 === void 0 ? void 0 : data2.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async verifyOtp(params) {
    var _a2, _b;
    try {
      if (params.type !== "email_change" && params.type !== "phone_change") {
        await this._removeSession();
      }
      let redirectTo = void 0;
      let captchaToken = void 0;
      if ("options" in params) {
        redirectTo = (_a2 = params.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo;
        captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;
      }
      const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/verify`, {
        headers: this.headers,
        body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),
        redirectTo,
        xform: _sessionResponse
      });
      if (error) {
        throw error;
      }
      if (!data2) {
        throw new Error("An error occurred on token verification.");
      }
      const session = data2.session;
      const user = data2.user;
      if (session === null || session === void 0 ? void 0 : session.access_token) {
        await this._saveSession(session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async signInWithSSO(params) {
    var _a2, _b, _c;
    try {
      await this._removeSession();
      return await _request(this.fetch, "POST", `${this.url}/sso`, {
        body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b = (_a2 = params.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo) !== null && _b !== void 0 ? _b : void 0 }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true }),
        headers: this.headers,
        xform: _ssoResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async reauthenticate() {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._reauthenticate();
    });
  }
  async _reauthenticate() {
    try {
      return await this._useSession(async (result) => {
        const { data: { session }, error: sessionError } = result;
        if (sessionError)
          throw sessionError;
        if (!session)
          throw new AuthSessionMissingError();
        const { error } = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
          headers: this.headers,
          jwt: session.access_token
        });
        return { data: { user: null, session: null }, error };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async resend(credentials) {
    try {
      if (credentials.type != "email_change" && credentials.type != "phone_change") {
        await this._removeSession();
      }
      const endpoint = `${this.url}/resend`;
      if ("email" in credentials) {
        const { email, type, options } = credentials;
        const { error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            email,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      } else if ("phone" in credentials) {
        const { phone, type, options } = credentials;
        const { data: data2, error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            phone,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          }
        });
        return { data: { user: null, session: null, messageId: data2 === null || data2 === void 0 ? void 0 : data2.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async getSession() {
    await this.initializePromise;
    return this._acquireLock(-1, async () => {
      return this._useSession(async (result) => {
        return result;
      });
    });
  }
  async _acquireLock(acquireTimeout, fn) {
    this._debug("#_acquireLock", "begin", acquireTimeout);
    try {
      if (this.lockAcquired) {
        const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();
        const result = (async () => {
          await last;
          return await fn();
        })();
        this.pendingInLock.push((async () => {
          try {
            await result;
          } catch (e) {
          }
        })());
        return result;
      }
      return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {
        this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
        try {
          this.lockAcquired = true;
          const result = fn();
          this.pendingInLock.push((async () => {
            try {
              await result;
            } catch (e) {
            }
          })());
          await result;
          while (this.pendingInLock.length) {
            const waitOn = [...this.pendingInLock];
            await Promise.all(waitOn);
            this.pendingInLock.splice(0, waitOn.length);
          }
          return await result;
        } finally {
          this._debug("#_acquireLock", "lock released for storage key", this.storageKey);
          this.lockAcquired = false;
        }
      });
    } finally {
      this._debug("#_acquireLock", "end");
    }
  }
  async _useSession(fn) {
    this._debug("#_useSession", "begin");
    try {
      const result = await this.__loadSession();
      return await fn(result);
    } finally {
      this._debug("#_useSession", "end");
    }
  }
  async __loadSession() {
    this._debug("#__loadSession()", "begin");
    if (!this.lockAcquired) {
      this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
    }
    try {
      let currentSession = null;
      if (this.persistSession) {
        const maybeSession = await getItemAsync(this.storage, this.storageKey);
        this._debug("#getSession()", "session from storage", maybeSession);
        if (maybeSession !== null) {
          if (this._isValidSession(maybeSession)) {
            currentSession = maybeSession;
          } else {
            this._debug("#getSession()", "session from storage is not valid");
            await this._removeSession();
          }
        }
      } else {
        currentSession = this.inMemorySession;
        this._debug("#getSession()", "session from memory", currentSession);
      }
      if (!currentSession) {
        return { data: { session: null }, error: null };
      }
      const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1e3 : false;
      this._debug("#__loadSession()", `session has${hasExpired ? "" : " not"} expired`, "expires_at", currentSession.expires_at);
      if (!hasExpired) {
        return { data: { session: currentSession }, error: null };
      }
      const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
      if (error) {
        return { data: { session: null }, error };
      }
      return { data: { session }, error: null };
    } finally {
      this._debug("#__loadSession()", "end");
    }
  }
  async getUser(jwt) {
    if (jwt) {
      return await this._getUser(jwt);
    }
    await this.initializePromise;
    return this._acquireLock(-1, async () => {
      return await this._getUser();
    });
  }
  async _getUser(jwt) {
    try {
      if (jwt) {
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt,
          xform: _userResponse
        });
      }
      return await this._useSession(async (result) => {
        var _a2, _b;
        const { data: data2, error } = result;
        if (error) {
          throw error;
        }
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt: (_b = (_a2 = data2.session) === null || _a2 === void 0 ? void 0 : _a2.access_token) !== null && _b !== void 0 ? _b : void 0,
          xform: _userResponse
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async updateUser(attributes, options = {}) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._updateUser(attributes, options);
    });
  }
  async _updateUser(attributes, options = {}) {
    try {
      return await this._useSession(async (result) => {
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          throw sessionError;
        }
        if (!sessionData.session) {
          throw new AuthSessionMissingError();
        }
        const session = sessionData.session;
        const { data: data2, error: userError } = await _request(this.fetch, "PUT", `${this.url}/user`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: attributes,
          jwt: session.access_token,
          xform: _userResponse
        });
        if (userError)
          throw userError;
        session.user = data2.user;
        await this._saveSession(session);
        await this._notifyAllSubscribers("USER_UPDATED", session);
        return { data: { user: session.user }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  _decodeJWT(jwt) {
    return decodeJWTPayload(jwt);
  }
  async setSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._setSession(currentSession);
    });
  }
  async _setSession(currentSession) {
    try {
      if (!currentSession.access_token || !currentSession.refresh_token) {
        throw new AuthSessionMissingError();
      }
      const timeNow = Date.now() / 1e3;
      let expiresAt2 = timeNow;
      let hasExpired = true;
      let session = null;
      const payload = decodeJWTPayload(currentSession.access_token);
      if (payload.exp) {
        expiresAt2 = payload.exp;
        hasExpired = expiresAt2 <= timeNow;
      }
      if (hasExpired) {
        const { session: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!refreshedSession) {
          return { data: { user: null, session: null }, error: null };
        }
        session = refreshedSession;
      } else {
        const { data: data2, error } = await this._getUser(currentSession.access_token);
        if (error) {
          throw error;
        }
        session = {
          access_token: currentSession.access_token,
          refresh_token: currentSession.refresh_token,
          user: data2.user,
          token_type: "bearer",
          expires_in: expiresAt2 - timeNow,
          expires_at: expiresAt2
        };
        await this._saveSession(session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user: session.user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    }
  }
  async refreshSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._refreshSession(currentSession);
    });
  }
  async _refreshSession(currentSession) {
    try {
      return await this._useSession(async (result) => {
        var _a2;
        if (!currentSession) {
          const { data: data2, error: error2 } = result;
          if (error2) {
            throw error2;
          }
          currentSession = (_a2 = data2.session) !== null && _a2 !== void 0 ? _a2 : void 0;
        }
        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
          throw new AuthSessionMissingError();
        }
        const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!session) {
          return { data: { user: null, session: null }, error: null };
        }
        return { data: { user: session.user, session }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  async _getSessionFromURL(isPKCEFlow) {
    try {
      if (!isBrowser())
        throw new AuthImplicitGrantRedirectError("No browser detected.");
      if (this.flowType === "implicit" && !this._isImplicitGrantFlow()) {
        throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
      } else if (this.flowType == "pkce" && !isPKCEFlow) {
        throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
      }
      const params = parseParametersFromURL(window.location.href);
      if (isPKCEFlow) {
        if (!params.code)
          throw new AuthPKCEGrantCodeExchangeError("No code detected.");
        const { data: data3, error: error2 } = await this._exchangeCodeForSession(params.code);
        if (error2)
          throw error2;
        const url = new URL(window.location.href);
        url.searchParams.delete("code");
        window.history.replaceState(window.history.state, "", url.toString());
        return { data: { session: data3.session, redirectType: null }, error: null };
      }
      if (params.error || params.error_description || params.error_code) {
        throw new AuthImplicitGrantRedirectError(params.error_description || "Error in URL with unspecified error_description", {
          error: params.error || "unspecified_error",
          code: params.error_code || "unspecified_code"
        });
      }
      const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, token_type } = params;
      if (!access_token || !expires_in || !refresh_token || !token_type) {
        throw new AuthImplicitGrantRedirectError("No session defined in URL");
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresIn = parseInt(expires_in);
      const expires_at = timeNow + expiresIn;
      const { data: data2, error } = await this._getUser(access_token);
      if (error)
        throw error;
      const session = {
        provider_token,
        provider_refresh_token,
        access_token,
        expires_in: expiresIn,
        expires_at,
        refresh_token,
        token_type,
        user: data2.user
      };
      window.location.hash = "";
      this._debug("#_getSessionFromURL()", "clearing window.location.hash");
      return { data: { session, redirectType: params.type }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  _isImplicitGrantFlow() {
    const params = parseParametersFromURL(window.location.href);
    return !!(isBrowser() && (params.access_token || params.error_description));
  }
  async _isPKCEFlow() {
    const params = parseParametersFromURL(window.location.href);
    const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    return !!(params.code && currentStorageContent);
  }
  async signOut(options = { scope: "global" }) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._signOut(options);
    });
  }
  async _signOut({ scope } = { scope: "global" }) {
    return await this._useSession(async (result) => {
      var _a2;
      const { data: data2, error: sessionError } = result;
      if (sessionError) {
        return { error: sessionError };
      }
      const accessToken = (_a2 = data2.session) === null || _a2 === void 0 ? void 0 : _a2.access_token;
      if (accessToken) {
        const { error } = await this.admin.signOut(accessToken, scope);
        if (error) {
          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {
            return { error };
          }
        }
      }
      if (scope !== "others") {
        await this._removeSession();
        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        await this._notifyAllSubscribers("SIGNED_OUT", null);
      }
      return { error: null };
    });
  }
  onAuthStateChange(callback) {
    const id = uuid();
    const subscription = {
      id,
      callback,
      unsubscribe: () => {
        this._debug("#unsubscribe()", "state change callback with id removed", id);
        this.stateChangeEmitters.delete(id);
      }
    };
    this._debug("#onAuthStateChange()", "registered callback with id", id);
    this.stateChangeEmitters.set(id, subscription);
    (async () => {
      await this.initializePromise;
      await this._acquireLock(-1, async () => {
        this._emitInitialSession(id);
      });
    })();
    return { data: { subscription } };
  }
  async _emitInitialSession(id) {
    return await this._useSession(async (result) => {
      var _a2, _b;
      try {
        const { data: { session }, error } = result;
        if (error)
          throw error;
        await ((_a2 = this.stateChangeEmitters.get(id)) === null || _a2 === void 0 ? void 0 : _a2.callback("INITIAL_SESSION", session));
        this._debug("INITIAL_SESSION", "callback id", id, "session", session);
      } catch (err2) {
        await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback("INITIAL_SESSION", null));
        this._debug("INITIAL_SESSION", "callback id", id, "error", err2);
        console.error(err2);
      }
    });
  }
  async resetPasswordForEmail(email, options = {}) {
    let codeChallenge = null;
    let codeChallengeMethod = null;
    if (this.flowType === "pkce") {
      const codeVerifier = generatePKCEVerifier();
      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier);
      codeChallenge = await generatePKCEChallenge(codeVerifier);
      codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
    }
    try {
      return await _request(this.fetch, "POST", `${this.url}/recover`, {
        body: {
          email,
          code_challenge: codeChallenge,
          code_challenge_method: codeChallengeMethod,
          gotrue_meta_security: { captcha_token: options.captchaToken }
        },
        headers: this.headers,
        redirectTo: options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _refreshAccessToken(refreshToken) {
    const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      const startedAt = Date.now();
      return await retryable(async (attempt) => {
        await sleep(attempt * 200);
        this._debug(debugName, "refreshing attempt", attempt);
        return await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
          body: { refresh_token: refreshToken },
          headers: this.headers,
          xform: _sessionResponse
        });
      }, (attempt, _, result) => result && result.error && isAuthRetryableFetchError(result.error) && Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION);
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    } finally {
      this._debug(debugName, "end");
    }
  }
  _isValidSession(maybeSession) {
    const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
    return isValidSession;
  }
  async _handleProviderSignIn(provider, options) {
    const url = await this._getUrlForProvider(provider, {
      redirectTo: options.redirectTo,
      scopes: options.scopes,
      queryParams: options.queryParams
    });
    this._debug("#_handleProviderSignIn()", "provider", provider, "options", options, "url", url);
    if (isBrowser() && !options.skipBrowserRedirect) {
      window.location.assign(url);
    }
    return { data: { provider, url }, error: null };
  }
  async _recoverAndRefresh() {
    var _a2;
    const debugName = "#_recoverAndRefresh()";
    this._debug(debugName, "begin");
    try {
      const currentSession = await getItemAsync(this.storage, this.storageKey);
      this._debug(debugName, "session from storage", currentSession);
      if (!this._isValidSession(currentSession)) {
        this._debug(debugName, "session is not valid");
        if (currentSession !== null) {
          await this._removeSession();
        }
        return;
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresWithMargin = ((_a2 = currentSession.expires_at) !== null && _a2 !== void 0 ? _a2 : Infinity) < timeNow + EXPIRY_MARGIN;
      this._debug(debugName, `session has${expiresWithMargin ? "" : " not"} expired with margin of ${EXPIRY_MARGIN}s`);
      if (expiresWithMargin) {
        if (this.autoRefreshToken && currentSession.refresh_token) {
          const { error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            console.error(error);
            if (!isAuthRetryableFetchError(error)) {
              this._debug(debugName, "refresh failed with a non-retryable error, removing the session", error);
              await this._removeSession();
            }
          }
        }
      } else {
        await this._notifyAllSubscribers("SIGNED_IN", currentSession);
      }
    } catch (err2) {
      this._debug(debugName, "error", err2);
      console.error(err2);
      return;
    } finally {
      this._debug(debugName, "end");
    }
  }
  async _callRefreshToken(refreshToken) {
    var _a2, _b;
    if (!refreshToken) {
      throw new AuthSessionMissingError();
    }
    if (this.refreshingDeferred) {
      return this.refreshingDeferred.promise;
    }
    const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      this.refreshingDeferred = new Deferred();
      const { data: data2, error } = await this._refreshAccessToken(refreshToken);
      if (error)
        throw error;
      if (!data2.session)
        throw new AuthSessionMissingError();
      await this._saveSession(data2.session);
      await this._notifyAllSubscribers("TOKEN_REFRESHED", data2.session);
      const result = { session: data2.session, error: null };
      this.refreshingDeferred.resolve(result);
      return result;
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        const result = { session: null, error };
        (_a2 = this.refreshingDeferred) === null || _a2 === void 0 ? void 0 : _a2.resolve(result);
        return result;
      }
      (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);
      throw error;
    } finally {
      this.refreshingDeferred = null;
      this._debug(debugName, "end");
    }
  }
  async _notifyAllSubscribers(event, session, broadcast = true) {
    const debugName = `#_notifyAllSubscribers(${event})`;
    this._debug(debugName, "begin", session, `broadcast = ${broadcast}`);
    try {
      if (this.broadcastChannel && broadcast) {
        this.broadcastChannel.postMessage({ event, session });
      }
      const errors = [];
      const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {
        try {
          await x.callback(event, session);
        } catch (e) {
          errors.push(e);
        }
      });
      await Promise.all(promises);
      if (errors.length > 0) {
        for (let i = 0; i < errors.length; i += 1) {
          console.error(errors[i]);
        }
        throw errors[0];
      }
    } finally {
      this._debug(debugName, "end");
    }
  }
  async _saveSession(session) {
    this._debug("#_saveSession()", session);
    if (!this.persistSession) {
      this.inMemorySession = session;
    }
    if (this.persistSession && session.expires_at) {
      await this._persistSession(session);
    }
  }
  _persistSession(currentSession) {
    this._debug("#_persistSession()", currentSession);
    return setItemAsync(this.storage, this.storageKey, currentSession);
  }
  async _removeSession() {
    this._debug("#_removeSession()");
    if (this.persistSession) {
      await removeItemAsync(this.storage, this.storageKey);
    } else {
      this.inMemorySession = null;
    }
  }
  _removeVisibilityChangedCallback() {
    this._debug("#_removeVisibilityChangedCallback()");
    const callback = this.visibilityChangedCallback;
    this.visibilityChangedCallback = null;
    try {
      if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {
        window.removeEventListener("visibilitychange", callback);
      }
    } catch (e) {
      console.error("removing visibilitychange callback failed", e);
    }
  }
  async _startAutoRefresh() {
    await this._stopAutoRefresh();
    this._debug("#_startAutoRefresh()");
    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION);
    this.autoRefreshTicker = ticker;
    if (ticker && typeof ticker === "object" && typeof ticker.unref === "function") {
      ticker.unref();
    } else if (typeof Deno !== "undefined" && typeof Deno.unrefTimer === "function") {
      Deno.unrefTimer(ticker);
    }
    setTimeout(async () => {
      await this.initializePromise;
      await this._autoRefreshTokenTick();
    }, 0);
  }
  async _stopAutoRefresh() {
    this._debug("#_stopAutoRefresh()");
    const ticker = this.autoRefreshTicker;
    this.autoRefreshTicker = null;
    if (ticker) {
      clearInterval(ticker);
    }
  }
  async startAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._startAutoRefresh();
  }
  async stopAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._stopAutoRefresh();
  }
  async _autoRefreshTokenTick() {
    this._debug("#_autoRefreshTokenTick()", "begin");
    try {
      await this._acquireLock(0, async () => {
        try {
          const now = Date.now();
          try {
            return await this._useSession(async (result) => {
              const { data: { session } } = result;
              if (!session || !session.refresh_token || !session.expires_at) {
                this._debug("#_autoRefreshTokenTick()", "no session");
                return;
              }
              const expiresInTicks = Math.floor((session.expires_at * 1e3 - now) / AUTO_REFRESH_TICK_DURATION);
              this._debug("#_autoRefreshTokenTick()", `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);
              if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {
                await this._callRefreshToken(session.refresh_token);
              }
            });
          } catch (e) {
            console.error("Auto refresh tick failed with error. This is likely a transient error.", e);
          }
        } finally {
          this._debug("#_autoRefreshTokenTick()", "end");
        }
      });
    } catch (e) {
      if (e.isAcquireTimeout) {
        this._debug("auto refresh token tick lock not available");
      } else {
        throw e;
      }
    }
  }
  async _handleVisibilityChange() {
    this._debug("#_handleVisibilityChange()");
    if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
      if (this.autoRefreshToken) {
        this.startAutoRefresh();
      }
      return false;
    }
    try {
      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);
      window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", this.visibilityChangedCallback);
      await this._onVisibilityChanged(true);
    } catch (error) {
      console.error("_handleVisibilityChange", error);
    }
  }
  async _onVisibilityChanged(calledFromInitialize) {
    const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;
    this._debug(methodName, "visibilityState", document.visibilityState);
    if (document.visibilityState === "visible") {
      if (this.autoRefreshToken) {
        this._startAutoRefresh();
      }
      if (!calledFromInitialize) {
        await this.initializePromise;
        await this._acquireLock(-1, async () => {
          if (document.visibilityState !== "visible") {
            this._debug(methodName, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
            return;
          }
          await this._recoverAndRefresh();
        });
      }
    } else if (document.visibilityState === "hidden") {
      if (this.autoRefreshToken) {
        this._stopAutoRefresh();
      }
    }
  }
  async _getUrlForProvider(provider, options) {
    const urlParams = [`provider=${encodeURIComponent(provider)}`];
    if (options === null || options === void 0 ? void 0 : options.redirectTo) {
      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);
    }
    if (options === null || options === void 0 ? void 0 : options.scopes) {
      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);
    }
    if (this.flowType === "pkce") {
      const codeVerifier = generatePKCEVerifier();
      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier);
      const codeChallenge = await generatePKCEChallenge(codeVerifier);
      const codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
      this._debug("PKCE", "code verifier", `${codeVerifier.substring(0, 5)}...`, "code challenge", codeChallenge, "method", codeChallengeMethod);
      const flowParams = new URLSearchParams({
        code_challenge: `${encodeURIComponent(codeChallenge)}`,
        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`
      });
      urlParams.push(flowParams.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.queryParams) {
      const query = new URLSearchParams(options.queryParams);
      urlParams.push(query.toString());
    }
    return `${this.url}/authorize?${urlParams.join("&")}`;
  }
  async _unenroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a2;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        return await _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
          headers: this.headers,
          jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _enroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a2, _b;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/factors`, {
          body: {
            friendly_name: params.friendlyName,
            factor_type: params.factorType,
            issuer: params.issuer
          },
          headers: this.headers,
          jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
        });
        if (error) {
          return { data: null, error };
        }
        if ((_b = data2 === null || data2 === void 0 ? void 0 : data2.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {
          data2.totp.qr_code = `data:image/svg+xml;utf-8,${data2.totp.qr_code}`;
        }
        return { data: data2, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _verify(params) {
    try {
      return await this._useSession(async (result) => {
        var _a2;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
          body: { code: params.code, challenge_id: params.challengeId },
          headers: this.headers,
          jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
        });
        if (error) {
          return { data: null, error };
        }
        await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data2.expires_in }, data2));
        await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data2);
        return { data: data2, error };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _challenge(params) {
    try {
      return await this._useSession(async (result) => {
        var _a2;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        return await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
          headers: this.headers,
          jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _challengeAndVerify(params) {
    const { data: challengeData, error: challengeError } = await this._challenge({
      factorId: params.factorId
    });
    if (challengeError) {
      return { data: null, error: challengeError };
    }
    return await this._verify({
      factorId: params.factorId,
      challengeId: challengeData.id,
      code: params.code
    });
  }
  async _listFactors() {
    const { data: { user }, error: userError } = await this._getUser();
    if (userError) {
      return { data: null, error: userError };
    }
    const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];
    const totp = factors.filter((factor) => factor.factor_type === "totp" && factor.status === "verified");
    return {
      data: {
        all: factors,
        totp
      },
      error: null
    };
  }
  async _getAuthenticatorAssuranceLevel() {
    return await this._useSession(async (result) => {
      var _a2, _b;
      const { data: { session }, error: sessionError } = result;
      if (sessionError) {
        return { data: null, error: sessionError };
      }
      if (!session) {
        return {
          data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
          error: null
        };
      }
      const payload = this._decodeJWT(session.access_token);
      let currentLevel = null;
      if (payload.aal) {
        currentLevel = payload.aal;
      }
      let nextLevel = currentLevel;
      const verifiedFactors = (_b = (_a2 = session.user.factors) === null || _a2 === void 0 ? void 0 : _a2.filter((factor) => factor.status === "verified")) !== null && _b !== void 0 ? _b : [];
      if (verifiedFactors.length > 0) {
        nextLevel = "aal2";
      }
      const currentAuthenticationMethods = payload.amr || [];
      return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
    });
  }
}
GoTrueClient.nextInstanceID = 0;
({
  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
});
class SupabaseAuthClient extends GoTrueClient {
  constructor(options) {
    super(options);
  }
}
var __awaiter = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const DEFAULT_GLOBAL_OPTIONS = {
  headers: DEFAULT_HEADERS$1
};
const DEFAULT_DB_OPTIONS = {
  schema: "public"
};
const DEFAULT_AUTH_OPTIONS = {
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  flowType: "implicit"
};
const DEFAULT_REALTIME_OPTIONS = {};
class SupabaseClient {
  constructor(supabaseUrl, supabaseKey, options) {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    this.supabaseUrl = supabaseUrl;
    this.supabaseKey = supabaseKey;
    if (!supabaseUrl)
      throw new Error("supabaseUrl is required.");
    if (!supabaseKey)
      throw new Error("supabaseKey is required.");
    const _supabaseUrl = stripTrailingSlash(supabaseUrl);
    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, "ws");
    this.authUrl = `${_supabaseUrl}/auth/v1`;
    this.storageUrl = `${_supabaseUrl}/storage/v1`;
    this.functionsUrl = `${_supabaseUrl}/functions/v1`;
    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split(".")[0]}-auth-token`;
    const DEFAULTS = {
      db: DEFAULT_DB_OPTIONS,
      realtime: DEFAULT_REALTIME_OPTIONS,
      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
      global: DEFAULT_GLOBAL_OPTIONS
    };
    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);
    this.storageKey = (_b = (_a2 = settings.auth) === null || _a2 === void 0 ? void 0 : _a2.storageKey) !== null && _b !== void 0 ? _b : "";
    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};
    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);
    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);
    this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));
    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {
      headers: this.headers,
      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,
      fetch: this.fetch
    });
    this._listenForAuthEvents();
  }
  get functions() {
    return new FunctionsClient(this.functionsUrl, {
      headers: this.headers,
      customFetch: this.fetch
    });
  }
  get storage() {
    return new StorageClient(this.storageUrl, this.headers, this.fetch);
  }
  from(relation) {
    return this.rest.from(relation);
  }
  schema(schema) {
    return this.rest.schema(schema);
  }
  rpc(fn, args = {}, options) {
    return this.rest.rpc(fn, args, options);
  }
  channel(name2, opts = { config: {} }) {
    return this.realtime.channel(name2, opts);
  }
  getChannels() {
    return this.realtime.getChannels();
  }
  removeChannel(channel) {
    return this.realtime.removeChannel(channel);
  }
  removeAllChannels() {
    return this.realtime.removeAllChannels();
  }
  _getAccessToken() {
    var _a2, _b;
    return __awaiter(this, void 0, void 0, function* () {
      const { data: data2 } = yield this.auth.getSession();
      return (_b = (_a2 = data2.session) === null || _a2 === void 0 ? void 0 : _a2.access_token) !== null && _b !== void 0 ? _b : null;
    });
  }
  _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, debug }, headers, fetch2) {
    const authHeaders = {
      Authorization: `Bearer ${this.supabaseKey}`,
      apikey: `${this.supabaseKey}`
    };
    return new SupabaseAuthClient({
      url: this.authUrl,
      headers: Object.assign(Object.assign({}, authHeaders), headers),
      storageKey,
      autoRefreshToken,
      persistSession,
      detectSessionInUrl,
      storage,
      flowType,
      debug,
      fetch: fetch2
    });
  }
  _initRealtimeClient(options) {
    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));
  }
  _listenForAuthEvents() {
    let data2 = this.auth.onAuthStateChange((event, session) => {
      this._handleTokenChanged(event, "CLIENT", session === null || session === void 0 ? void 0 : session.access_token);
    });
    return data2;
  }
  _handleTokenChanged(event, source, token) {
    if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);
      this.changedAccessToken = token;
    } else if (event === "SIGNED_OUT") {
      this.realtime.setAuth(this.supabaseKey);
      if (source == "STORAGE")
        this.auth.signOut();
      this.changedAccessToken = void 0;
    }
  }
}
const createClient = (supabaseUrl, supabaseKey, options) => {
  return new SupabaseClient(supabaseUrl, supabaseKey, options);
};
const supabase = createClient("https://bawaoafrntylqfrxnsby.supabase.co", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhd2FvYWZybnR5bHFmcnhuc2J5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTMxMzg3NzQsImV4cCI6MjAwODcxNDc3NH0.Aq7JjfTXJqEBzRQyMD6VJUGDhFdpfQQ8LfZ8MV6AsZk");
const layoutIndex = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const signIn = inlinedQrl(async () => {
    await supabase.auth.signInWithOAuth({
      provider: "google"
    });
  }, "s_niYypBfXQrk");
  async function check() {
    const { data: data2, error } = await supabase.auth.getSession();
    console.log(data2);
    return data2;
  }
  const a = check();
  let b = false;
  a.then((user) => {
    if (user.session) {
      console.log("yes" + user);
      b = true;
    } else {
      console.log("no" + user);
      b = false;
    }
  });
  if (b)
    return /* @__PURE__ */ jsx("div", {
      class: "bgcol ",
      children: [
        /* @__PURE__ */ jsx(Header, {}),
        /* @__PURE__ */ jsx("main", {
          class: "flex flex-row md:flex-row w-screen flex-grow overflow-hidden ",
          children: [
            /* @__PURE__ */ jsx(Menu$1, {}),
            /* @__PURE__ */ jsx("div", {
              class: "w-screen flex flex-col",
              children: [
                /* @__PURE__ */ jsx("div", {
                  id: "tags",
                  class: "flex flex-row w-[100%] p-5 space-x-4",
                  children: [
                    /* @__PURE__ */ jsx(StoriesView, {
                      onClick$: inlinedQrl(() => {
                        console.log("ok");
                      }, "s_XNGMswvYDoU"),
                      poster: "https://picsum.photos/100/200",
                      name: "John Doe",
                      url: "https://picsum.photos/300/400"
                    }),
                    /* @__PURE__ */ jsx(StoriesView, {
                      poster: "https://picsum.photos/200/300",
                      name: "Jack Steyn",
                      url: "https://picsum.photos/100/400"
                    }),
                    /* @__PURE__ */ jsx(StoriesView, {
                      poster: "https://picsum.photos/200/200",
                      name: "Amy Bruce",
                      url: "https://picsum.photos/200/400"
                    }),
                    /* @__PURE__ */ jsx(StoriesView, {
                      poster: "https://picsum.photos/200/100",
                      name: "Sino Wells",
                      url: "https://picsum.photos/300/300"
                    }),
                    /* @__PURE__ */ jsx(StoriesView, {
                      poster: "https://picsum.photos/300/200",
                      name: "Bret Pope",
                      url: "https://picsum.photos/200/300"
                    }),
                    /* @__PURE__ */ jsx(StoriesView, {
                      poster: "https://picsum.photos/400/300",
                      name: "Steve Chris",
                      url: "https://picsum.photos/100/300"
                    })
                  ]
                }),
                /* @__PURE__ */ jsx(Slot, {})
              ]
            }),
            /* @__PURE__ */ jsx(Sidebar, {})
          ]
        })
      ]
    });
  else
    return /* @__PURE__ */ jsx("div", {
      class: "bgcol flex flex-col content-center items-center",
      children: /* @__PURE__ */ jsx("div", {
        class: "px-20 py-14 bg-neutral-800 rounded-lg bg-opacity-20 my-auto",
        children: [
          /* @__PURE__ */ jsx("h1", {
            class: "font-semibold font-sf text-lg text-white text-center mb-8",
            children: "Sign In to continue"
          }),
          /* @__PURE__ */ jsx("button", {
            onClick$: inlinedQrl(async () => {
              const [signIn2] = useLexicalScope();
              return signIn2();
            }, "s_S297dGnBt5Y", [
              signIn
            ]),
            class: " flex flex-row space-x-[10px] items-center content-center right-0 top-0 left-0 bottom-0 max-w-auto my-auto text-white font-semibold font-inter md:text-md text-sm md:py-4 px-4 pr-8 md:px-8 bg-red-700 rounded-full",
            children: [
              /* @__PURE__ */ jsx("span", {
                class: "md:m-0 m-4 iconify font-bold w-5 h-5 md:w-4 md:h-4",
                "data-icon": "ant-design:google-outlined"
              }),
              /* @__PURE__ */ jsx("span", {
                class: "inline-block ",
                children: "Login With Google"
              })
            ]
          })
        ]
      })
    });
}, "s_NcbFhH0Rq0M"));
const Layoutindex_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: layoutIndex
}, Symbol.toStringTag, { value: "Module" }));
const data$1 = {
  taylor: {
    name: "A Taylor Swift",
    username: "@Taylor_Swift",
    about: "I make music that i write",
    cover: "https://iheart-blog.s3.amazonaws.com/banner/originals/0_a_aaaTSwiftBanner.jpg",
    profile: "https://gracemcgettigan.files.wordpress.com/2015/01/tay.jpg",
    followers: "129M"
  },
  sean: {
    name: "A Sean Paul",
    username: "@Sean_Paul",
    about: "Sean Paul is a Jamaicam singer/songwriter known for his pop classics",
    cover: "https://i.pinimg.com/originals/30/58/6a/30586a6e4209906100fa2f470cd0a819.jpg",
    profile: "https://wallpapercave.com/wp/wp5979216.jpg",
    followers: "69M"
  }
};
const layoutProfile = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const location = useLocation();
  location.params.proid;
  location.params.proid;
  return /* @__PURE__ */ jsx("div", {
    class: " flex flex-grow flex-col bg-white bg-opacity-10 md:bg-opacity-0 py-0 md:space-y-4",
    children: /* @__PURE__ */ jsx("div", {
      class: "xl:relative md:m-5 m-3",
      children: [
        /* @__PURE__ */ jsx("div", {
          class: `h-44 lg:h-[203px] rounded-lg bg-cover `,
          style: `background-image:
linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 10%, rgba(0, 0, 0, .6) 40%, rgba(0, 0, 0, .8) 65%, rgba(0, 0, 0, 1) 100%),
url('');

background-size: cover;

`
        }),
        /* @__PURE__ */ jsx("div", {
          class: "xl:absolute w-full xl:left-10 xl:top-[120px] xl:right-0 mx-auto mt-7 xl:mt-0 flex flex-col",
          children: [
            /* @__PURE__ */ jsx("img", {
              class: "xl:w-[100px] xl:h-[100px] shadow-xl border border-neutral-800 w-20 mx-auto xl:mx-0 h-20 rounded-full"
            }),
            /* @__PURE__ */ jsx("div", {
              class: "flex-grow flex flex-col xl:block",
              children: [
                /* @__PURE__ */ jsx("div", {
                  class: "flex flex-row xl:top-[20px] xl:left-[125px] mx-auto xl:mx-0 xl:absolute none mt-3 xl:mt-0",
                  children: /* @__PURE__ */ jsx("div", {
                    class: " flex flex-col mx-auto xl:mx-0",
                    children: [
                      /* @__PURE__ */ jsx("span", {
                        class: "xl:text-lg mx-auto xl:mx-0 text-lg font-semibold font-sf text-neutral-300"
                      }),
                      /* @__PURE__ */ jsx("span", {
                        class: "xl:text-[12.5px] mt-1 xl:mt-[0px] text-center xl:text-left leading-relaxed xl:px-0 xl:w-full sm:w-3/4 leading-5 xl:mx-0 mx-auto px-8 text-[12px] font-sf text-neutral-400"
                      })
                    ]
                  })
                }),
                /* @__PURE__ */ jsx("button", {
                  class: "xl:absolute xl:right-[90px] shadow-lg xl:top-[25px] px-8 mx-auto xl:mx-0 h-max text-xs xl:text-sm text-white font-semibold bg-blue-600 overflow-y-hidden py-2 xl:my-0 my-5 xl:rounded-md",
                  children: "Follow"
                })
              ]
            })
          ]
        })
      ]
    })
  });
}, "s_aeoMBoP047Y"));
const ProfileProidLayoutprofile_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  data: data$1,
  default: layoutProfile
}, Symbol.toStringTag, { value: "Module" }));
const Menu = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const loc = useLocation();
  return /* @__PURE__ */ jsx("div", {
    class: "settingsmenucont",
    children: /* @__PURE__ */ jsx("div", {
      class: "settingsmenumain mx-1 md:mx-0 ",
      children: [
        /* @__PURE__ */ jsx(Link, {
          id: "central",
          href: "/settings",
          class: mutable(`flex flex-row-reverse items-center content-center md:space-x-3 px-2 md:mx-2 mx-1 py-3 md:py-[8px] ${loc.pathname === "/settings" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify md:w-4 md:h-4 w-5 h-5 md:ml-auto md:mx-0 mx-2 md:mr-2 my-auto",
              "data-icon": "tabler:user"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden md:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Profile"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "search",
          href: "/settings",
          class: mutable(`flex flex-row-reverse items-center content-center md:space-x-3 px-2 mx-1 md:mx-2 py-3 md:py-[8px] ${loc.pathname === "/search" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify md:w-4 md:h-4 w-5 h-5 md:ml-auto md:mx-0 mx-2 md:mr-2 my-auto",
              "data-icon": "tabler:shield"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden md:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Privacy"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "clips",
          href: "/settings",
          class: mutable(`flex flex-row-reverse items-center content-center md:space-x-3 px-2 mx-1 md:mx-2 py-3 md:py-[8px] ${loc.pathname === "/clips" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify md:w-4 md:h-4 w-5 h-5 md:ml-auto md:mx-0 mx-2 md:mr-2 my-auto",
              "data-icon": "tabler:palette"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden md:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Personalize"
            })
          ]
        }),
        /* @__PURE__ */ jsx(Link, {
          id: "favourites",
          href: "/settings",
          class: mutable(`flex flex-row-reverse items-center content-center md:space-x-3 px-2  mx-1 md:mx-2 py-3  md:py-[8px] ${loc.pathname === "/favs" ? "selected-sidebar-bg selected-sidebar-text selected-sidebar-icon" : "unselected-sidebar-bg unselected-sidebar-text unselected-sidebar-icon"}`),
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "iconify md:w-4 md:h-4 w-5 h-5 md:ml-auto md:mx-0 mx-2 md:mr-2 my-auto",
              "data-icon": "tabler:help"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden md:inline-flex font-inter text-[13.5px] my-auto ",
              children: "Info and Help"
            })
          ]
        })
      ]
    })
  });
}, "s_zc8ICUneHHo"));
const layoutSettings = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "bgcol",
    children: /* @__PURE__ */ jsx("main", {
      class: "flex flex-row md:flex-row w-screen flex-grow overflow-hidden ",
      children: [
        /* @__PURE__ */ jsx("div", {
          class: "h-[100%]",
          children: /* @__PURE__ */ jsx(Menu, {})
        }),
        /* @__PURE__ */ jsx(Slot, {})
      ]
    })
  });
}, "s_r5Cgk9gmzNI"));
const SettingsLayoutsettings_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: layoutSettings
}, Symbol.toStringTag, { value: "Module" }));
const Post = /* @__PURE__ */ componentQrl(inlinedQrl((props) => {
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx("div", {
      class: "flex flex-row border-b border-b-[#121212] ",
      children: [
        /* @__PURE__ */ jsx("img", {
          class: `hidden w-full lg:max-w-[430px] max-h-auto max-w-[350px] absolute  h-full`,
          src: props.image
        }),
        /* @__PURE__ */ jsx("div", {
          class: "w-max h-full py-4 px-[16px] bg-[#121212] flex flex-col space-y-[18px]",
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "text-neutral-500 iconify w-4 h-4",
              "data-icon": "ant-design:heart"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "text-neutral-500 iconify w-4 h-4",
              "data-icon": "ant-design:message"
            })
          ]
        }),
        /* @__PURE__ */ jsx("div", {
          class: "flex flex-col px-4 py-4",
          children: [
            /* @__PURE__ */ jsx("div", {
              class: "flex flex-row bg-white bg-opacity-[3%] w-max px-[10px] py-[6px] rounded-sm items-center content-center mb-[8px] md:mb-[10px] space-x-[8px]",
              children: [
                /* @__PURE__ */ jsx("img", {
                  class: "w-[14px] h-[14px] rounded-full ",
                  src: props.poster,
                  children: " "
                }),
                /* @__PURE__ */ jsx("h1", {
                  class: "text-[9.5px] md:text-[10.5px] font-sans mt-[1.5px] md:mt-[1px] text-neutral-400 font-medium ",
                  children: props.user
                })
              ]
            }),
            /* @__PURE__ */ jsx("div", {
              class: "",
              children: [
                /* @__PURE__ */ jsx("h1", {
                  onClick$: inlinedQrl(() => {
                    const [props2] = useLexicalScope();
                    return window.location.href = `/posts/${props2.id}`;
                  }, "s_PeDTn2z80A4", [
                    props
                  ]),
                  class: ` md:leading-normal leading-5 text-[14.5px] cursor-pointer md:text-[15.9px] lg:text-[16.5px] font-inter  ${`md:mt-[0px] mt-[6px] mb-[4px]`} font-medium text-neutral-300 md:opacity-90 `,
                  children: props.title
                }),
                /* @__PURE__ */ jsx("h1", {
                  class: "text-[12px] md:text-[13.5px] font-inter text-[#7b7b7b] ",
                  children: props.content
                }),
                /* @__PURE__ */ jsx("div", {
                  class: `  py-3 pb-[2px] pt-[16px] ${!props.image ? `hidden` : `flex`}  `,
                  children: [
                    "    ",
                    /* @__PURE__ */ jsx("img", {
                      class: "w-full lg:max-w-[430px] max-h-full max-w-[350px] mx-auto md:mx-0 h-full",
                      src: props.image
                    })
                  ]
                })
              ]
            })
          ]
        }),
        /* @__PURE__ */ jsx("div", {
          class: ""
        })
      ]
    })
  });
}, "s_bSNo02BOSeo"));
const index_index = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  var publishpopup = useStore({
    state: false
  });
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx("div", {
      class: "flex flex-col flex-grow md:relative ",
      children: [
        /* @__PURE__ */ jsx("button", {
          onClick$: inlinedQrl(() => {
            const [publishpopup2] = useLexicalScope();
            return publishpopup2.state = !publishpopup2.state;
          }, "s_t8Q6Qpbu0pE", [
            publishpopup
          ]),
          class: "absolute flex flex-row space-x-[10px] items-center content-center right-10 bottom-24 md:right-15 md:bottom-10 lg:bottom:10 text-white font-semibold font-inter md:text-md text-sm md:py-4 md:px-7 bg-blue-900 rounded-full",
          children: [
            /* @__PURE__ */ jsx("span", {
              class: "md:m-0 m-4 iconify font-bold w-5 h-5 md:w-4 md:h-4",
              "data-icon": "ep:plus"
            }),
            /* @__PURE__ */ jsx("span", {
              class: "hidden md:inline-flex ",
              children: [
                /* @__PURE__ */ jsx("span", {
                  class: "xl:inline-block hidden xl:mr-1",
                  children: "New"
                }),
                " ",
                "Post"
              ]
            })
          ]
        }),
        /* @__PURE__ */ jsx("div", {
          id: "publish",
          onClick$: inlinedQrl((event) => {
            const [publishpopup2] = useLexicalScope();
            return event.currentTarget == event.target ? (event.stopPropagation(), !publishpopup2.state ? publishpopup2.state = !publishpopup2.state : 0) : 0;
          }, "s_TlrTEIpSGyw", [
            publishpopup
          ]),
          class: `${!publishpopup.state ? "hidden" : "flex"}  fadeMe  items-center content-center flex flex-row`,
          children: /* @__PURE__ */ jsx("div", {
            id: "popup",
            class: "z-1000 bg-[#0d0d0d] rounded-lg mx-auto",
            children: [
              /* @__PURE__ */ jsx("div", {
                class: "py-3 px-3 flex flex-row",
                children: [
                  /* @__PURE__ */ jsx("button", {
                    onClick$: inlinedQrl(() => {
                      const [publishpopup2] = useLexicalScope();
                      return publishpopup2.state = !publishpopup2.state;
                    }, "s_p8802htc8lU", [
                      publishpopup
                    ]),
                    children: /* @__PURE__ */ jsx("span", {
                      class: "iconify my-1 mx-2 w-[18px] h-[18px] font-sf text-neutral-400 ",
                      "data-icon": "clarity:window-close-line"
                    })
                  }),
                  /* @__PURE__ */ jsx("button", {
                    class: "px-6 ml-auto py-[8px] right-0 ml-auto text-white font-inter font-medium text-[12px] rounded-md bg-blue-800",
                    children: "Publish"
                  })
                ]
              }),
              /* @__PURE__ */ jsx("textarea", {
                id: "publishtextarea",
                class: " outline-none bg-transparent w-72 md:w-96 h-32 mx-5 rounded-md font-sf placeholder:text-neutral-400 text-white md:text-md text-sm placeholder:text-md md:text-md placeholder:text-sm mt-0 px-0 mb-3 border-none",
                placeholder: "What's Poppin? @User"
              }),
              /* @__PURE__ */ jsx("div", {
                class: "py-[14px] border-t border-t-neutral-900 px-6 flex flex-row items-center content-center space-x-5",
                children: [
                  /* @__PURE__ */ jsx("span", {
                    class: "iconify ml-auto w-[18px] h-[18px] font-sf text-neutral-400 ",
                    "data-icon": "ci:image"
                  }),
                  /* @__PURE__ */ jsx("span", {
                    class: "iconify w-[18px] h-[18px] font-sf text-neutral-400 ",
                    "data-icon": "ci:youtube"
                  }),
                  /* @__PURE__ */ jsx("span", {
                    class: "iconify w-[18px] h-[18px] font-sf text-neutral-400 ",
                    "data-icon": "fluent:gif-16-filled"
                  })
                ]
              })
            ]
          })
        }),
        /* @__PURE__ */ jsx("div", {
          id: "midcont",
          class: " flex flex-grow flex-col bg-black bg-opacity-10 md:bg-opacity-0 md:rounded-md ",
          children: /* @__PURE__ */ jsx(Post, {
            user: "Admin",
            username: "@evolt",
            published: "yesterday",
            id: "1",
            content: "Lorem Ipsum Dolor Sit Amet",
            likes: "3",
            poster: "https://picsum.photos/300/300",
            comments: "69",
            about: "ok",
            title: "Hello"
          })
        })
      ]
    })
  });
}, "s_0e3es3vnWuk"));
const head$5 = {
  title: "Home"
};
const Indexindex = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index_index,
  head: head$5
}, Symbol.toStringTag, { value: "Module" }));
const index$5 = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "h-screen flex flex-col flex-grow"
  });
}, "s_j5h3enAr0HE"));
const head$4 = {
  title: "Clips"
};
const Clips = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$5,
  head: head$4
}, Symbol.toStringTag, { value: "Module" }));
const index$4 = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "h-screen flex flex-col flex-grow"
  });
}, "s_n0b0sGHmkUY"));
const head$3 = {
  title: "Favs"
};
const Favs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$4,
  head: head$3
}, Symbol.toStringTag, { value: "Module" }));
const index$3 = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "h-screen flex flex-col flex-grow"
  });
}, "s_iYmIWuy4aaw"));
const head$2 = {
  title: "Search"
};
const Search = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$3,
  head: head$2
}, Symbol.toStringTag, { value: "Module" }));
const index_settings = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "flex flex-grow px-5 py-4 md:py-6 md:px-8 border-l border-l-neutral-800 md:border-none",
    children: /* @__PURE__ */ jsx("h1", {
      class: "text-[21px] md:text-[21.75px] lg:text-[21.75px] font-semibold font-inter text-neutral-300",
      children: "Profile"
    })
  });
}, "s_EzDrC20gQ30"));
const head$1 = {
  title: "Settings"
};
const SettingsIndexsettings = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index_settings,
  head: head$1
}, Symbol.toStringTag, { value: "Module" }));
const index$2 = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  return /* @__PURE__ */ jsx("div", {
    class: "h-screen flex flex-col flex-grow"
  });
}, "s_uaqIf5ac0DY"));
const head = {
  title: "Vids"
};
const Vids = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$2,
  head
}, Symbol.toStringTag, { value: "Module" }));
const index$1 = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const location = useLocation();
  location.params.proid;
  location.params.proid;
  location.params.proid;
  return /* @__PURE__ */ jsx("div", {
    id: "midcont",
    class: "h-screen flex flex-col flex-grow md:py-10 p-6 px-8",
    children: [
      /* @__PURE__ */ jsx("div", {
        class: "flex flex-row items-center content-center ",
        children: [
          /* @__PURE__ */ jsx("div", {
            class: "flex flex-row items-center content-center space-x-[12px] mr-auto",
            children: [
              /* @__PURE__ */ jsx("img", {
                class: "w-5 h-5 rounded-full",
                src: "https://picsum.photos/500/600",
                children: " "
              }),
              /* @__PURE__ */ jsx("h1", {
                class: "text-[12px] md:text-[12px] font-inter text-neutral-300 opacity-90 ",
                children: [
                  /* @__PURE__ */ jsx("span", {
                    class: "hidden md:inline-flex",
                    children: "Posted by"
                  }),
                  " Admin"
                ]
              })
            ]
          }),
          /* @__PURE__ */ jsx("h1", {
            class: "text-[12px] md:text-[12px] font-inter text-neutral-400 ",
            children: "September 19 2022"
          })
        ]
      }),
      /* @__PURE__ */ jsx("h1", {
        class: "text-[20px] md:text-[20.75px] lg:text-[20.75px] my-6 md:my-5 mb-0 font-inter font-semibold text-neutral-300 ",
        children: "Example of a dynamically rendered post. Work under progress"
      }),
      /* @__PURE__ */ jsx("h1", {
        class: "text-[14px] md:text-[14.5px] lg:text-[14.5px] md:mt-0 mt-[14px] lg:mb-5 mb-[13px] lg:mb-[10px] md:mb-3 font-inter leading-relaxed text-neutral-400 ",
        children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut egestas sollicitudin odio in egestas. Vivamus commodo massa in lacus luctus, id pellentesque turpis facilisis. Nunc at pharetra lectus, porttitor sollicitudin sapien. Etiam blandit pharetra mollis. Aliquam eget ipsum quis mi semper iaculis. Ut tincidunt tempor diam id tincidunt."
      }),
      /* @__PURE__ */ jsx("div", {
        class: `  py-3 lg:pt-4 pt-[12px] ${`flex`}  `,
        children: [
          "    ",
          /* @__PURE__ */ jsx("img", {
            class: "w-auto rounded-[5px] mx-auto sm:mx-0 h-auto",
            src: "https://picsum.photos/500/600"
          })
        ]
      })
    ]
  });
}, "s_Xo5tmaGPZOs"));
const PostsPostid = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$1
}, Symbol.toStringTag, { value: "Module" }));
const data = {
  taylor: {
    name: "Taylor Swift",
    username: "@Taylor_Swift",
    about: "I make music that i write",
    cover: "https://iheart-blog.s3.amazonaws.com/banner/originals/0_a_aaaTSwiftBanner.jpg",
    profile: "https://gracemcgettigan.files.wordpress.com/2015/01/tay.jpg",
    followers: "129M"
  },
  sean: {
    name: "A Sean Paul",
    username: "@Sean_Paul",
    about: "Sean Paul is a Jamaicam singer/songwriter known for his pop classics",
    cover: "https://i.pinimg.com/originals/30/58/6a/30586a6e4209906100fa2f470cd0a819.jpg",
    profile: "https://wallpapercave.com/wp/wp5979216.jpg",
    followers: "69M"
  }
};
const index_profile = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const location = useLocation();
  location.params.proid;
  location.params.proid;
  return /* @__PURE__ */ jsx(Fragment, {});
}, "s_26hfKJ9I4hk"));
const ProfileProidIndexprofile = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  data,
  default: index_profile
}, Symbol.toStringTag, { value: "Module" }));
const Layout = () => Layout_;
const Layoutindex = () => Layoutindex_;
const ProfileProidLayoutprofile = () => ProfileProidLayoutprofile_;
const SettingsLayoutsettings = () => SettingsLayoutsettings_;
const routes = [
  [/^\/$/, [Layoutindex, () => Indexindex], void 0, "/", ["q-e64507a0.js", "q-29bd23b5.js"]],
  [/^\/clips\/?$/, [Layout, () => Clips], void 0, "/clips", ["q-5f8cb5e5.js", "q-d3bc96f3.js"]],
  [/^\/favs\/?$/, [Layout, () => Favs], void 0, "/favs", ["q-5f8cb5e5.js", "q-8eb787f6.js"]],
  [/^\/search\/?$/, [Layout, () => Search], void 0, "/search", ["q-5f8cb5e5.js", "q-1fbe7205.js"]],
  [/^\/settings\/?$/, [Layout, SettingsLayoutsettings, () => SettingsIndexsettings], void 0, "/settings", ["q-5f8cb5e5.js", "q-5a1cb357.js", "q-b114a70d.js"]],
  [/^\/vids\/?$/, [Layout, () => Vids], void 0, "/vids", ["q-5f8cb5e5.js", "q-916fd827.js"]],
  [/^\/posts\/([^/]+?)\/?$/, [Layout, () => PostsPostid], ["postid"], "/posts/[postid]", ["q-5f8cb5e5.js", "q-951ae25c.js"]],
  [/^\/profile\/([^/]+?)\/?$/, [Layout, ProfileProidLayoutprofile, () => ProfileProidIndexprofile], ["proid"], "/profile/[proid]", ["q-5f8cb5e5.js", "q-bfee0927.js", "q-32f32933.js"]]
];
const menus = [];
const trailingSlash = false;
const basePathname = "/";
const cacheModules = true;
const _qwikCityPlan = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  routes,
  menus,
  trailingSlash,
  basePathname,
  cacheModules
}, Symbol.toStringTag, { value: "Module" }));
var HEADERS = Symbol("headers");
var _a;
var HeadersPolyfill = class {
  constructor() {
    this[_a] = {};
  }
  [(_a = HEADERS, Symbol.iterator)]() {
    return this.entries();
  }
  *keys() {
    for (const name2 of Object.keys(this[HEADERS])) {
      yield name2;
    }
  }
  *values() {
    for (const value of Object.values(this[HEADERS])) {
      yield value;
    }
  }
  *entries() {
    for (const name2 of Object.keys(this[HEADERS])) {
      yield [name2, this.get(name2)];
    }
  }
  get(name2) {
    return this[HEADERS][normalizeHeaderName(name2)] || null;
  }
  set(name2, value) {
    const normalizedName = normalizeHeaderName(name2);
    this[HEADERS][normalizedName] = typeof value !== "string" ? String(value) : value;
  }
  append(name2, value) {
    const normalizedName = normalizeHeaderName(name2);
    const resolvedValue = this.has(normalizedName) ? `${this.get(normalizedName)}, ${value}` : value;
    this.set(name2, resolvedValue);
  }
  delete(name2) {
    if (!this.has(name2)) {
      return;
    }
    const normalizedName = normalizeHeaderName(name2);
    delete this[HEADERS][normalizedName];
  }
  all() {
    return this[HEADERS];
  }
  has(name2) {
    return this[HEADERS].hasOwnProperty(normalizeHeaderName(name2));
  }
  forEach(callback, thisArg) {
    for (const name2 in this[HEADERS]) {
      if (this[HEADERS].hasOwnProperty(name2)) {
        callback.call(thisArg, this[HEADERS][name2], name2, this);
      }
    }
  }
};
var HEADERS_INVALID_CHARACTERS = /[^a-z0-9\-#$%&'*+.^_`|~]/i;
function normalizeHeaderName(name2) {
  if (typeof name2 !== "string") {
    name2 = String(name2);
  }
  if (HEADERS_INVALID_CHARACTERS.test(name2) || name2.trim() === "") {
    throw new TypeError("Invalid character in header field name");
  }
  return name2.toLowerCase();
}
function createHeaders() {
  return new (typeof Headers === "function" ? Headers : HeadersPolyfill)();
}
var ErrorResponse = class extends Error {
  constructor(status, message) {
    super(message);
    this.status = status;
  }
};
function notFoundHandler(requestCtx) {
  return errorResponse(requestCtx, new ErrorResponse(404, "Not Found"));
}
function errorHandler(requestCtx, e) {
  const status = 500;
  let message = "Server Error";
  let stack = void 0;
  if (e != null) {
    if (typeof e === "object") {
      if (typeof e.message === "string") {
        message = e.message;
      }
      if (e.stack != null) {
        stack = String(e.stack);
      }
    } else {
      message = String(e);
    }
  }
  const html = minimalHtmlResponse(status, message, stack);
  const headers = createHeaders();
  headers.set("Content-Type", "text/html; charset=utf-8");
  return requestCtx.response(
    status,
    headers,
    async (stream2) => {
      stream2.write(html);
    },
    e
  );
}
function errorResponse(requestCtx, errorResponse2) {
  const html = minimalHtmlResponse(
    errorResponse2.status,
    errorResponse2.message,
    errorResponse2.stack
  );
  const headers = createHeaders();
  headers.set("Content-Type", "text/html; charset=utf-8");
  return requestCtx.response(
    errorResponse2.status,
    headers,
    async (stream2) => {
      stream2.write(html);
    },
    errorResponse2
  );
}
function minimalHtmlResponse(status, message, stack) {
  const width = typeof message === "string" ? "600px" : "300px";
  const color = status >= 500 ? COLOR_500 : COLOR_400;
  if (status < 500) {
    stack = "";
  }
  return `<!DOCTYPE html>
<html data-qwik-city-status="${status}">
<head>
  <meta charset="utf-8">
  <title>${status} ${message}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
    body { color: ${color}; background-color: #fafafa; padding: 30px; font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Roboto, sans-serif; }
    p { max-width: ${width}; margin: 60px auto 30px auto; background: white; border-radius: 4px; box-shadow: 0px 0px 50px -20px ${color}; overflow: hidden; }
    strong { display: inline-block; padding: 15px; background: ${color}; color: white; }
    span { display: inline-block; padding: 15px; }
    pre { max-width: 580px; margin: 0 auto; }
  </style>
</head>
<body>
  <p>
    <strong>${status}</strong>
    <span>${message}</span>
  </p>
  ${stack ? `<pre><code>${stack}</code></pre>` : ``}
</body>
</html>
`;
}
var COLOR_400 = "#006ce9";
var COLOR_500 = "#713fc2";
var MODULE_CACHE = /* @__PURE__ */ new WeakMap();
var loadRoute = async (routes2, menus2, cacheModules2, pathname) => {
  if (Array.isArray(routes2)) {
    for (const route of routes2) {
      const match = route[0].exec(pathname);
      if (match) {
        const loaders = route[1];
        const params = getRouteParams(route[2], match);
        const routeBundleNames = route[4];
        const mods = new Array(loaders.length);
        const pendingLoads = [];
        const menuLoader = getMenuLoader(menus2, pathname);
        let menu = void 0;
        loaders.forEach((moduleLoader, i) => {
          loadModule(
            moduleLoader,
            pendingLoads,
            (routeModule) => mods[i] = routeModule,
            cacheModules2
          );
        });
        loadModule(
          menuLoader,
          pendingLoads,
          (menuModule) => menu = menuModule == null ? void 0 : menuModule.default,
          cacheModules2
        );
        if (pendingLoads.length > 0) {
          await Promise.all(pendingLoads);
        }
        return [params, mods, menu, routeBundleNames];
      }
    }
  }
  return null;
};
var loadModule = (moduleLoader, pendingLoads, moduleSetter, cacheModules2) => {
  if (typeof moduleLoader === "function") {
    const loadedModule = MODULE_CACHE.get(moduleLoader);
    if (loadedModule) {
      moduleSetter(loadedModule);
    } else {
      const l = moduleLoader();
      if (typeof l.then === "function") {
        pendingLoads.push(
          l.then((loadedModule2) => {
            if (cacheModules2 !== false) {
              MODULE_CACHE.set(moduleLoader, loadedModule2);
            }
            moduleSetter(loadedModule2);
          })
        );
      } else if (l) {
        moduleSetter(l);
      }
    }
  }
};
var getMenuLoader = (menus2, pathname) => {
  if (menus2) {
    const menu = menus2.find(
      (m) => m[0] === pathname || pathname.startsWith(m[0] + (pathname.endsWith("/") ? "" : "/"))
    );
    if (menu) {
      return menu[1];
    }
  }
  return void 0;
};
var getRouteParams = (paramNames, match) => {
  const params = {};
  if (paramNames) {
    for (let i = 0; i < paramNames.length; i++) {
      params[paramNames[i]] = match ? match[i + 1] : "";
    }
  }
  return params;
};
var RedirectResponse = class {
  constructor(url, status, headers) {
    this.url = url;
    this.location = url;
    this.status = isRedirectStatus(status) ? status : 307;
    this.headers = headers || createHeaders();
    this.headers.set("Location", this.location);
    this.headers.delete("Cache-Control");
  }
};
function redirectResponse(requestCtx, responseRedirect) {
  return requestCtx.response(responseRedirect.status, responseRedirect.headers, async () => {
  });
}
function isRedirectStatus(status) {
  return typeof status === "number" && status >= 301 && status <= 308;
}
async function loadUserResponse(requestCtx, params, routeModules, platform, trailingSlash2, basePathname2 = "/") {
  if (routeModules.length === 0) {
    throw new ErrorResponse(404, `Not Found`);
  }
  const { request: request2, url } = requestCtx;
  const { pathname } = url;
  const isPageModule = isLastModulePageRoute(routeModules);
  const isPageDataRequest = isPageModule && request2.headers.get("Accept") === "application/json";
  const type = isPageDataRequest ? "pagedata" : isPageModule ? "pagehtml" : "endpoint";
  const userResponse = {
    type,
    url,
    params,
    status: 200,
    headers: createHeaders(),
    resolvedBody: void 0,
    pendingBody: void 0,
    aborted: false
  };
  let hasRequestMethodHandler = false;
  if (isPageModule && pathname !== basePathname2) {
    if (trailingSlash2) {
      if (!pathname.endsWith("/")) {
        throw new RedirectResponse(pathname + "/" + url.search, 307);
      }
    } else {
      if (pathname.endsWith("/")) {
        throw new RedirectResponse(
          pathname.slice(0, pathname.length - 1) + url.search,
          307
        );
      }
    }
  }
  let routeModuleIndex = -1;
  const abort = () => {
    routeModuleIndex = ABORT_INDEX;
  };
  const redirect = (url2, status) => {
    return new RedirectResponse(url2, status, userResponse.headers);
  };
  const error = (status, message) => {
    return new ErrorResponse(status, message);
  };
  const next = async () => {
    routeModuleIndex++;
    while (routeModuleIndex < routeModules.length) {
      const endpointModule = routeModules[routeModuleIndex];
      let reqHandler = void 0;
      switch (request2.method) {
        case "GET": {
          reqHandler = endpointModule.onGet;
          break;
        }
        case "POST": {
          reqHandler = endpointModule.onPost;
          break;
        }
        case "PUT": {
          reqHandler = endpointModule.onPut;
          break;
        }
        case "PATCH": {
          reqHandler = endpointModule.onPatch;
          break;
        }
        case "OPTIONS": {
          reqHandler = endpointModule.onOptions;
          break;
        }
        case "HEAD": {
          reqHandler = endpointModule.onHead;
          break;
        }
        case "DELETE": {
          reqHandler = endpointModule.onDelete;
          break;
        }
      }
      reqHandler = reqHandler || endpointModule.onRequest;
      if (typeof reqHandler === "function") {
        hasRequestMethodHandler = true;
        const response2 = {
          get status() {
            return userResponse.status;
          },
          set status(code) {
            userResponse.status = code;
          },
          get headers() {
            return userResponse.headers;
          },
          redirect,
          error
        };
        const requestEv = {
          request: request2,
          url: new URL(url),
          params: { ...params },
          response: response2,
          platform,
          next,
          abort
        };
        const syncData = reqHandler(requestEv);
        if (typeof syncData === "function") {
          userResponse.pendingBody = createPendingBody(syncData);
        } else if (syncData !== null && typeof syncData === "object" && typeof syncData.then === "function") {
          const asyncResolved = await syncData;
          if (typeof asyncResolved === "function") {
            userResponse.pendingBody = createPendingBody(asyncResolved);
          } else {
            userResponse.resolvedBody = asyncResolved;
          }
        } else {
          userResponse.resolvedBody = syncData;
        }
      }
      routeModuleIndex++;
    }
  };
  await next();
  userResponse.aborted = routeModuleIndex >= ABORT_INDEX;
  if (!isPageDataRequest && isRedirectStatus(userResponse.status) && userResponse.headers.has("Location")) {
    throw new RedirectResponse(
      userResponse.headers.get("Location"),
      userResponse.status,
      userResponse.headers
    );
  }
  if (type === "endpoint" && !hasRequestMethodHandler) {
    throw new ErrorResponse(405, `Method Not Allowed`);
  }
  return userResponse;
}
function createPendingBody(cb) {
  return new Promise((resolve, reject) => {
    try {
      const rtn = cb();
      if (rtn !== null && typeof rtn === "object" && typeof rtn.then === "function") {
        rtn.then(resolve, reject);
      } else {
        resolve(rtn);
      }
    } catch (e) {
      reject(e);
    }
  });
}
function isLastModulePageRoute(routeModules) {
  const lastRouteModule = routeModules[routeModules.length - 1];
  return lastRouteModule && typeof lastRouteModule.default === "function";
}
function updateRequestCtx(requestCtx, trailingSlash2) {
  let pathname = requestCtx.url.pathname;
  if (pathname.endsWith(QDATA_JSON)) {
    requestCtx.request.headers.set("Accept", "application/json");
    const trimEnd = pathname.length - QDATA_JSON_LEN + (trailingSlash2 ? 1 : 0);
    pathname = pathname.slice(0, trimEnd);
    if (pathname === "") {
      pathname = "/";
    }
    requestCtx.url.pathname = pathname;
  }
}
var QDATA_JSON = "/q-data.json";
var QDATA_JSON_LEN = QDATA_JSON.length;
var ABORT_INDEX = 999999999;
function endpointHandler(requestCtx, userResponse) {
  const { pendingBody, resolvedBody, status, headers } = userResponse;
  const { response: response2 } = requestCtx;
  if (pendingBody === void 0 && resolvedBody === void 0) {
    return response2(status, headers, asyncNoop);
  }
  if (!headers.has("Content-Type")) {
    headers.set("Content-Type", "application/json; charset=utf-8");
  }
  const isJson = headers.get("Content-Type").includes("json");
  return response2(status, headers, async ({ write }) => {
    const body = pendingBody !== void 0 ? await pendingBody : resolvedBody;
    if (body !== void 0) {
      if (isJson) {
        write(JSON.stringify(body));
      } else {
        const type = typeof body;
        if (type === "string") {
          write(body);
        } else if (type === "number" || type === "boolean") {
          write(String(body));
        } else {
          write(body);
        }
      }
    }
  });
}
var asyncNoop = async () => {
};
function pageHandler(requestCtx, userResponse, render2, opts, routeBundleNames) {
  const { status, headers } = userResponse;
  const { response: response2 } = requestCtx;
  const isPageData = userResponse.type === "pagedata";
  if (isPageData) {
    headers.set("Content-Type", "application/json; charset=utf-8");
  } else if (!headers.has("Content-Type")) {
    headers.set("Content-Type", "text/html; charset=utf-8");
  }
  return response2(isPageData ? 200 : status, headers, async (stream2) => {
    const result = await render2({
      stream: isPageData ? noopStream : stream2,
      envData: getQwikCityEnvData(userResponse),
      ...opts
    });
    if (isPageData) {
      stream2.write(JSON.stringify(await getClientPageData(userResponse, result, routeBundleNames)));
    } else {
      if ((typeof result).html === "string") {
        stream2.write(result.html);
      }
    }
    if (typeof stream2.clientData === "function") {
      stream2.clientData(await getClientPageData(userResponse, result, routeBundleNames));
    }
  });
}
async function getClientPageData(userResponse, result, routeBundleNames) {
  const prefetchBundleNames = getPrefetchBundleNames(result, routeBundleNames);
  const clientPage = {
    body: userResponse.pendingBody ? await userResponse.pendingBody : userResponse.resolvedBody,
    status: userResponse.status !== 200 ? userResponse.status : void 0,
    redirect: userResponse.status >= 301 && userResponse.status <= 308 && userResponse.headers.get("location") || void 0,
    prefetch: prefetchBundleNames.length > 0 ? prefetchBundleNames : void 0
  };
  return clientPage;
}
function getPrefetchBundleNames(result, routeBundleNames) {
  const bundleNames = [];
  const addBundle2 = (bundleName) => {
    if (bundleName && !bundleNames.includes(bundleName)) {
      bundleNames.push(bundleName);
    }
  };
  const addPrefetchResource = (prefetchResources) => {
    if (Array.isArray(prefetchResources)) {
      for (const prefetchResource of prefetchResources) {
        const bundleName = prefetchResource.url.split("/").pop();
        if (bundleName && !bundleNames.includes(bundleName)) {
          addBundle2(bundleName);
          addPrefetchResource(prefetchResource.imports);
        }
      }
    }
  };
  addPrefetchResource(result.prefetchResources);
  const manifest2 = result.manifest || result._manifest;
  const renderedSymbols = result._symbols;
  if (manifest2 && renderedSymbols) {
    for (const renderedSymbolName of renderedSymbols) {
      const symbol = manifest2.symbols[renderedSymbolName];
      if (symbol && symbol.ctxName === "component$") {
        addBundle2(manifest2.mapping[renderedSymbolName]);
      }
    }
  }
  if (routeBundleNames) {
    for (const routeBundleName of routeBundleNames) {
      addBundle2(routeBundleName);
    }
  }
  return bundleNames;
}
function getQwikCityEnvData(userResponse) {
  const { url, params, pendingBody, resolvedBody, status } = userResponse;
  return {
    url: url.href,
    qwikcity: {
      params: { ...params },
      response: {
        body: pendingBody || resolvedBody,
        status
      }
    }
  };
}
var noopStream = { write: () => {
} };
async function requestHandler(requestCtx, render2, platform, opts) {
  try {
    updateRequestCtx(requestCtx, trailingSlash);
    const loadedRoute = await loadRoute(routes, menus, cacheModules, requestCtx.url.pathname);
    if (loadedRoute) {
      const [params, mods, _, routeBundleNames] = loadedRoute;
      const userResponse = await loadUserResponse(
        requestCtx,
        params,
        mods,
        platform,
        trailingSlash,
        basePathname
      );
      if (userResponse.aborted) {
        return null;
      }
      if (userResponse.type === "endpoint") {
        return endpointHandler(requestCtx, userResponse);
      }
      return pageHandler(requestCtx, userResponse, render2, opts, routeBundleNames);
    }
  } catch (e) {
    if (e instanceof RedirectResponse) {
      return redirectResponse(requestCtx, e);
    }
    if (e instanceof ErrorResponse) {
      return errorResponse(requestCtx, e);
    }
    return errorHandler(requestCtx, e);
  }
  return null;
}
function qwikCity(render2, opts) {
  async function onRequest(request2, { next }) {
    try {
      const requestCtx = {
        url: new URL(request2.url),
        request: request2,
        response: (status, headers, body) => {
          return new Promise((resolve) => {
            let flushedHeaders = false;
            const { readable, writable } = new TransformStream();
            const writer = writable.getWriter();
            const response2 = new Response(readable, { status, headers });
            body({
              write: (chunk) => {
                if (!flushedHeaders) {
                  flushedHeaders = true;
                  resolve(response2);
                }
                if (typeof chunk === "string") {
                  const encoder = new TextEncoder();
                  writer.write(encoder.encode(chunk));
                } else {
                  writer.write(chunk);
                }
              }
            }).finally(() => {
              if (!flushedHeaders) {
                flushedHeaders = true;
                resolve(response2);
              }
              writer.close();
            });
          });
        }
      };
      const handledResponse = await requestHandler(requestCtx, render2, {}, opts);
      if (handledResponse) {
        return handledResponse;
      }
      const nextResponse = await next();
      if (nextResponse.status === 404) {
        const handledResponse2 = await requestHandler(requestCtx, render2, {}, opts);
        if (handledResponse2) {
          return handledResponse2;
        }
        const notFoundResponse = await notFoundHandler(requestCtx);
        return notFoundResponse;
      }
      return nextResponse;
    } catch (e) {
      return new Response(String(e || "Error"), {
        status: 500,
        headers: { "Content-Type": "text/plain; charset=utf-8" }
      });
    }
  }
  return onRequest;
}
const manifest = { "symbols": { "s_PeDTn2z80A4": { "origin": "components/post/post.tsx", "displayName": "Post_component__Fragment_div_div_div_h1_onClick", "canonicalFilename": "s_pedtn2z80a4", "hash": "PeDTn2z80A4", "ctxKind": "event", "ctxName": "onClick$", "captures": true, "parent": "s_bSNo02BOSeo" }, "s_S297dGnBt5Y": { "origin": "routes/layout-index.tsx", "displayName": "layout_index_component_div_div_button_onClick", "canonicalFilename": "s_s297dgnbt5y", "hash": "S297dGnBt5Y", "ctxKind": "event", "ctxName": "onClick$", "captures": true, "parent": "s_NcbFhH0Rq0M" }, "s_TlrTEIpSGyw": { "origin": "routes/index@index.tsx", "displayName": "index_index_component__Fragment_div_div_onClick", "canonicalFilename": "s_tlrteipsgyw", "hash": "TlrTEIpSGyw", "ctxKind": "event", "ctxName": "onClick$", "captures": true, "parent": "s_0e3es3vnWuk" }, "s_XNGMswvYDoU": { "origin": "routes/layout-index.tsx", "displayName": "layout_index_component_div_main_div_div_StoriesView_onClick", "canonicalFilename": "s_xngmswvydou", "hash": "XNGMswvYDoU", "ctxKind": "event", "ctxName": "onClick$", "captures": false, "parent": "s_NcbFhH0Rq0M" }, "s_hA9UPaY8sNQ": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "Link_component_a_onClick", "canonicalFilename": "s_ha9upay8snq", "hash": "hA9UPaY8sNQ", "ctxKind": "event", "ctxName": "onClick$", "captures": true, "parent": "s_mYsiJcA4IBc" }, "s_p8802htc8lU": { "origin": "routes/index@index.tsx", "displayName": "index_index_component__Fragment_div_div_div_div_button_onClick", "canonicalFilename": "s_p8802htc8lu", "hash": "p8802htc8lU", "ctxKind": "event", "ctxName": "onClick$", "captures": true, "parent": "s_0e3es3vnWuk" }, "s_t8Q6Qpbu0pE": { "origin": "routes/index@index.tsx", "displayName": "index_index_component__Fragment_div_button_onClick", "canonicalFilename": "s_t8q6qpbu0pe", "hash": "t8Q6Qpbu0pE", "ctxKind": "event", "ctxName": "onClick$", "captures": true, "parent": "s_0e3es3vnWuk" }, "s_skxgNVWVOT8": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "Link_component_a_onMouseOver", "canonicalFilename": "s_skxgnvwvot8", "hash": "skxgNVWVOT8", "ctxKind": "event", "ctxName": "onMouseOver$", "captures": false, "parent": "s_mYsiJcA4IBc" }, "s_uVE5iM9H73c": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "Link_component_a_onQVisible", "canonicalFilename": "s_uve5im9h73c", "hash": "uVE5iM9H73c", "ctxKind": "event", "ctxName": "onQVisible$", "captures": false, "parent": "s_mYsiJcA4IBc" }, "s_AaAlzKH0KlQ": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "QwikCity_component_useWatch", "canonicalFilename": "s_aaalzkh0klq", "hash": "AaAlzKH0KlQ", "ctxKind": "function", "ctxName": "useWatch$", "captures": true, "parent": "s_z1nvHyEppoI" }, "s_06hTRPZlBNE": { "origin": "root.tsx", "displayName": "root_component", "canonicalFilename": "s_06htrpzlbne", "hash": "06hTRPZlBNE", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_0e3es3vnWuk": { "origin": "routes/index@index.tsx", "displayName": "index_index_component", "canonicalFilename": "s_0e3es3vnwuk", "hash": "0e3es3vnWuk", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_26hfKJ9I4hk": { "origin": "routes/profile/[proid]/index@profile.tsx", "displayName": "index_profile_component", "canonicalFilename": "s_26hfkj9i4hk", "hash": "26hfKJ9I4hk", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_BtnGjf3PdHw": { "origin": "components/sidebar/sidebar.tsx", "displayName": "Sidebar_component", "canonicalFilename": "s_btngjf3pdhw", "hash": "BtnGjf3PdHw", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_EzDrC20gQ30": { "origin": "routes/settings/index@settings.tsx", "displayName": "index_settings_component", "canonicalFilename": "s_ezdrc20gq30", "hash": "EzDrC20gQ30", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_NcbFhH0Rq0M": { "origin": "routes/layout-index.tsx", "displayName": "layout_index_component", "canonicalFilename": "s_ncbfhh0rq0m", "hash": "NcbFhH0Rq0M", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_Xo5tmaGPZOs": { "origin": "routes/posts/[postid]/index.tsx", "displayName": "_postid__component", "canonicalFilename": "s_xo5tmagpzos", "hash": "Xo5tmaGPZOs", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_aeoMBoP047Y": { "origin": "routes/profile/[proid]/layout-profile.tsx", "displayName": "layout_profile_component", "canonicalFilename": "s_aeombop047y", "hash": "aeoMBoP047Y", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_bSNo02BOSeo": { "origin": "components/post/post.tsx", "displayName": "Post_component", "canonicalFilename": "s_bsno02boseo", "hash": "bSNo02BOSeo", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_gm3f0H6v3fA": { "origin": "components/header/header.tsx", "displayName": "Header_component", "canonicalFilename": "s_gm3f0h6v3fa", "hash": "gm3f0H6v3fA", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_iYmIWuy4aaw": { "origin": "routes/search/index.tsx", "displayName": "search_component", "canonicalFilename": "s_iymiwuy4aaw", "hash": "iYmIWuy4aaw", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_j5h3enAr0HE": { "origin": "routes/clips/index.tsx", "displayName": "clips_component", "canonicalFilename": "s_j5h3enar0he", "hash": "j5h3enAr0HE", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_mYsiJcA4IBc": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "Link_component", "canonicalFilename": "s_mysijca4ibc", "hash": "mYsiJcA4IBc", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_n0b0sGHmkUY": { "origin": "routes/favs/index.tsx", "displayName": "favs_component", "canonicalFilename": "s_n0b0sghmkuy", "hash": "n0b0sGHmkUY", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_nd8yk3KO22c": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "RouterOutlet_component", "canonicalFilename": "s_nd8yk3ko22c", "hash": "nd8yk3KO22c", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_r5Cgk9gmzNI": { "origin": "routes/settings/layout-settings.tsx", "displayName": "layout_settings_component", "canonicalFilename": "s_r5cgk9gmzni", "hash": "r5Cgk9gmzNI", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_uaqIf5ac0DY": { "origin": "routes/vids/index.tsx", "displayName": "vids_component", "canonicalFilename": "s_uaqif5ac0dy", "hash": "uaqIf5ac0DY", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_uwWhp2E5O4I": { "origin": "components/menu/menu.tsx", "displayName": "Menu_component", "canonicalFilename": "s_uwwhp2e5o4i", "hash": "uwWhp2E5O4I", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_yM0L9NCDGUk": { "origin": "routes/layout.tsx", "displayName": "layout_component", "canonicalFilename": "s_ym0l9ncdguk", "hash": "yM0L9NCDGUk", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_z1nvHyEppoI": { "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs", "displayName": "QwikCity_component", "canonicalFilename": "s_z1nvhyeppoi", "hash": "z1nvHyEppoI", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_zc8ICUneHHo": { "origin": "routes/settings/menu.tsx", "displayName": "Menu_component", "canonicalFilename": "s_zc8icunehho", "hash": "zc8ICUneHHo", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_zgN7XgNXC7Q": { "origin": "components/head/head.tsx", "displayName": "Head_component", "canonicalFilename": "s_zgn7xgnxc7q", "hash": "zgN7XgNXC7Q", "ctxKind": "function", "ctxName": "component$", "captures": false }, "s_WZUT0oi3I0A": { "origin": "root.tsx", "displayName": "root_component_useStyles", "canonicalFilename": "s_wzut0oi3i0a", "hash": "WZUT0oi3I0A", "ctxKind": "function", "ctxName": "useStyles$", "captures": false, "parent": "s_06hTRPZlBNE" }, "s_niYypBfXQrk": { "origin": "routes/layout-index.tsx", "displayName": "layout_index_component_signIn", "canonicalFilename": "s_niyypbfxqrk", "hash": "niYypBfXQrk", "ctxKind": "function", "ctxName": "$", "captures": false, "parent": "s_NcbFhH0Rq0M" } }, "mapping": { "s_PeDTn2z80A4": "q-177415d3.js", "s_S297dGnBt5Y": "q-1a38e735.js", "s_TlrTEIpSGyw": "q-6b4948c8.js", "s_XNGMswvYDoU": "q-1a38e735.js", "s_hA9UPaY8sNQ": "q-66575c8b.js", "s_p8802htc8lU": "q-6b4948c8.js", "s_t8Q6Qpbu0pE": "q-6b4948c8.js", "s_skxgNVWVOT8": "q-66575c8b.js", "s_uVE5iM9H73c": "q-66575c8b.js", "s_AaAlzKH0KlQ": "q-54d700f0.js", "s_06hTRPZlBNE": "q-429563bd.js", "s_0e3es3vnWuk": "q-6b4948c8.js", "s_26hfKJ9I4hk": "q-f7f14e87.js", "s_BtnGjf3PdHw": "q-798c52f2.js", "s_EzDrC20gQ30": "q-c638e381.js", "s_NcbFhH0Rq0M": "q-1a38e735.js", "s_Xo5tmaGPZOs": "q-46714385.js", "s_aeoMBoP047Y": "q-a3a7d7d1.js", "s_bSNo02BOSeo": "q-177415d3.js", "s_gm3f0H6v3fA": "q-269604f2.js", "s_iYmIWuy4aaw": "q-475403db.js", "s_j5h3enAr0HE": "q-a997f127.js", "s_mYsiJcA4IBc": "q-66575c8b.js", "s_n0b0sGHmkUY": "q-2ddeb393.js", "s_nd8yk3KO22c": "q-0f37aecd.js", "s_r5Cgk9gmzNI": "q-1fed7deb.js", "s_uaqIf5ac0DY": "q-8f9865c0.js", "s_uwWhp2E5O4I": "q-81659d79.js", "s_yM0L9NCDGUk": "q-021b1f94.js", "s_z1nvHyEppoI": "q-54d700f0.js", "s_zc8ICUneHHo": "q-81659d79.js", "s_zgN7XgNXC7Q": "q-f4939980.js", "s_WZUT0oi3I0A": "q-429563bd.js", "s_niYypBfXQrk": "q-1a38e735.js" }, "bundles": { "q-021b1f94.js": { "size": 287, "imports": ["q-a5b462ef.js", "q-cbd81b46.js"], "origins": ["src/entry_layout.js", "src/s_ym0l9ncdguk.js"], "symbols": ["s_yM0L9NCDGUk"] }, "q-0dcbcb73.js": { "size": 58, "imports": ["q-a5b462ef.js"] }, "q-0f37aecd.js": { "size": 269, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry_RouterOutlet.js", "src/s_nd8yk3ko22c.js"], "symbols": ["s_nd8yk3KO22c"] }, "q-177415d3.js": { "size": 1847, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_Post.js", "src/s_bsno02boseo.js", "src/s_pedtn2z80a4.js"], "symbols": ["s_bSNo02BOSeo", "s_PeDTn2z80A4"] }, "q-1a38e735.js": { "size": 103999, "imports": ["q-a5b462ef.js", "q-cbd81b46.js"], "dynamicImports": ["q-69686143.js"], "origins": ["\0/home/arch/evoltnew/node_modules/cross-fetch/dist/browser-ponyfill.js?commonjs-module", "\0commonjsHelpers.js", "node_modules/@supabase/functions-js/dist/module/FunctionsClient.js", "node_modules/@supabase/functions-js/dist/module/helper.js", "node_modules/@supabase/functions-js/dist/module/types.js", "node_modules/@supabase/gotrue-js/dist/module/GoTrueAdminApi.js", "node_modules/@supabase/gotrue-js/dist/module/GoTrueClient.js", "node_modules/@supabase/gotrue-js/dist/module/lib/constants.js", "node_modules/@supabase/gotrue-js/dist/module/lib/errors.js", "node_modules/@supabase/gotrue-js/dist/module/lib/fetch.js", "node_modules/@supabase/gotrue-js/dist/module/lib/helpers.js", "node_modules/@supabase/gotrue-js/dist/module/lib/local-storage.js", "node_modules/@supabase/gotrue-js/dist/module/lib/locks.js", "node_modules/@supabase/gotrue-js/dist/module/lib/polyfills.js", "node_modules/@supabase/gotrue-js/dist/module/lib/version.js", "node_modules/@supabase/postgrest-js/dist/module/PostgrestBuilder.js", "node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js", "node_modules/@supabase/postgrest-js/dist/module/PostgrestFilterBuilder.js", "node_modules/@supabase/postgrest-js/dist/module/PostgrestQueryBuilder.js", "node_modules/@supabase/postgrest-js/dist/module/PostgrestTransformBuilder.js", "node_modules/@supabase/postgrest-js/dist/module/constants.js", "node_modules/@supabase/postgrest-js/dist/module/version.js", "node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js", "node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js", "node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js", "node_modules/@supabase/realtime-js/dist/module/lib/constants.js", "node_modules/@supabase/realtime-js/dist/module/lib/push.js", "node_modules/@supabase/realtime-js/dist/module/lib/serializer.js", "node_modules/@supabase/realtime-js/dist/module/lib/timer.js", "node_modules/@supabase/realtime-js/dist/module/lib/transformers.js", "node_modules/@supabase/realtime-js/dist/module/lib/version.js", "node_modules/@supabase/storage-js/dist/module/StorageClient.js", "node_modules/@supabase/storage-js/dist/module/lib/constants.js", "node_modules/@supabase/storage-js/dist/module/lib/errors.js", "node_modules/@supabase/storage-js/dist/module/lib/fetch.js", "node_modules/@supabase/storage-js/dist/module/lib/helpers.js", "node_modules/@supabase/storage-js/dist/module/lib/version.js", "node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js", "node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js", "node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js", "node_modules/@supabase/supabase-js/dist/module/index.js", "node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js", "node_modules/@supabase/supabase-js/dist/module/lib/constants.js", "node_modules/@supabase/supabase-js/dist/module/lib/fetch.js", "node_modules/@supabase/supabase-js/dist/module/lib/helpers.js", "node_modules/@supabase/supabase-js/dist/module/lib/version.js", "node_modules/cross-fetch/dist/browser-ponyfill.js", "node_modules/es5-ext/global.js", "node_modules/websocket/lib/browser.js", "node_modules/websocket/lib/version.js", "node_modules/websocket/package.json", "src/components/stories/stories.js", "src/entry_layout_index.js", "src/s_ncbfhh0rq0m.js", "src/s_niyypbfxqrk.js", "src/s_s297dgnbt5y.js", "src/s_xngmswvydou.js", "src/services/supabase.js"], "symbols": ["s_NcbFhH0Rq0M", "s_niYypBfXQrk", "s_S297dGnBt5Y", "s_XNGMswvYDoU"] }, "q-1fbe7205.js": { "size": 187, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-475403db.js"], "origins": ["src/routes/search/index.js"] }, "q-1fed7deb.js": { "size": 364, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-81659d79.js"], "origins": ["src/entry_layout_settings.js", "src/routes/settings/menu.js", "src/s_r5cgk9gmzni.js"], "symbols": ["s_r5Cgk9gmzNI"] }, "q-269604f2.js": { "size": 104, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_Header.js", "src/s_gm3f0h6v3fa.js"], "symbols": ["s_gm3f0H6v3fA"] }, "q-28c5abbe.js": { "size": 1038, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-1fbe7205.js", "q-29bd23b5.js", "q-32f32933.js", "q-5a1cb357.js", "q-5f8cb5e5.js", "q-8eb787f6.js", "q-916fd827.js", "q-951ae25c.js", "q-b114a70d.js", "q-bfee0927.js", "q-d3bc96f3.js", "q-e64507a0.js"], "origins": ["@qwik-city-plan"] }, "q-29bd23b5.js": { "size": 185, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-6b4948c8.js"], "origins": ["src/routes/index@index.js"] }, "q-2ddeb393.js": { "size": 128, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_favs.js", "src/s_n0b0sghmkuy.js"], "symbols": ["s_n0b0sGHmkUY"] }, "q-32f32933.js": { "size": 712, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-f7f14e87.js"], "origins": ["src/routes/profile/[proid]/index@profile.js"] }, "q-429563bd.js": { "size": 34399, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-0f37aecd.js", "q-28c5abbe.js", "q-54d700f0.js", "q-66575c8b.js", "q-f4939980.js"], "origins": ["node_modules/@builder.io/qwik-city/index.qwik.mjs", "src/components/head/head.js", "src/entry_root.js", "src/modern.css?used", "src/s_06htrpzlbne.js", "src/s_wzut0oi3i0a.js"], "symbols": ["s_06hTRPZlBNE", "s_WZUT0oi3I0A"] }, "q-46714385.js": { "size": 1661, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry__postid_.js", "src/s_xo5tmagpzos.js"], "symbols": ["s_Xo5tmaGPZOs"] }, "q-475403db.js": { "size": 128, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_search.js", "src/s_iymiwuy4aaw.js"], "symbols": ["s_iYmIWuy4aaw"] }, "q-54d700f0.js": { "size": 1489, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "dynamicImports": ["q-28c5abbe.js"], "origins": ["@builder.io/qwik/build", "src/entry_QwikCity.js", "src/s_aaalzkh0klq.js", "src/s_z1nvhyeppoi.js"], "symbols": ["s_AaAlzKH0KlQ", "s_z1nvHyEppoI"] }, "q-5a1cb357.js": { "size": 153, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-1fed7deb.js"], "origins": ["src/routes/settings/layout-settings.js"] }, "q-5f8cb5e5.js": { "size": 158, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-021b1f94.js"], "origins": ["src/routes/layout.js"] }, "q-66575c8b.js": { "size": 891, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry_Link.js", "src/s_ha9upay8snq.js", "src/s_mysijca4ibc.js", "src/s_skxgnvwvot8.js", "src/s_uve5im9h73c.js"], "symbols": ["s_hA9UPaY8sNQ", "s_mYsiJcA4IBc", "s_skxgNVWVOT8", "s_uVE5iM9H73c"] }, "q-69686143.js": { "size": 580365, "imports": ["q-1a38e735.js", "q-a5b462ef.js", "q-cbd81b46.js"], "origins": ["\0/home/arch/evoltnew/node_modules/assert/build/assert.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/assert/build/internal/errors.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/base64-js/index.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/browserify-zlib/lib/binding.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/browserify-zlib/lib/index.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/buffer/index.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/call-bind/index.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/events/events.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/https-browserify/index.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/ieee754/index.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/inherits/inherits_browser.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/pako/lib/utils/common.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/pako/lib/zlib/deflate.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/pako/lib/zlib/inflate.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/pako/lib/zlib/trees.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/punycode/punycode.es6.js?commonjs-proxy", "\0/home/arch/evoltnew/node_modules/stream-browserify/node_modules/readable-stream/errors-browser.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/stream-browserify/node_modules/safe-buffer/index.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/stream-browserify/node_modules/string_decoder/lib/string_decoder.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/stream-http/index.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/stream-http/lib/capability.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/stream-http/lib/request.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/stream-http/lib/response.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/stream-http/node_modules/readable-stream/errors-browser.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/stream-http/node_modules/readable-stream/readable-browser.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/stream-http/node_modules/safe-buffer/index.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/stream-http/node_modules/string_decoder/lib/string_decoder.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/tr46/index.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/url/node_modules/punycode/punycode.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/url/url.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/util/support/types.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/util/util.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/whatwg-url/lib/URL-impl.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/whatwg-url/lib/URL.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/whatwg-url/lib/public-api.js?commonjs-exports", "\0/home/arch/evoltnew/node_modules/whatwg-url/lib/url-state-machine.js?commonjs-module", "\0/home/arch/evoltnew/node_modules/whatwg-url/lib/utils.js?commonjs-module", "\0__vite-browser-external?commonjs-proxy", "__vite-browser-external", "node_modules/@supabase/node-fetch/lib/index.mjs", "node_modules/assert/build/assert.js", "node_modules/assert/build/internal/assert/assertion_error.js", "node_modules/assert/build/internal/errors.js", "node_modules/assert/build/internal/util/comparisons.js", "node_modules/available-typed-arrays/index.js", "node_modules/base64-js/index.js", "node_modules/browserify-zlib/lib/binding.js", "node_modules/browserify-zlib/lib/index.js", "node_modules/buffer/index.js", "node_modules/builtin-status-codes/browser.js", "node_modules/call-bind/callBound.js", "node_modules/call-bind/index.js", "node_modules/define-properties/index.js", "node_modules/define-properties/node_modules/object-keys/implementation.js", "node_modules/define-properties/node_modules/object-keys/index.js", "node_modules/define-properties/node_modules/object-keys/isArguments.js", "node_modules/es6-object-assign/index.js", "node_modules/events/events.js", "node_modules/for-each/index.js", "node_modules/function-bind/implementation.js", "node_modules/function-bind/index.js", "node_modules/get-intrinsic/index.js", "node_modules/gopd/index.js", "node_modules/has-property-descriptors/index.js", "node_modules/has-symbols/index.js", "node_modules/has-symbols/shams.js", "node_modules/has-tostringtag/shams.js", "node_modules/has/src/index.js", "node_modules/https-browserify/index.js", "node_modules/ieee754/index.js", "node_modules/inherits/inherits_browser.js", "node_modules/is-arguments/index.js", "node_modules/is-callable/index.js", "node_modules/is-generator-function/index.js", "node_modules/is-nan/implementation.js", "node_modules/is-nan/index.js", "node_modules/is-nan/polyfill.js", "node_modules/is-nan/shim.js", "node_modules/is-typed-array/index.js", "node_modules/object-inspect/index.js", "node_modules/object-is/implementation.js", "node_modules/object-is/index.js", "node_modules/object-is/polyfill.js", "node_modules/object-is/shim.js", "node_modules/pako/lib/utils/common.js", "node_modules/pako/lib/zlib/adler32.js", "node_modules/pako/lib/zlib/constants.js", "node_modules/pako/lib/zlib/crc32.js", "node_modules/pako/lib/zlib/deflate.js", "node_modules/pako/lib/zlib/inffast.js", "node_modules/pako/lib/zlib/inflate.js", "node_modules/pako/lib/zlib/inftrees.js", "node_modules/pako/lib/zlib/messages.js", "node_modules/pako/lib/zlib/trees.js", "node_modules/pako/lib/zlib/zstream.js", "node_modules/punycode/punycode.es6.js", "node_modules/side-channel/index.js", "node_modules/stream-browserify/index.js", "node_modules/stream-browserify/node_modules/readable-stream/errors-browser.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_passthrough.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_readable.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_transform.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/async_iterator.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/buffer_list.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/destroy.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/end-of-stream.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/from-browser.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/pipeline.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/state.js", "node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/stream-browser.js", "node_modules/stream-browserify/node_modules/safe-buffer/index.js", "node_modules/stream-browserify/node_modules/string_decoder/lib/string_decoder.js", "node_modules/stream-http/index.js", "node_modules/stream-http/lib/capability.js", "node_modules/stream-http/lib/request.js", "node_modules/stream-http/lib/response.js", "node_modules/stream-http/node_modules/readable-stream/errors-browser.js", "node_modules/stream-http/node_modules/readable-stream/lib/_stream_duplex.js", "node_modules/stream-http/node_modules/readable-stream/lib/_stream_passthrough.js", "node_modules/stream-http/node_modules/readable-stream/lib/_stream_readable.js", "node_modules/stream-http/node_modules/readable-stream/lib/_stream_transform.js", "node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/async_iterator.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/buffer_list.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/destroy.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/end-of-stream.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/from-browser.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/pipeline.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/state.js", "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/stream-browser.js", "node_modules/stream-http/node_modules/readable-stream/readable-browser.js", "node_modules/stream-http/node_modules/safe-buffer/index.js", "node_modules/stream-http/node_modules/string_decoder/lib/string_decoder.js", "node_modules/tr46/index.js", "node_modules/tr46/lib/mappingTable.json", "node_modules/url/node_modules/punycode/punycode.js", "node_modules/url/node_modules/qs/lib/formats.js", "node_modules/url/node_modules/qs/lib/index.js", "node_modules/url/node_modules/qs/lib/parse.js", "node_modules/url/node_modules/qs/lib/stringify.js", "node_modules/url/node_modules/qs/lib/utils.js", "node_modules/url/url.js", "node_modules/util-deprecate/browser.js", "node_modules/util/support/isBufferBrowser.js", "node_modules/util/support/types.js", "node_modules/util/util.js", "node_modules/webidl-conversions/lib/index.js", "node_modules/whatwg-url/lib/URL-impl.js", "node_modules/whatwg-url/lib/URL.js", "node_modules/whatwg-url/lib/public-api.js", "node_modules/whatwg-url/lib/url-state-machine.js", "node_modules/whatwg-url/lib/utils.js", "node_modules/which-typed-array/index.js", "node_modules/xtend/immutable.js"] }, "q-6b4948c8.js": { "size": 3050, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-177415d3.js"], "origins": ["src/components/post/post.js", "src/entry_index_index.js", "src/s_0e3es3vnwuk.js", "src/s_p8802htc8lu.js", "src/s_t8q6qpbu0pe.js", "src/s_tlrteipsgyw.js"], "symbols": ["s_0e3es3vnWuk", "s_p8802htc8lU", "s_t8Q6Qpbu0pE", "s_TlrTEIpSGyw"] }, "q-798c52f2.js": { "size": 3511, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_Sidebar.js", "src/s_btngjf3pdhw.js"], "symbols": ["s_BtnGjf3PdHw"] }, "q-81659d79.js": { "size": 5203, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry_Menu.js", "src/s_uwwhp2e5o4i.js", "src/s_zc8icunehho.js"], "symbols": ["s_uwWhp2E5O4I", "s_zc8ICUneHHo"] }, "q-8eb787f6.js": { "size": 185, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-2ddeb393.js"], "origins": ["src/routes/favs/index.js"] }, "q-8f9865c0.js": { "size": 128, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_vids.js", "src/s_uaqif5ac0dy.js"], "symbols": ["s_uaqIf5ac0DY"] }, "q-916fd827.js": { "size": 185, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-8f9865c0.js"], "origins": ["src/routes/vids/index.js"] }, "q-951ae25c.js": { "size": 158, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-46714385.js"], "origins": ["src/routes/posts/[postid]/index.js"] }, "q-a3a7d7d1.js": { "size": 1559, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry_layout_profile.js", "src/s_aeombop047y.js"], "symbols": ["s_aeoMBoP047Y"] }, "q-a5b462ef.js": { "size": 33755, "dynamicImports": ["q-429563bd.js"], "origins": ["\0vite/preload-helper", "node_modules/@builder.io/qwik/core.min.mjs", "src/root.js"] }, "q-a997f127.js": { "size": 128, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_clips.js", "src/s_j5h3enar0he.js"], "symbols": ["s_j5h3enAr0HE"] }, "q-b114a70d.js": { "size": 189, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-c638e381.js"], "origins": ["src/routes/settings/index@settings.js"] }, "q-bfee0927.js": { "size": 714, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-a3a7d7d1.js"], "origins": ["src/routes/profile/[proid]/layout-profile.js"] }, "q-c638e381.js": { "size": 317, "imports": ["q-a5b462ef.js"], "origins": ["src/entry_index_settings.js", "src/s_ezdrc20gq30.js"], "symbols": ["s_EzDrC20gQ30"] }, "q-cbd81b46.js": { "size": 326, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-269604f2.js", "q-798c52f2.js", "q-81659d79.js"], "origins": ["src/components/header/header.js", "src/components/menu/menu.js", "src/components/sidebar/sidebar.js"] }, "q-d3bc96f3.js": { "size": 186, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-a997f127.js"], "origins": ["src/routes/clips/index.js"] }, "q-e64507a0.js": { "size": 171, "imports": ["q-a5b462ef.js"], "dynamicImports": ["q-1a38e735.js"], "origins": ["src/routes/layout-index.js"] }, "q-f4939980.js": { "size": 893, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry_Head.js", "src/s_zgn7xgnxc7q.js"], "symbols": ["s_zgN7XgNXC7Q"] }, "q-f7f14e87.js": { "size": 178, "imports": ["q-429563bd.js", "q-a5b462ef.js"], "origins": ["src/entry_index_profile.js", "src/s_26hfkj9i4hk.js"], "symbols": ["s_26hfKJ9I4hk"] } }, "injections": [{ "tag": "link", "location": "head", "attributes": { "rel": "stylesheet", "href": "/build/q-a62c07cf.css" } }], "version": "1", "options": { "target": "client", "buildMode": "production", "forceFullBuild": true, "entryStrategy": { "type": "smart" } }, "platform": { "qwik": "0.9.0", "vite": "", "rollup": "2.78.1", "env": "node", "os": "linux", "node": "20.3.1" } };
const Head = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  const head2 = useDocumentHead();
  const loc = useLocation();
  return /* @__PURE__ */ jsx("head", {
    children: [
      /* @__PURE__ */ jsx("meta", {
        charSet: "utf-8"
      }),
      /* @__PURE__ */ jsx("title", {
        children: head2.title ? `${head2.title} - Evolt` : `Evolt`
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1.0"
      }),
      /* @__PURE__ */ jsx("link", {
        rel: "canonical",
        href: loc.href
      }),
      /* @__PURE__ */ jsx("link", {
        href: "https://rsms.me/inter/inter.css",
        rel: "stylesheet"
      }),
      /* @__PURE__ */ jsx("script", {
        src: "https://code.iconify.design/2/2.2.1/iconify.min.js"
      }),
      /* @__PURE__ */ jsx("link", {
        rel: "preconnect",
        href: "https://fonts.googleapis.com"
      }),
      /* @__PURE__ */ jsx("link", {
        rel: "preconnect",
        href: "https://fonts.gstatic.com",
        crossOrigin: ""
      }),
      /* @__PURE__ */ jsx("link", {
        href: "https://fonts.googleapis.com/css2?family=Pacifico&display=swap",
        rel: "stylesheet"
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1.0"
      }),
      head2.meta.map((m) => /* @__PURE__ */ jsx("meta", {
        ...m
      })),
      head2.links.map((l) => /* @__PURE__ */ jsx("link", {
        ...l
      }))
    ]
  });
}, "s_zgN7XgNXC7Q"));
const styles = '/*\n! tailwindcss v3.1.8 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.static {\n  position: static;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.sticky {\n  position: sticky;\n}\n.right-10 {\n  right: 2.5rem;\n}\n.bottom-24 {\n  bottom: 6rem;\n}\n.right-0 {\n  right: 0px;\n}\n.top-0 {\n  top: 0px;\n}\n.left-0 {\n  left: 0px;\n}\n.bottom-0 {\n  bottom: 0px;\n}\n.top-\\[9px\\] {\n  top: 9px;\n}\n.m-4 {\n  margin: 1rem;\n}\n.m-1 {\n  margin: 0.25rem;\n}\n.m-3 {\n  margin: 0.75rem;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.my-1 {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n.mx-2 {\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n}\n.mx-5 {\n  margin-left: 1.25rem;\n  margin-right: 1.25rem;\n}\n.my-auto {\n  margin-top: auto;\n  margin-bottom: auto;\n}\n.mx-4 {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n.mx-0 {\n  margin-left: 0px;\n  margin-right: 0px;\n}\n.mx-1 {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n.my-6 {\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n.my-5 {\n  margin-top: 1.25rem;\n  margin-bottom: 1.25rem;\n}\n.ml-auto {\n  margin-left: auto;\n}\n.mt-0 {\n  margin-top: 0px;\n}\n.mb-3 {\n  margin-bottom: 0.75rem;\n}\n.mb-8 {\n  margin-bottom: 2rem;\n}\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n.mr-6 {\n  margin-right: 1.5rem;\n}\n.mr-1 {\n  margin-right: 0.25rem;\n}\n.mr-\\[6px\\] {\n  margin-right: 6px;\n}\n.mb-\\[8px\\] {\n  margin-bottom: 8px;\n}\n.mt-\\[1\\.5px\\] {\n  margin-top: 1.5px;\n}\n.mt-\\[6px\\] {\n  margin-top: 6px;\n}\n.mb-\\[4px\\] {\n  margin-bottom: 4px;\n}\n.mt-1 {\n  margin-top: 0.25rem;\n}\n.mt-6 {\n  margin-top: 1.5rem;\n}\n.ml-1 {\n  margin-left: 0.25rem;\n}\n.mb-1 {\n  margin-bottom: 0.25rem;\n}\n.mt-auto {\n  margin-top: auto;\n}\n.mr-auto {\n  margin-right: auto;\n}\n.mb-0 {\n  margin-bottom: 0px;\n}\n.mt-\\[14px\\] {\n  margin-top: 14px;\n}\n.mb-\\[13px\\] {\n  margin-bottom: 13px;\n}\n.mt-7 {\n  margin-top: 1.75rem;\n}\n.mt-3 {\n  margin-top: 0.75rem;\n}\n.inline-block {\n  display: inline-block;\n}\n.flex {\n  display: flex;\n}\n.hidden {\n  display: none;\n}\n.h-screen {\n  height: 100vh;\n}\n.h-5 {\n  height: 1.25rem;\n}\n.h-\\[18px\\] {\n  height: 18px;\n}\n.h-32 {\n  height: 8rem;\n}\n.h-8 {\n  height: 2rem;\n}\n.h-full {\n  height: 100%;\n}\n.h-4 {\n  height: 1rem;\n}\n.h-\\[14px\\] {\n  height: 14px;\n}\n.h-10 {\n  height: 2.5rem;\n}\n.h-auto {\n  height: auto;\n}\n.h-20 {\n  height: 5rem;\n}\n.h-36 {\n  height: 9rem;\n}\n.h-\\[100\\%\\] {\n  height: 100%;\n}\n.h-44 {\n  height: 11rem;\n}\n.h-max {\n  height: -moz-max-content;\n  height: max-content;\n}\n.max-h-full {\n  max-height: 100%;\n}\n.w-screen {\n  width: 100vw;\n}\n.w-5 {\n  width: 1.25rem;\n}\n.w-\\[18px\\] {\n  width: 18px;\n}\n.w-72 {\n  width: 18rem;\n}\n.w-\\[100\\%\\] {\n  width: 100%;\n}\n.w-44 {\n  width: 11rem;\n}\n.w-8 {\n  width: 2rem;\n}\n.w-full {\n  width: 100%;\n}\n.w-max {\n  width: -moz-max-content;\n  width: max-content;\n}\n.w-4 {\n  width: 1rem;\n}\n.w-\\[14px\\] {\n  width: 14px;\n}\n.w-10 {\n  width: 2.5rem;\n}\n.w-20 {\n  width: 5rem;\n}\n.w-28 {\n  width: 7rem;\n}\n.w-auto {\n  width: auto;\n}\n.max-w-\\[350px\\] {\n  max-width: 350px;\n}\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\n.flex-grow {\n  flex-grow: 1;\n}\n.grow {\n  flex-grow: 1;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.flex-row {\n  flex-direction: row;\n}\n.flex-row-reverse {\n  flex-direction: row-reverse;\n}\n.flex-col {\n  flex-direction: column;\n}\n.content-center {\n  align-content: center;\n}\n.items-center {\n  align-items: center;\n}\n.space-x-\\[10px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(10px * var(--tw-space-x-reverse));\n  margin-left: calc(10px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-5 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1.25rem * var(--tw-space-x-reverse));\n  margin-left: calc(1.25rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1rem * var(--tw-space-x-reverse));\n  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-3 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.75rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-\\[18px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(18px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(18px * var(--tw-space-y-reverse));\n}\n.space-x-\\[8px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(8px * var(--tw-space-x-reverse));\n  margin-left: calc(8px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-\\[1\\.5px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.5px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.5px * var(--tw-space-y-reverse));\n}\n.space-x-8 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(2rem * var(--tw-space-x-reverse));\n  margin-left: calc(2rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-\\[22px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(22px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(22px * var(--tw-space-y-reverse));\n}\n.space-y-\\[2px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(2px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(2px * var(--tw-space-y-reverse));\n}\n.space-x-\\[12px\\] > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(12px * var(--tw-space-x-reverse));\n  margin-left: calc(12px * calc(1 - var(--tw-space-x-reverse)));\n}\n.overflow-hidden {\n  overflow: hidden;\n}\n.overflow-y-hidden {\n  overflow-y: hidden;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-md {\n  border-radius: 0.375rem;\n}\n.rounded-sm {\n  border-radius: 0.125rem;\n}\n.rounded-\\[5px\\] {\n  border-radius: 5px;\n}\n.border {\n  border-width: 1px;\n}\n.border-t {\n  border-top-width: 1px;\n}\n.border-b {\n  border-bottom-width: 1px;\n}\n.border-l {\n  border-left-width: 1px;\n}\n.border-none {\n  border-style: none;\n}\n.border-neutral-700 {\n  --tw-border-opacity: 1;\n  border-color: rgb(64 64 64 / var(--tw-border-opacity));\n}\n.border-neutral-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(82 82 82 / var(--tw-border-opacity));\n}\n.border-\\[rgba\\(0\\2c 0\\2c 0\\2c 0\\)\\] {\n  border-color: rgba(0,0,0,0);\n}\n.border-neutral-800 {\n  --tw-border-opacity: 1;\n  border-color: rgb(38 38 38 / var(--tw-border-opacity));\n}\n.border-t-neutral-900 {\n  --tw-border-opacity: 1;\n  border-top-color: rgb(23 23 23 / var(--tw-border-opacity));\n}\n.border-b-\\[\\#121212\\] {\n  --tw-border-opacity: 1;\n  border-bottom-color: rgb(18 18 18 / var(--tw-border-opacity));\n}\n.border-l-neutral-800 {\n  --tw-border-opacity: 1;\n  border-left-color: rgb(38 38 38 / var(--tw-border-opacity));\n}\n.bg-blue-900 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 58 138 / var(--tw-bg-opacity));\n}\n.bg-\\[\\#0d0d0d\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(13 13 13 / var(--tw-bg-opacity));\n}\n.bg-blue-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 64 175 / var(--tw-bg-opacity));\n}\n.bg-transparent {\n  background-color: transparent;\n}\n.bg-black {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n.bg-neutral-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(38 38 38 / var(--tw-bg-opacity));\n}\n.bg-red-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(185 28 28 / var(--tw-bg-opacity));\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.bg-\\[\\#121212\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(18 18 18 / var(--tw-bg-opacity));\n}\n.bg-blue-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n}\n.bg-opacity-10 {\n  --tw-bg-opacity: 0.1;\n}\n.bg-opacity-20 {\n  --tw-bg-opacity: 0.2;\n}\n.bg-opacity-30 {\n  --tw-bg-opacity: 0.3;\n}\n.bg-opacity-\\[5\\%\\] {\n  --tw-bg-opacity: 5%;\n}\n.bg-opacity-\\[3\\%\\] {\n  --tw-bg-opacity: 3%;\n}\n.bg-opacity-\\[2\\%\\] {\n  --tw-bg-opacity: 2%;\n}\n.bg-cover {\n  background-size: cover;\n}\n.p-5 {\n  padding: 1.25rem;\n}\n.p-2 {\n  padding: 0.5rem;\n}\n.p-6 {\n  padding: 1.5rem;\n}\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n.py-\\[8px\\] {\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n.px-0 {\n  padding-left: 0px;\n  padding-right: 0px;\n}\n.py-\\[14px\\] {\n  padding-top: 14px;\n  padding-bottom: 14px;\n}\n.px-20 {\n  padding-left: 5rem;\n  padding-right: 5rem;\n}\n.py-14 {\n  padding-top: 3.5rem;\n  padding-bottom: 3.5rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.py-5 {\n  padding-top: 1.25rem;\n  padding-bottom: 1.25rem;\n}\n.px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n.px-\\[16px\\] {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n.px-\\[10px\\] {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n.py-\\[6px\\] {\n  padding-top: 6px;\n  padding-bottom: 6px;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.py-\\[10px\\] {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n.py-0 {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n.pr-8 {\n  padding-right: 2rem;\n}\n.pr-\\[44px\\] {\n  padding-right: 44px;\n}\n.pb-\\[2px\\] {\n  padding-bottom: 2px;\n}\n.pt-\\[16px\\] {\n  padding-top: 16px;\n}\n.pt-1 {\n  padding-top: 0.25rem;\n}\n.pt-4 {\n  padding-top: 1rem;\n}\n.pl-1 {\n  padding-left: 0.25rem;\n}\n.pt-0 {\n  padding-top: 0px;\n}\n.pt-5 {\n  padding-top: 1.25rem;\n}\n.pt-\\[1px\\] {\n  padding-top: 1px;\n}\n.pt-\\[18\\.5px\\] {\n  padding-top: 18.5px;\n}\n.pl-\\[6px\\] {\n  padding-left: 6px;\n}\n.pl-\\[0px\\] {\n  padding-left: 0px;\n}\n.pt-\\[12px\\] {\n  padding-top: 12px;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n.font-sans {\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-\\[12px\\] {\n  font-size: 12px;\n}\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.text-\\[13\\.5px\\] {\n  font-size: 13.5px;\n}\n.text-\\[9\\.5px\\] {\n  font-size: 9.5px;\n}\n.text-\\[14\\.5px\\] {\n  font-size: 14.5px;\n}\n.text-\\[13px\\] {\n  font-size: 13px;\n}\n.text-\\[10px\\] {\n  font-size: 10px;\n}\n.text-\\[12\\.75px\\] {\n  font-size: 12.75px;\n}\n.text-\\[15px\\] {\n  font-size: 15px;\n}\n.text-\\[11px\\] {\n  font-size: 11px;\n}\n.text-\\[21px\\] {\n  font-size: 21px;\n}\n.text-\\[20px\\] {\n  font-size: 20px;\n}\n.text-\\[14px\\] {\n  font-size: 14px;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-medium {\n  font-weight: 500;\n}\n.leading-5 {\n  line-height: 1.25rem;\n}\n.leading-relaxed {\n  line-height: 1.625;\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.text-neutral-400 {\n  --tw-text-opacity: 1;\n  color: rgb(163 163 163 / var(--tw-text-opacity));\n}\n.text-neutral-300 {\n  --tw-text-opacity: 1;\n  color: rgb(212 212 212 / var(--tw-text-opacity));\n}\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n.text-neutral-500 {\n  --tw-text-opacity: 1;\n  color: rgb(115 115 115 / var(--tw-text-opacity));\n}\n.text-\\[\\#7b7b7b\\] {\n  --tw-text-opacity: 1;\n  color: rgb(123 123 123 / var(--tw-text-opacity));\n}\n.text-blue-400 {\n  --tw-text-opacity: 1;\n  color: rgb(96 165 250 / var(--tw-text-opacity));\n}\n.underline {\n  -webkit-text-decoration-line: underline;\n          text-decoration-line: underline;\n}\n.opacity-100 {\n  opacity: 1;\n}\n.opacity-90 {\n  opacity: 0.9;\n}\n.shadow-xl {\n  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.font-jost {\n  font-family: "Jost";\n}\n\n@font-face {\n  font-family:"SF-Pro";\n  src: url("/fonts/SF-Pro.ttf") format("truetype");\n}\n\n\n.font-pacifico{\n  font-family: \'Pacifico\', cursive;\n\n}\n\n\n\n\n.selected-sidebar-text {\n  font-weight: 500;\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.unselected-sidebar-text {\n  --tw-text-opacity: 1;\n  color: rgb(163 163 163 / var(--tw-text-opacity));\n}\n\n.selected-sidebar-bg {\n  border-radius: 0.375rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(38 38 38 / var(--tw-bg-opacity));\n}\n\n@media (min-width: 1024px) {\n\n  .selected-sidebar-bg {\n    border-radius: 5px;\n  }\n}\n\n/*bg-white bg-opacity-[3.5%] rounded-md*/\n.unselected-sidebar-bg {\n  border-radius: 0px;\n  background-color: transparent;\n}\n\n.menucont {\n  position: fixed;\n  bottom: 0px;\n  display: flex;\n  width: 100vw;\n  --tw-bg-opacity: 1;\n  background-color: rgb(16 16 16 / var(--tw-bg-opacity));\n  padding: 0px;\n}\n\n@media (min-width: 768px) {\n\n  .menucont {\n    position: static;\n    width: -moz-max-content;\n    width: max-content;\n    flex-direction: column;\n  }\n}\n\n\n.settingsmenucont {\n  position: static;\n  display: flex;\n  height: 100%;\n  width: -moz-max-content;\n  width: max-content;\n  background-color: rgb(16 16 16 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.3;\n  padding: 0px;\n}\n\n\n@media (min-width: 768px) {\n\n  .settingsmenucont {\n    flex-direction: column;\n    background-color: transparent;\n  }\n}\n\n\n.sidebarwrapper {\n  margin-left: 0px;\n  margin-right: 0px;\n  display: none;\n  height: auto;\n  flex-direction: column;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.3;\n}\n\n\n@media (min-width: 768px) {\n\n  .sidebarwrapper {\n    padding-top: 12px;\n    padding-bottom: 12px;\n  }\n}\n\n\n@media (min-width: 1024px) {\n\n  .sidebarwrapper {\n    display: flex;\n  }\n}\n  \n.colorpicker{\n  background-color: #242424;\n}\n.sidebardivs {\n  margin: 0.5rem;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  margin-bottom: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  border-style: none;\n  --tw-bg-opacity: 0;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0px;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.sidebarprofile {\n  margin: 0.5rem;\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n  margin-bottom: 0px;\n  display: flex;\n  flex-direction: column;\n  border-style: none;\n  --tw-bg-opacity: 0;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0px;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n\n.quicktext {\n  display: none;\n}\n\n  .postcont {\n  border-bottom-width: 1px;\n  --tw-border-opacity: 1;\n  border-bottom-color: rgb(38 38 38 / var(--tw-border-opacity));\n  padding-left: 1rem;\n  padding-right: 1.5rem;\n}\n\n.quickcont {\n  margin-bottom: 0px;\n  margin-top: 16px;\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  align-items: center;\n  border-radius: 0.125rem;\n  border-style: none;\n  --tw-bg-opacity: 0;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n  .profiletext {\n  margin-top: 0.25rem;\n  padding-left: 0px;\n  font-size: 14px;\n  font-weight: 600;\n  --tw-text-opacity: 1;\n  color: rgb(212 212 212 / var(--tw-text-opacity));\n  font-family: "Inter";\n}\n  \n  .logtext {\n  margin-top: auto;\n  margin-bottom: auto;\n  margin-right: 0px;\n  margin-left: auto;\n  font-size: 14px;\n  font-weight: 500;\n  --tw-text-opacity: 1;\n  color: rgb(248 113 113 / var(--tw-text-opacity));\n  font-family: "Inter";\n}\n\n.msgcont {\n  display: none;\n}\n\n.sidebarmessage {\n  margin: 0.5rem;\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  border-style: none;\n  --tw-bg-opacity: 0;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.25rem;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.bgcol {\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  flex-direction: column;\n  --tw-bg-opacity: 1;\n  background-color: rgb(23 23 23 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 100%;\n}\n\n.menumain {\n  display: flex;\n  height: auto;\n  width: 100%;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.menumain > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0px * var(--tw-space-y-reverse));\n}\n\n.menumain {\n  border-radius: 0px;\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n  border-bottom-color: rgb(31 41 55 / var(--tw-border-opacity));\n  border-left-color: rgb(31 41 55 / var(--tw-border-opacity));\n  --tw-border-opacity: 1;\n  border-left-color: rgb(23 23 23 / var(--tw-border-opacity));\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n\n@media (min-width: 768px) {\n\n  .menumain {\n    height: 100vh;\n    width: -moz-max-content;\n    width: max-content;\n    flex-direction: column;\n    justify-content: flex-start;\n  }\n\n  .menumain > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-y-reverse: 0;\n    margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));\n    margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));\n  }\n\n  .menumain {\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n  }\n}\n\n@media (min-width: 1024px) {\n\n  .menumain {\n    width: 13rem;\n  }\n\n  .menumain > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-y-reverse: 0;\n    margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));\n    margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));\n  }\n}\n\n.settingsmenumain {\n  display: flex;\n  height: -moz-max-content;\n  height: max-content;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.settingsmenumain > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));\n}\n\n.settingsmenumain {\n  border-radius: 0px;\n  background-color: rgb(16 16 16 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.3;\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n\n@media (min-width: 768px) {\n\n  .settingsmenumain {\n    height: 100vh;\n    width: -moz-max-content;\n    width: max-content;\n    width: 14rem;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n  }\n}\n\n.selected-sidebar-icon {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.unselected-sidebar-icon {\n  --tw-text-opacity: 1;\n  color: rgb(163 163 163 / var(--tw-text-opacity));\n}\n.tab-item-animate {\n  position: absolute;\n  top: 6px;\n  left: 6px;\n  width: calc(100% - 12px);\n  height: 32px;\n  transform-origin: 0 0;\n  transition: transform 0.25s;\n}\n\n.tabs .tabs-item:first-child.active ~ .tab-item-animate {\n  transform: translateX(0) scaleX(0.333);\n}\n\n.tabs .tabs-item:nth-child(2).active ~ .tab-item-animate {\n  transform: translateX(33.333%) scaleX(0.333);\n}\n.tabs .tabs-item:nth-child(3).active ~ .tab-item-animate {\n  transform: translateX(calc(33.333% * 2)) scaleX(0.333);\n}\n\n\n.tag-selected {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.9;\n  --tw-text-opacity: 1;\n  color: rgb(23 23 23 / var(--tw-text-opacity));\n}\n\n.tag-unselected {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(82 82 82 / var(--tw-border-opacity));\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.2;\n  --tw-text-opacity: 1;\n  color: rgb(163 163 163 / var(--tw-text-opacity));\n}\n.font-sf{\n  font-family:"SF-Pro";\n}\n\n.font-inter {\n  font-family: "Inter";\n}\n.code {\n  font-family: "Source Code Pro", monospace;\n  display: block;\n  background-color: white;\n  color: #000000;\n  padding: 1em;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n}\n\n.sidenav {\n  height: 100%; /* 100% Full-height */\n  width: 0; /* 0 width - change this with JavaScript */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Stay on top */\n  top: 0; /* Stay at the top */\n  left: 0;\n  overflow-x: hidden; /* Disable horizontal scroll */\n  padding-top: 60px; /* Place content 60px from the top */\n  transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */\n}\n\n/* The navigation menu links */\n.sidenav a {\n  display: block;\n}\n#midcont {\n  overflow-y: scroll;\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none;  /* Internet Explorer 10+ */\n}\n#midcont::-webkit-scrollbar { /* WebKit */\n  width: 0;\n  height: 0;\n}\n.truncate{\ntext-overflow: ellipsis;\n\n/* Needed to make it work */\noverflow: hidden;\nwhite-space: nowrap;\n\n}\n\ndiv.fadeMe {\n  \n  background: rgba(0,0,0,0.7); \n  width:      100%;\n  height:     100%; \n  z-index:    10;\n  top:        0; \n  left:       0; \n  position:   fixed; \n}\n.bg-stickytitle{\n  background-color: #0d0d0d;\n}\n\n#publishtextarea{\n  -webkit-text-size-adjust: none;\n     -moz-text-size-adjust: none;\n          text-size-adjust: none;\n\n}\n\n#posttext{\n  -webkit-text-size-adjust: none;\n     -moz-text-size-adjust: none;\n          text-size-adjust: none;\n\n}\n\n.style13{\n  font-size: 14px;\n}\n\n #publishtextarea:focus {\n  outline: 0;\n}\n#popup{\n  z-index: 20;\n}\n\n#tags {\n  overflow-x: scroll;\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none;  /* Internet Explorer 10+ */\n}\n#tags::-webkit-scrollbar { /* WebKit */\n  width: 0;\n  height: 0;\n}\n\n#myInputField {\n  border:1px solid #ddd;\n  padding: 10px;\n  font-size: 14px;\n}\n.coverdiv{\nbackground-image:\n    linear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(0, 0, 0, 0.73)),\n}\n\n.tag {\n  padding-top: 2px;\n  padding-bottom: 2px;\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n\n[contenteditable=true]:empty:before{\n  content: attr(placeholder);\n  pointer-events: none;\n  color: #a3a3a3;\n  display: block; /* For Firefox */\n}\n\n\n\n.tag span[data-role="remove"] {\n  margin-left: 3px;\n  margin-right: 3px;\n  cursor: pointer;\n}\n\n.tag span[data-role="remove"]:after {\n  content: "x";\n  padding: 0px 2px;\n}\n\n\nselect {\n  margin: 0px;\n  margin-top: 0.5rem;\n  display: block;\n  width: 100%;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  border-radius: 0.25rem;\n  border-width: 1px;\n  border-style: solid;\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  background-clip: padding-box;\n  background-repeat: no-repeat;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 1rem;\n  line-height: 1.5rem;\n  font-weight: 400;\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 150ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n\nselect:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(37 99 235 / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\ntable {\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 2.5rem;\n  margin-bottom: 2.5rem;\n  width: 66.666667%;\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(229 229 229 / var(--tw-border-opacity));\n  font-family: "Inter";\n}\n\nth {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n  padding: 0.75rem;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  text-align: left;\n  font-weight: 600;\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\ntd {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(229 229 229 / var(--tw-border-opacity));\n  padding: 0.75rem;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n/* Position and style the close button (top right corner) */\n.sidenav .closebtn {\n  position: absolute;\n  top: 0;\n  right: 25px;\n  font-size: 28px;\n  margin-left: 50px;\n}\n@media screen and (max-height: 450px) {\n  .sidenav {\n    padding-top: 15px;\n  }\n  .sidenav a {\n    font-size: 18px;\n  }\n}\n.placeholder\\:text-sm::-moz-placeholder {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.placeholder\\:text-sm::placeholder {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.placeholder\\:text-xs::-moz-placeholder {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.placeholder\\:text-xs::placeholder {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.placeholder\\:text-neutral-400::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(163 163 163 / var(--tw-text-opacity));\n}\n.placeholder\\:text-neutral-400::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(163 163 163 / var(--tw-text-opacity));\n}\n.placeholder\\:text-neutral-500::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(115 115 115 / var(--tw-text-opacity));\n}\n.placeholder\\:text-neutral-500::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(115 115 115 / var(--tw-text-opacity));\n}\n@media (min-width: 640px) {\n\n  .sm\\:mx-0 {\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n\n  .sm\\:w-3\\/4 {\n    width: 75%;\n  }\n\n  .sm\\:px-2 {\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n  }\n\n  .sm\\:py-4 {\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n  }\n}\n@media (min-width: 768px) {\n\n  .md\\:absolute {\n    position: absolute;\n  }\n\n  .md\\:relative {\n    position: relative;\n  }\n\n  .md\\:bottom-10 {\n    bottom: 2.5rem;\n  }\n\n  .md\\:left-0 {\n    left: 0px;\n  }\n\n  .md\\:right-0 {\n    right: 0px;\n  }\n\n  .md\\:top-\\[11px\\] {\n    top: 11px;\n  }\n\n  .md\\:m-0 {\n    margin: 0px;\n  }\n\n  .md\\:m-5 {\n    margin: 1.25rem;\n  }\n\n  .md\\:mx-auto {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .md\\:mx-5 {\n    margin-left: 1.25rem;\n    margin-right: 1.25rem;\n  }\n\n  .md\\:mx-2 {\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n  }\n\n  .md\\:mx-0 {\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n\n  .md\\:my-5 {\n    margin-top: 1.25rem;\n    margin-bottom: 1.25rem;\n  }\n\n  .md\\:mr-0 {\n    margin-right: 0px;\n  }\n\n  .md\\:ml-0 {\n    margin-left: 0px;\n  }\n\n  .md\\:ml-auto {\n    margin-left: auto;\n  }\n\n  .md\\:mr-2 {\n    margin-right: 0.5rem;\n  }\n\n  .md\\:mt-auto {\n    margin-top: auto;\n  }\n\n  .md\\:mb-\\[10px\\] {\n    margin-bottom: 10px;\n  }\n\n  .md\\:mt-\\[1px\\] {\n    margin-top: 1px;\n  }\n\n  .md\\:mt-\\[0px\\] {\n    margin-top: 0px;\n  }\n\n  .md\\:mt-0 {\n    margin-top: 0px;\n  }\n\n  .md\\:mb-3 {\n    margin-bottom: 0.75rem;\n  }\n\n  .md\\:inline-flex {\n    display: inline-flex;\n  }\n\n  .md\\:hidden {\n    display: none;\n  }\n\n  .md\\:h-4 {\n    height: 1rem;\n  }\n\n  .md\\:w-4 {\n    width: 1rem;\n  }\n\n  .md\\:w-96 {\n    width: 24rem;\n  }\n\n  .md\\:w-\\[450px\\] {\n    width: 450px;\n  }\n\n  .md\\:w-\\[100\\%\\] {\n    width: 100%;\n  }\n\n  .md\\:flex-row {\n    flex-direction: row;\n  }\n\n  .md\\:space-x-3 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 0;\n    margin-right: calc(0.75rem * var(--tw-space-x-reverse));\n    margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));\n  }\n\n  .md\\:space-y-4 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-y-reverse: 0;\n    margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\n    margin-bottom: calc(1rem * var(--tw-space-y-reverse));\n  }\n\n  .md\\:rounded-md {\n    border-radius: 0.375rem;\n  }\n\n  .md\\:rounded-xl {\n    border-radius: 0.75rem;\n  }\n\n  .md\\:border-none {\n    border-style: none;\n  }\n\n  .md\\:bg-opacity-0 {\n    --tw-bg-opacity: 0;\n  }\n\n  .md\\:py-4 {\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n  }\n\n  .md\\:px-7 {\n    padding-left: 1.75rem;\n    padding-right: 1.75rem;\n  }\n\n  .md\\:px-8 {\n    padding-left: 2rem;\n    padding-right: 2rem;\n  }\n\n  .md\\:px-5 {\n    padding-left: 1.25rem;\n    padding-right: 1.25rem;\n  }\n\n  .md\\:px-2 {\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n  }\n\n  .md\\:py-6 {\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n  }\n\n  .md\\:py-\\[8px\\] {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n\n  .md\\:py-10 {\n    padding-top: 2.5rem;\n    padding-bottom: 2.5rem;\n  }\n\n  .md\\:pr-0 {\n    padding-right: 0px;\n  }\n\n  .md\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n\n  .md\\:text-\\[10\\.5px\\] {\n    font-size: 10.5px;\n  }\n\n  .md\\:text-\\[15\\.9px\\] {\n    font-size: 15.9px;\n  }\n\n  .md\\:text-\\[13\\.5px\\] {\n    font-size: 13.5px;\n  }\n\n  .md\\:text-\\[21\\.75px\\] {\n    font-size: 21.75px;\n  }\n\n  .md\\:text-\\[12px\\] {\n    font-size: 12px;\n  }\n\n  .md\\:text-\\[20\\.75px\\] {\n    font-size: 20.75px;\n  }\n\n  .md\\:text-\\[14\\.5px\\] {\n    font-size: 14.5px;\n  }\n\n  .md\\:leading-normal {\n    line-height: 1.5;\n  }\n\n  .md\\:opacity-90 {\n    opacity: 0.9;\n  }\n\n  .placeholder\\:md\\:text-sm::-moz-placeholder {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n\n  .placeholder\\:md\\:text-sm::placeholder {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n@media (min-width: 1024px) {\n\n  .lg\\:mx-0 {\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n\n  .lg\\:ml-auto {\n    margin-left: auto;\n  }\n\n  .lg\\:mr-2 {\n    margin-right: 0.5rem;\n  }\n\n  .lg\\:mb-5 {\n    margin-bottom: 1.25rem;\n  }\n\n  .lg\\:mb-\\[10px\\] {\n    margin-bottom: 10px;\n  }\n\n  .lg\\:block {\n    display: block;\n  }\n\n  .lg\\:inline-block {\n    display: inline-block;\n  }\n\n  .lg\\:inline-flex {\n    display: inline-flex;\n  }\n\n  .lg\\:h-4 {\n    height: 1rem;\n  }\n\n  .lg\\:h-\\[203px\\] {\n    height: 203px;\n  }\n\n  .lg\\:w-4 {\n    width: 1rem;\n  }\n\n  .lg\\:max-w-\\[430px\\] {\n    max-width: 430px;\n  }\n\n  .lg\\:rounded-xl {\n    border-radius: 0.75rem;\n  }\n\n  .lg\\:px-6 {\n    padding-left: 1.5rem;\n    padding-right: 1.5rem;\n  }\n\n  .lg\\:py-\\[8px\\] {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n\n  .lg\\:py-4 {\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n  }\n\n  .lg\\:pt-4 {\n    padding-top: 1rem;\n  }\n\n  .lg\\:text-\\[16\\.5px\\] {\n    font-size: 16.5px;\n  }\n\n  .lg\\:text-\\[15px\\] {\n    font-size: 15px;\n  }\n\n  .lg\\:text-\\[21\\.75px\\] {\n    font-size: 21.75px;\n  }\n\n  .lg\\:text-\\[20\\.75px\\] {\n    font-size: 20.75px;\n  }\n\n  .lg\\:text-\\[14\\.5px\\] {\n    font-size: 14.5px;\n  }\n\n  .lg\\:leading-relaxed {\n    line-height: 1.625;\n  }\n\n  .lg\\:shadow-lg {\n    --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n    --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n  }\n}\n@media (min-width: 1280px) {\n\n  .xl\\:absolute {\n    position: absolute;\n  }\n\n  .xl\\:relative {\n    position: relative;\n  }\n\n  .xl\\:left-10 {\n    left: 2.5rem;\n  }\n\n  .xl\\:top-\\[120px\\] {\n    top: 120px;\n  }\n\n  .xl\\:right-0 {\n    right: 0px;\n  }\n\n  .xl\\:top-\\[20px\\] {\n    top: 20px;\n  }\n\n  .xl\\:left-\\[125px\\] {\n    left: 125px;\n  }\n\n  .xl\\:right-\\[90px\\] {\n    right: 90px;\n  }\n\n  .xl\\:top-\\[25px\\] {\n    top: 25px;\n  }\n\n  .xl\\:mx-0 {\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n\n  .xl\\:my-0 {\n    margin-top: 0px;\n    margin-bottom: 0px;\n  }\n\n  .xl\\:mr-1 {\n    margin-right: 0.25rem;\n  }\n\n  .xl\\:mt-0 {\n    margin-top: 0px;\n  }\n\n  .xl\\:mt-\\[0px\\] {\n    margin-top: 0px;\n  }\n\n  .xl\\:block {\n    display: block;\n  }\n\n  .xl\\:inline-block {\n    display: inline-block;\n  }\n\n  .xl\\:h-\\[100px\\] {\n    height: 100px;\n  }\n\n  .xl\\:w-\\[100px\\] {\n    width: 100px;\n  }\n\n  .xl\\:w-full {\n    width: 100%;\n  }\n\n  .xl\\:rounded-md {\n    border-radius: 0.375rem;\n  }\n\n  .xl\\:px-0 {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n\n  .xl\\:text-left {\n    text-align: left;\n  }\n\n  .xl\\:text-lg {\n    font-size: 1.125rem;\n    line-height: 1.75rem;\n  }\n\n  .xl\\:text-\\[12\\.5px\\] {\n    font-size: 12.5px;\n  }\n\n  .xl\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n';
const Root = /* @__PURE__ */ componentQrl(inlinedQrl(() => {
  useStylesQrl(inlinedQrl(styles, "s_WZUT0oi3I0A"));
  return /* @__PURE__ */ jsx(QwikCity, {
    children: [
      /* @__PURE__ */ jsx(Head, {}),
      /* @__PURE__ */ jsx("body", {
        lang: "en",
        class: "relative w-screen h-screen",
        children: /* @__PURE__ */ jsx(RouterOutlet, {})
      })
    ]
  });
}, "s_06hTRPZlBNE"));
/**
 * @license
 * @builder.io/qwik/server 0.9.0
 * Copyright Builder.io, Inc. All Rights Reserved.
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/BuilderIO/qwik/blob/main/LICENSE
 */
if (typeof global == "undefined") {
  const g = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {};
  g.global = g;
}
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
function createTimer() {
  if (typeof performance === "undefined") {
    return () => 0;
  }
  const start = performance.now();
  return () => {
    const end = performance.now();
    const delta = end - start;
    return delta / 1e6;
  };
}
function getBuildBase(opts) {
  let base = opts.base;
  if (typeof base === "string") {
    if (!base.endsWith("/")) {
      base += "/";
    }
    return base;
  }
  return "/build/";
}
function createPlatform(opts, resolvedManifest) {
  const mapper = resolvedManifest == null ? void 0 : resolvedManifest.mapper;
  const mapperFn = opts.symbolMapper ? opts.symbolMapper : (symbolName) => {
    if (mapper) {
      const hash = getSymbolHash(symbolName);
      const result = mapper[hash];
      if (!result) {
        console.error("Cannot resolve symbol", symbolName, "in", mapper);
      }
      return result;
    }
  };
  const serverPlatform = {
    isServer: true,
    async importSymbol(_element, qrl, symbolName) {
      let [modulePath] = String(qrl).split("#");
      if (!modulePath.endsWith(".js")) {
        modulePath += ".js";
      }
      const module = __require(modulePath);
      if (!(symbolName in module)) {
        throw new Error(`Q-ERROR: missing symbol '${symbolName}' in module '${modulePath}'.`);
      }
      const symbol = module[symbolName];
      return symbol;
    },
    raf: () => {
      console.error("server can not rerender");
      return Promise.resolve();
    },
    nextTick: (fn) => {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(fn());
        });
      });
    },
    chunkForSymbol(symbolName) {
      return mapperFn(symbolName, mapper);
    }
  };
  return serverPlatform;
}
async function setServerPlatform(opts, manifest2) {
  const platform = createPlatform(opts, manifest2);
  setPlatform(platform);
}
var getSymbolHash = (symbolName) => {
  const index2 = symbolName.lastIndexOf("_");
  if (index2 > -1) {
    return symbolName.slice(index2 + 1);
  }
  return symbolName;
};
var QWIK_LOADER_DEFAULT_MINIFIED = '(()=>{function e(e){return"object"==typeof e&&e&&"Module"===e[Symbol.toStringTag]}((t,n)=>{const o="__q_context__",r=window,a=(e,n,o)=>{n=n.replace(/([A-Z])/g,(e=>"-"+e.toLowerCase())),t.querySelectorAll("[on"+e+"\\\\:"+n+"]").forEach((t=>l(t,e,n,o)))},i=(e,t)=>new CustomEvent(e,{detail:t}),s=e=>{throw Error("QWIK "+e)},c=(e,n)=>(e=e.closest("[q\\\\:container]"),new URL(n,new URL(e?e.getAttribute("q:base"):t.baseURI,t.baseURI))),l=async(n,a,l,d)=>{var u;n.hasAttribute("preventdefault:"+l)&&d.preventDefault();const b="on"+a+":"+l,v=null==(u=n._qc_)?void 0:u.li[b];if(v){for(const e of v)await e.getFn([n,d],(()=>n.isConnected))(d,n);return}const p=n.getAttribute(b);if(p)for(const a of p.split("\\n")){const l=c(n,a);if(l){const a=f(l),c=(r[l.pathname]||(w=await import(l.href.split("#")[0]),Object.values(w).find(e)||w))[a]||s(l+" does not export "+a),u=t[o];if(n.isConnected)try{t[o]=[n,d,l],await c(d,n)}finally{t[o]=u,t.dispatchEvent(i("qsymbol",{symbol:a,element:n}))}}}var w},f=e=>e.hash.replace(/^#?([^?[|]*).*$/,"$1")||"default",d=async e=>{let t=e.target;for(a("-document",e.type,e);t&&t.getAttribute;)await l(t,"",e.type,e),t=e.bubbles&&!0!==e.cancelBubble?t.parentElement:null},u=e=>{a("-window",e.type,e)},b=()=>{const e=t.readyState;if(!n&&("interactive"==e||"complete"==e)){n=1,a("","qinit",i("qinit"));const e=t.querySelectorAll("[on\\\\:qvisible]");if(e.length>0){const t=new IntersectionObserver((e=>{for(const n of e)n.isIntersecting&&(t.unobserve(n.target),l(n.target,"","qvisible",i("qvisible",n)))}));e.forEach((e=>t.observe(e)))}}},v=new Set,p=e=>{for(const t of e)v.has(t)||(document.addEventListener(t,d,{capture:!0}),r.addEventListener(t,u),v.add(t))};if(!t.qR){const e=r.qwikevents;Array.isArray(e)&&p(e),r.qwikevents={push:(...e)=>p(e)},t.addEventListener("readystatechange",b),b()}})(document)})();';
var QWIK_LOADER_DEFAULT_DEBUG = '(() => {\n    function findModule(module) {\n        return Object.values(module).find(isModule) || module;\n    }\n    function isModule(module) {\n        return "object" == typeof module && module && "Module" === module[Symbol.toStringTag];\n    }\n    ((doc, hasInitialized) => {\n        const win = window;\n        const broadcast = (infix, type, ev) => {\n            type = type.replace(/([A-Z])/g, (a => "-" + a.toLowerCase()));\n            doc.querySelectorAll("[on" + infix + "\\\\:" + type + "]").forEach((target => dispatch(target, infix, type, ev)));\n        };\n        const createEvent = (eventName, detail) => new CustomEvent(eventName, {\n            detail: detail\n        });\n        const error = msg => {\n            throw new Error("QWIK " + msg);\n        };\n        const qrlResolver = (element, qrl) => {\n            element = element.closest("[q\\\\:container]");\n            return new URL(qrl, new URL(element ? element.getAttribute("q:base") : doc.baseURI, doc.baseURI));\n        };\n        const dispatch = async (element, onPrefix, eventName, ev) => {\n            var _a;\n            element.hasAttribute("preventdefault:" + eventName) && ev.preventDefault();\n            const attrName = "on" + onPrefix + ":" + eventName;\n            const qrls = null == (_a = element._qc_) ? void 0 : _a.li[attrName];\n            if (qrls) {\n                for (const q of qrls) {\n                    await q.getFn([ element, ev ], (() => element.isConnected))(ev, element);\n                }\n                return;\n            }\n            const attrValue = element.getAttribute(attrName);\n            if (attrValue) {\n                for (const qrl of attrValue.split("\\n")) {\n                    const url = qrlResolver(element, qrl);\n                    if (url) {\n                        const symbolName = getSymbolName(url);\n                        const handler = (win[url.pathname] || findModule(await import(url.href.split("#")[0])))[symbolName] || error(url + " does not export " + symbolName);\n                        const previousCtx = doc.__q_context__;\n                        if (element.isConnected) {\n                            try {\n                                doc.__q_context__ = [ element, ev, url ];\n                                await handler(ev, element);\n                            } finally {\n                                doc.__q_context__ = previousCtx;\n                                doc.dispatchEvent(createEvent("qsymbol", {\n                                    symbol: symbolName,\n                                    element: element\n                                }));\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        const getSymbolName = url => url.hash.replace(/^#?([^?[|]*).*$/, "$1") || "default";\n        const processDocumentEvent = async ev => {\n            let element = ev.target;\n            broadcast("-document", ev.type, ev);\n            while (element && element.getAttribute) {\n                await dispatch(element, "", ev.type, ev);\n                element = ev.bubbles && !0 !== ev.cancelBubble ? element.parentElement : null;\n            }\n        };\n        const processWindowEvent = ev => {\n            broadcast("-window", ev.type, ev);\n        };\n        const processReadyStateChange = () => {\n            const readyState = doc.readyState;\n            if (!hasInitialized && ("interactive" == readyState || "complete" == readyState)) {\n                hasInitialized = 1;\n                broadcast("", "qinit", createEvent("qinit"));\n                const results = doc.querySelectorAll("[on\\\\:qvisible]");\n                if (results.length > 0) {\n                    const observer = new IntersectionObserver((entries => {\n                        for (const entry of entries) {\n                            if (entry.isIntersecting) {\n                                observer.unobserve(entry.target);\n                                dispatch(entry.target, "", "qvisible", createEvent("qvisible", entry));\n                            }\n                        }\n                    }));\n                    results.forEach((el => observer.observe(el)));\n                }\n            }\n        };\n        const events =  new Set;\n        const push = eventNames => {\n            for (const eventName of eventNames) {\n                if (!events.has(eventName)) {\n                    document.addEventListener(eventName, processDocumentEvent, {\n                        capture: !0\n                    });\n                    win.addEventListener(eventName, processWindowEvent);\n                    events.add(eventName);\n                }\n            }\n        };\n        if (!doc.qR) {\n            const qwikevents = win.qwikevents;\n            Array.isArray(qwikevents) && push(qwikevents);\n            win.qwikevents = {\n                push: (...e) => push(e)\n            };\n            doc.addEventListener("readystatechange", processReadyStateChange);\n            processReadyStateChange();\n        }\n    })(document);\n})();';
var QWIK_LOADER_OPTIMIZE_MINIFIED = '(()=>{function e(e){return"object"==typeof e&&e&&"Module"===e[Symbol.toStringTag]}((t,n)=>{const o="__q_context__",r=window,a=(e,n,o)=>{n=n.replace(/([A-Z])/g,(e=>"-"+e.toLowerCase())),t.querySelectorAll("[on"+e+"\\\\:"+n+"]").forEach((t=>l(t,e,n,o)))},i=(e,t)=>new CustomEvent(e,{detail:t}),s=e=>{throw Error("QWIK "+e)},c=(e,n)=>(e=e.closest("[q\\\\:container]"),new URL(n,new URL(e?e.getAttribute("q:base"):t.baseURI,t.baseURI))),l=async(n,a,l,d)=>{var u;n.hasAttribute("preventdefault:"+l)&&d.preventDefault();const b="on"+a+":"+l,v=null==(u=n._qc_)?void 0:u.li[b];if(v){for(const e of v)await e.getFn([n,d],(()=>n.isConnected))(d,n);return}const p=n.getAttribute(b);if(p)for(const a of p.split("\\n")){const l=c(n,a);if(l){const a=f(l),c=(r[l.pathname]||(w=await import(l.href.split("#")[0]),Object.values(w).find(e)||w))[a]||s(l+" does not export "+a),u=t[o];if(n.isConnected)try{t[o]=[n,d,l],await c(d,n)}finally{t[o]=u,t.dispatchEvent(i("qsymbol",{symbol:a,element:n}))}}}var w},f=e=>e.hash.replace(/^#?([^?[|]*).*$/,"$1")||"default",d=async e=>{let t=e.target;for(a("-document",e.type,e);t&&t.getAttribute;)await l(t,"",e.type,e),t=e.bubbles&&!0!==e.cancelBubble?t.parentElement:null},u=e=>{a("-window",e.type,e)},b=()=>{const e=t.readyState;if(!n&&("interactive"==e||"complete"==e)){n=1,a("","qinit",i("qinit"));const e=t.querySelectorAll("[on\\\\:qvisible]");if(e.length>0){const t=new IntersectionObserver((e=>{for(const n of e)n.isIntersecting&&(t.unobserve(n.target),l(n.target,"","qvisible",i("qvisible",n)))}));e.forEach((e=>t.observe(e)))}}},v=new Set,p=e=>{for(const t of e)v.has(t)||(document.addEventListener(t,d,{capture:!0}),r.addEventListener(t,u),v.add(t))};if(!t.qR){const e=r.qwikevents;Array.isArray(e)&&p(e),r.qwikevents={push:(...e)=>p(e)},t.addEventListener("readystatechange",b),b()}})(document)})();';
var QWIK_LOADER_OPTIMIZE_DEBUG = '(() => {\n    function findModule(module) {\n        return Object.values(module).find(isModule) || module;\n    }\n    function isModule(module) {\n        return "object" == typeof module && module && "Module" === module[Symbol.toStringTag];\n    }\n    ((doc, hasInitialized) => {\n        const win = window;\n        const broadcast = (infix, type, ev) => {\n            type = type.replace(/([A-Z])/g, (a => "-" + a.toLowerCase()));\n            doc.querySelectorAll("[on" + infix + "\\\\:" + type + "]").forEach((target => dispatch(target, infix, type, ev)));\n        };\n        const createEvent = (eventName, detail) => new CustomEvent(eventName, {\n            detail: detail\n        });\n        const error = msg => {\n            throw new Error("QWIK " + msg);\n        };\n        const qrlResolver = (element, qrl) => {\n            element = element.closest("[q\\\\:container]");\n            return new URL(qrl, new URL(element ? element.getAttribute("q:base") : doc.baseURI, doc.baseURI));\n        };\n        const dispatch = async (element, onPrefix, eventName, ev) => {\n            var _a;\n            element.hasAttribute("preventdefault:" + eventName) && ev.preventDefault();\n            const attrName = "on" + onPrefix + ":" + eventName;\n            const qrls = null == (_a = element._qc_) ? void 0 : _a.li[attrName];\n            if (qrls) {\n                for (const q of qrls) {\n                    await q.getFn([ element, ev ], (() => element.isConnected))(ev, element);\n                }\n                return;\n            }\n            const attrValue = element.getAttribute(attrName);\n            if (attrValue) {\n                for (const qrl of attrValue.split("\\n")) {\n                    const url = qrlResolver(element, qrl);\n                    if (url) {\n                        const symbolName = getSymbolName(url);\n                        const handler = (win[url.pathname] || findModule(await import(url.href.split("#")[0])))[symbolName] || error(url + " does not export " + symbolName);\n                        const previousCtx = doc.__q_context__;\n                        if (element.isConnected) {\n                            try {\n                                doc.__q_context__ = [ element, ev, url ];\n                                await handler(ev, element);\n                            } finally {\n                                doc.__q_context__ = previousCtx;\n                                doc.dispatchEvent(createEvent("qsymbol", {\n                                    symbol: symbolName,\n                                    element: element\n                                }));\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        const getSymbolName = url => url.hash.replace(/^#?([^?[|]*).*$/, "$1") || "default";\n        const processDocumentEvent = async ev => {\n            let element = ev.target;\n            broadcast("-document", ev.type, ev);\n            while (element && element.getAttribute) {\n                await dispatch(element, "", ev.type, ev);\n                element = ev.bubbles && !0 !== ev.cancelBubble ? element.parentElement : null;\n            }\n        };\n        const processWindowEvent = ev => {\n            broadcast("-window", ev.type, ev);\n        };\n        const processReadyStateChange = () => {\n            const readyState = doc.readyState;\n            if (!hasInitialized && ("interactive" == readyState || "complete" == readyState)) {\n                hasInitialized = 1;\n                broadcast("", "qinit", createEvent("qinit"));\n                const results = doc.querySelectorAll("[on\\\\:qvisible]");\n                if (results.length > 0) {\n                    const observer = new IntersectionObserver((entries => {\n                        for (const entry of entries) {\n                            if (entry.isIntersecting) {\n                                observer.unobserve(entry.target);\n                                dispatch(entry.target, "", "qvisible", createEvent("qvisible", entry));\n                            }\n                        }\n                    }));\n                    results.forEach((el => observer.observe(el)));\n                }\n            }\n        };\n        const events = new Set;\n        const push = eventNames => {\n            for (const eventName of eventNames) {\n                if (!events.has(eventName)) {\n                    document.addEventListener(eventName, processDocumentEvent, {\n                        capture: !0\n                    });\n                    win.addEventListener(eventName, processWindowEvent);\n                    events.add(eventName);\n                }\n            }\n        };\n        if (!doc.qR) {\n            const qwikevents = win.qwikevents;\n            Array.isArray(qwikevents) && push(qwikevents);\n            win.qwikevents = {\n                push: (...e) => push(e)\n            };\n            doc.addEventListener("readystatechange", processReadyStateChange);\n            processReadyStateChange();\n        }\n    })(document);\n})();';
function getQwikLoaderScript(opts = {}) {
  if (Array.isArray(opts.events) && opts.events.length > 0) {
    const loader = opts.debug ? QWIK_LOADER_OPTIMIZE_DEBUG : QWIK_LOADER_OPTIMIZE_MINIFIED;
    return loader.replace("window.qEvents", JSON.stringify(opts.events));
  }
  return opts.debug ? QWIK_LOADER_DEFAULT_DEBUG : QWIK_LOADER_DEFAULT_MINIFIED;
}
function getPrefetchResources(snapshotResult, opts, resolvedManifest) {
  if (!resolvedManifest) {
    return [];
  }
  const prefetchStrategy = opts.prefetchStrategy;
  const buildBase = getBuildBase(opts);
  if (prefetchStrategy !== null) {
    if (!prefetchStrategy || !prefetchStrategy.symbolsToPrefetch || prefetchStrategy.symbolsToPrefetch === "auto") {
      return getAutoPrefetch(snapshotResult, resolvedManifest, buildBase);
    }
    if (typeof prefetchStrategy.symbolsToPrefetch === "function") {
      try {
        return prefetchStrategy.symbolsToPrefetch({ manifest: resolvedManifest.manifest });
      } catch (e) {
        console.error("getPrefetchUrls, symbolsToPrefetch()", e);
      }
    }
  }
  return [];
}
function getAutoPrefetch(snapshotResult, resolvedManifest, buildBase) {
  const prefetchResources = [];
  const listeners = snapshotResult == null ? void 0 : snapshotResult.listeners;
  const stateObjs = snapshotResult == null ? void 0 : snapshotResult.objs;
  const { mapper, manifest: manifest2 } = resolvedManifest;
  const urls = /* @__PURE__ */ new Set();
  if (Array.isArray(listeners)) {
    for (const prioritizedSymbolName in mapper) {
      const hasSymbol = listeners.some((l) => {
        return l.qrl.getHash() === prioritizedSymbolName;
      });
      if (hasSymbol) {
        addBundle(manifest2, urls, prefetchResources, buildBase, mapper[prioritizedSymbolName][1]);
      }
    }
  }
  if (Array.isArray(stateObjs)) {
    for (const obj of stateObjs) {
      if (isQrl(obj)) {
        const qrlSymbolName = obj.getHash();
        const resolvedSymbol = mapper[qrlSymbolName];
        if (resolvedSymbol) {
          addBundle(manifest2, urls, prefetchResources, buildBase, resolvedSymbol[0]);
        }
      }
    }
  }
  return prefetchResources;
}
function addBundle(manifest2, urls, prefetchResources, buildBase, bundleFileName) {
  const url = buildBase + bundleFileName;
  if (!urls.has(url)) {
    urls.add(url);
    const bundle = manifest2.bundles[bundleFileName];
    if (bundle) {
      const prefetchResource = {
        url,
        imports: []
      };
      prefetchResources.push(prefetchResource);
      if (Array.isArray(bundle.imports)) {
        for (const importedFilename of bundle.imports) {
          addBundle(manifest2, urls, prefetchResource.imports, buildBase, importedFilename);
        }
      }
    }
  }
}
var isQrl = (value) => {
  return typeof value === "function" && typeof value.getSymbol === "function";
};
var qDev = globalThis.qDev === true;
var EMPTY_ARRAY = [];
var EMPTY_OBJ = {};
if (qDev) {
  Object.freeze(EMPTY_ARRAY);
  Object.freeze(EMPTY_OBJ);
  Error.stackTraceLimit = 9999;
}
[
  "click",
  "dblclick",
  "contextmenu",
  "auxclick",
  "pointerdown",
  "pointerup",
  "pointermove",
  "pointerover",
  "pointerenter",
  "pointerleave",
  "pointerout",
  "pointercancel",
  "gotpointercapture",
  "lostpointercapture",
  "touchstart",
  "touchend",
  "touchmove",
  "touchcancel",
  "mousedown",
  "mouseup",
  "mousemove",
  "mouseenter",
  "mouseleave",
  "mouseover",
  "mouseout",
  "wheel",
  "gesturestart",
  "gesturechange",
  "gestureend",
  "keydown",
  "keyup",
  "keypress",
  "input",
  "change",
  "search",
  "invalid",
  "beforeinput",
  "select",
  "focusin",
  "focusout",
  "focus",
  "blur",
  "submit",
  "reset",
  "scroll"
].map((n) => `on${n.toLowerCase()}$`);
[
  "useWatch$",
  "useClientEffect$",
  "useEffect$",
  "component$",
  "useStyles$",
  "useStylesScoped$"
].map((n) => n.toLowerCase());
function getValidManifest(manifest2) {
  if (manifest2 != null && manifest2.mapping != null && typeof manifest2.mapping === "object" && manifest2.symbols != null && typeof manifest2.symbols === "object" && manifest2.bundles != null && typeof manifest2.bundles === "object") {
    return manifest2;
  }
  return void 0;
}
function workerFetchScript() {
  const fetch2 = `Promise.all(e.data.map(u=>fetch(u))).finally(()=>{setTimeout(postMessage({}),9999)})`;
  const workerBody = `onmessage=(e)=>{${fetch2}}`;
  const blob = `new Blob(['${workerBody}'],{type:"text/javascript"})`;
  const url = `URL.createObjectURL(${blob})`;
  let s = `const w=new Worker(${url});`;
  s += `w.postMessage(u.map(u=>new URL(u,origin)+''));`;
  s += `w.onmessage=()=>{w.terminate()};`;
  return s;
}
function prefetchUrlsEventScript(prefetchResources) {
  const data2 = {
    bundles: flattenPrefetchResources(prefetchResources).map((u) => u.split("/").pop())
  };
  return `dispatchEvent(new CustomEvent("qprefetch",{detail:${JSON.stringify(data2)}}))`;
}
function flattenPrefetchResources(prefetchResources) {
  const urls = [];
  const addPrefetchResource = (prefetchResources2) => {
    if (Array.isArray(prefetchResources2)) {
      for (const prefetchResource of prefetchResources2) {
        if (!urls.includes(prefetchResource.url)) {
          urls.push(prefetchResource.url);
          addPrefetchResource(prefetchResource.imports);
        }
      }
    }
  };
  addPrefetchResource(prefetchResources);
  return urls;
}
function applyPrefetchImplementation(opts, prefetchResources) {
  const { prefetchStrategy } = opts;
  if (prefetchStrategy !== null) {
    const prefetchImpl = normalizePrefetchImplementation(prefetchStrategy == null ? void 0 : prefetchStrategy.implementation);
    const prefetchNodes = [];
    if (prefetchImpl.prefetchEvent === "always") {
      prefetchUrlsEvent(prefetchNodes, prefetchResources);
    }
    if (prefetchImpl.linkInsert === "html-append") {
      linkHtmlImplementation(prefetchNodes, prefetchResources, prefetchImpl);
    }
    if (prefetchImpl.linkInsert === "js-append") {
      linkJsImplementation(prefetchNodes, prefetchResources, prefetchImpl);
    } else if (prefetchImpl.workerFetchInsert === "always") {
      workerFetchImplementation(prefetchNodes, prefetchResources);
    }
    if (prefetchNodes.length > 0) {
      return jsx(Fragment, { children: prefetchNodes });
    }
  }
  return null;
}
function prefetchUrlsEvent(prefetchNodes, prefetchResources) {
  prefetchNodes.push(
    jsx("script", {
      type: "module",
      dangerouslySetInnerHTML: prefetchUrlsEventScript(prefetchResources)
    })
  );
}
function linkHtmlImplementation(prefetchNodes, prefetchResources, prefetchImpl) {
  const urls = flattenPrefetchResources(prefetchResources);
  const rel = prefetchImpl.linkRel || "prefetch";
  for (const url of urls) {
    const attributes = {};
    attributes["href"] = url;
    attributes["rel"] = rel;
    if (rel === "prefetch" || rel === "preload") {
      if (url.endsWith(".js")) {
        attributes["as"] = "script";
      }
    }
    prefetchNodes.push(jsx("link", attributes, void 0));
  }
}
function linkJsImplementation(prefetchNodes, prefetchResources, prefetchImpl) {
  const rel = prefetchImpl.linkRel || "prefetch";
  let s = ``;
  if (prefetchImpl.workerFetchInsert === "no-link-support") {
    s += `let supportsLinkRel = true;`;
  }
  s += `const u=${JSON.stringify(flattenPrefetchResources(prefetchResources))};`;
  s += `u.map((u,i)=>{`;
  s += `const l=document.createElement('link');`;
  s += `l.setAttribute("href",u);`;
  s += `l.setAttribute("rel","${rel}");`;
  if (prefetchImpl.workerFetchInsert === "no-link-support") {
    s += `if(i===0){`;
    s += `try{`;
    s += `supportsLinkRel=l.relList.supports("${rel}");`;
    s += `}catch(e){}`;
    s += `}`;
  }
  s += `document.body.appendChild(l);`;
  s += `});`;
  if (prefetchImpl.workerFetchInsert === "no-link-support") {
    s += `if(!supportsLinkRel){`;
    s += workerFetchScript();
    s += `}`;
  }
  if (prefetchImpl.workerFetchInsert === "always") {
    s += workerFetchScript();
  }
  prefetchNodes.push(
    jsx("script", {
      type: "module",
      dangerouslySetInnerHTML: s
    })
  );
}
function workerFetchImplementation(prefetchNodes, prefetchResources) {
  let s = `const u=${JSON.stringify(flattenPrefetchResources(prefetchResources))};`;
  s += workerFetchScript();
  prefetchNodes.push(
    jsx("script", {
      type: "module",
      dangerouslySetInnerHTML: s
    })
  );
}
function normalizePrefetchImplementation(input) {
  if (typeof input === "string") {
    switch (input) {
      case "link-prefetch-html": {
        return {
          linkInsert: "html-append",
          linkRel: "prefetch",
          workerFetchInsert: null,
          prefetchEvent: null
        };
      }
      case "link-prefetch": {
        return {
          linkInsert: "js-append",
          linkRel: "prefetch",
          workerFetchInsert: "no-link-support",
          prefetchEvent: null
        };
      }
      case "link-preload-html": {
        return {
          linkInsert: "html-append",
          linkRel: "preload",
          workerFetchInsert: null,
          prefetchEvent: null
        };
      }
      case "link-preload": {
        return {
          linkInsert: "js-append",
          linkRel: "preload",
          workerFetchInsert: "no-link-support",
          prefetchEvent: null
        };
      }
      case "link-modulepreload-html": {
        return {
          linkInsert: "html-append",
          linkRel: "modulepreload",
          workerFetchInsert: null,
          prefetchEvent: null
        };
      }
      case "link-modulepreload": {
        return {
          linkInsert: "js-append",
          linkRel: "modulepreload",
          workerFetchInsert: "no-link-support",
          prefetchEvent: null
        };
      }
    }
    return {
      linkInsert: null,
      linkRel: null,
      workerFetchInsert: "always",
      prefetchEvent: null
    };
  }
  if (input && typeof input === "object") {
    return input;
  }
  const defaultImplementation = {
    linkInsert: null,
    linkRel: null,
    workerFetchInsert: "always",
    prefetchEvent: null
  };
  return defaultImplementation;
}
var DOCTYPE = "<!DOCTYPE html>";
async function renderToStream(rootNode, opts) {
  var _a2, _b, _c, _d, _e, _f;
  let stream2 = opts.stream;
  let bufferSize = 0;
  let totalSize = 0;
  let networkFlushes = 0;
  let firstFlushTime = 0;
  const inOrderStreaming = (_b = (_a2 = opts.streaming) == null ? void 0 : _a2.inOrder) != null ? _b : {
    strategy: "auto",
    maximunInitialChunk: 5e4,
    maximunChunk: 3e4
  };
  const containerTagName = (_c = opts.containerTagName) != null ? _c : "html";
  const containerAttributes = (_d = opts.containerAttributes) != null ? _d : {};
  let buffer = "";
  const nativeStream = stream2;
  const firstFlushTimer = createTimer();
  function flush() {
    if (buffer) {
      nativeStream.write(buffer);
      buffer = "";
      bufferSize = 0;
      networkFlushes++;
      if (networkFlushes === 1) {
        firstFlushTime = firstFlushTimer();
      }
    }
  }
  function enqueue(chunk) {
    bufferSize += chunk.length;
    totalSize += chunk.length;
    buffer += chunk;
  }
  switch (inOrderStreaming.strategy) {
    case "disabled":
      stream2 = {
        write: enqueue
      };
      break;
    case "direct":
      stream2 = nativeStream;
      break;
    case "auto":
      let count = 0;
      let forceFlush = false;
      const minimunChunkSize = (_e = inOrderStreaming.maximunChunk) != null ? _e : 0;
      const initialChunkSize = (_f = inOrderStreaming.maximunInitialChunk) != null ? _f : 0;
      stream2 = {
        write(chunk) {
          if (chunk === "<!--qkssr-f-->") {
            forceFlush || (forceFlush = true);
          } else if (chunk === "<!--qkssr-pu-->") {
            count++;
          } else if (chunk === "<!--qkssr-po-->") {
            count--;
          } else {
            enqueue(chunk);
          }
          const chunkSize = networkFlushes === 0 ? initialChunkSize : minimunChunkSize;
          if (count === 0 && (forceFlush || bufferSize >= chunkSize)) {
            forceFlush = false;
            flush();
          }
        }
      };
      break;
  }
  if (containerTagName === "html") {
    stream2.write(DOCTYPE);
  } else {
    if (opts.qwikLoader) {
      if (opts.qwikLoader.include === void 0) {
        opts.qwikLoader.include = "never";
      }
      if (opts.qwikLoader.position === void 0) {
        opts.qwikLoader.position = "bottom";
      }
    } else {
      opts.qwikLoader = {
        include: "never"
      };
    }
  }
  if (!opts.manifest) {
    console.warn("Missing client manifest, loading symbols in the client might 404");
  }
  const buildBase = getBuildBase(opts);
  const resolvedManifest = resolveManifest(opts.manifest);
  await setServerPlatform(opts, resolvedManifest);
  let prefetchResources = [];
  let snapshotResult = null;
  const injections = resolvedManifest == null ? void 0 : resolvedManifest.manifest.injections;
  const beforeContent = injections ? injections.map((injection) => {
    var _a3;
    return jsx(injection.tag, (_a3 = injection.attributes) != null ? _a3 : EMPTY_OBJ);
  }) : void 0;
  const renderTimer = createTimer();
  const renderSymbols = [];
  let renderTime = 0;
  let snapshotTime = 0;
  await renderSSR(rootNode, {
    stream: stream2,
    containerTagName,
    containerAttributes,
    envData: opts.envData,
    base: buildBase,
    beforeContent,
    beforeClose: async (contexts, containerState) => {
      var _a3, _b2, _c2;
      renderTime = renderTimer();
      const snapshotTimer = createTimer();
      snapshotResult = await _pauseFromContexts(contexts, containerState);
      prefetchResources = getPrefetchResources(snapshotResult, opts, resolvedManifest);
      const jsonData = JSON.stringify(snapshotResult.state, void 0, qDev ? "  " : void 0);
      const children = [
        jsx("script", {
          type: "qwik/json",
          dangerouslySetInnerHTML: escapeText(jsonData)
        })
      ];
      if (prefetchResources.length > 0) {
        children.push(applyPrefetchImplementation(opts, prefetchResources));
      }
      const needLoader = !snapshotResult || snapshotResult.mode !== "static";
      const includeMode = (_b2 = (_a3 = opts.qwikLoader) == null ? void 0 : _a3.include) != null ? _b2 : "auto";
      const includeLoader = includeMode === "always" || includeMode === "auto" && needLoader;
      if (includeLoader) {
        const qwikLoaderScript = getQwikLoaderScript({
          events: (_c2 = opts.qwikLoader) == null ? void 0 : _c2.events,
          debug: opts.debug
        });
        children.push(
          jsx("script", {
            id: "qwikloader",
            dangerouslySetInnerHTML: qwikLoaderScript
          })
        );
      }
      const uniqueListeners = /* @__PURE__ */ new Set();
      snapshotResult.listeners.forEach((li) => {
        uniqueListeners.add(JSON.stringify(li.eventName));
      });
      const extraListeners = Array.from(uniqueListeners);
      if (extraListeners.length > 0) {
        let content = `window.qwikevents.push(${extraListeners.join(", ")})`;
        if (!includeLoader) {
          content = `window.qwikevents||=[];${content}`;
        }
        children.push(
          jsx("script", {
            dangerouslySetInnerHTML: content
          })
        );
      }
      collectRenderSymbols(renderSymbols, contexts);
      snapshotTime = snapshotTimer();
      return jsx(Fragment, { children });
    }
  });
  flush();
  const result = {
    prefetchResources: void 0,
    snapshotResult,
    flushes: networkFlushes,
    manifest: resolvedManifest == null ? void 0 : resolvedManifest.manifest,
    size: totalSize,
    timing: {
      render: renderTime,
      snapshot: snapshotTime,
      firstFlush: firstFlushTime
    },
    _symbols: renderSymbols
  };
  return result;
}
function resolveManifest(manifest2) {
  if (!manifest2) {
    return void 0;
  }
  if ("mapper" in manifest2) {
    return manifest2;
  }
  manifest2 = getValidManifest(manifest2);
  if (manifest2) {
    const mapper = {};
    Object.entries(manifest2.mapping).forEach(([key, value]) => {
      mapper[getSymbolHash(key)] = [key, value];
    });
    return {
      mapper,
      manifest: manifest2
    };
  }
  return void 0;
}
var escapeText = (str) => {
  return str.replace(/<(\/?script)/g, "\\x3C$1");
};
function collectRenderSymbols(renderSymbols, elements) {
  var _a2;
  for (const ctx of elements) {
    const symbol = (_a2 = ctx.$renderQrl$) == null ? void 0 : _a2.getSymbol();
    if (symbol && !renderSymbols.includes(symbol)) {
      renderSymbols.push(symbol);
    }
  }
}
function render(opts) {
  return renderToStream(/* @__PURE__ */ jsx(Root, {}), {
    manifest,
    ...opts
  });
}
const qwikCityHandler = qwikCity(render);
var inherits_browser = { exports: {} };
if (typeof Object.create === "function") {
  inherits_browser.exports = function inherits2(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  inherits_browser.exports = function inherits2(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}
var streamBrowser$1;
var hasRequiredStreamBrowser;
function requireStreamBrowser() {
  if (hasRequiredStreamBrowser)
    return streamBrowser$1;
  hasRequiredStreamBrowser = 1;
  streamBrowser$1 = require$$0$1.EventEmitter;
  return streamBrowser$1;
}
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$3 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var buffer_list$1;
var hasRequiredBuffer_list$1;
function requireBuffer_list$1() {
  if (hasRequiredBuffer_list$1)
    return buffer_list$1;
  hasRequiredBuffer_list$1 = 1;
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var _require = require$$0$2, Buffer2 = _require.Buffer;
  var _require2 = require$$3, inspect = _require2.inspect;
  var custom = inspect && inspect.custom || "inspect";
  function copyBuffer(src, target, offset) {
    Buffer2.prototype.copy.call(src, target, offset);
  }
  buffer_list$1 = /* @__PURE__ */ function() {
    function BufferList() {
      _classCallCheck(this, BufferList);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList, [{
      key: "push",
      value: function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s) {
        if (this.length === 0)
          return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next)
          ret += s + p.data;
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n) {
        if (this.length === 0)
          return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      }
    }, {
      key: "consume",
      value: function consume(n, hasStrings) {
        var ret;
        if (n < this.head.data.length) {
          ret = this.head.data.slice(0, n);
          this.head.data = this.head.data.slice(n);
        } else if (n === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n) : this._getBuffer(n);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      }
    }, {
      key: "_getString",
      value: function _getString(n) {
        var p = this.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length)
            ret += str;
          else
            ret += str.slice(0, n);
          n -= nb;
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        this.length -= c;
        return ret;
      }
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n) {
        var ret = Buffer2.allocUnsafe(n);
        var p = this.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        this.length -= c;
        return ret;
      }
    }, {
      key: custom,
      value: function value(_, options) {
        return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
          depth: 0,
          customInspect: false
        }));
      }
    }]);
    return BufferList;
  }();
  return buffer_list$1;
}
var destroy_1$1;
var hasRequiredDestroy;
function requireDestroy() {
  if (hasRequiredDestroy)
    return destroy_1$1;
  hasRequiredDestroy = 1;
  function destroy2(err2, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err2);
      } else if (err2) {
        if (!this._writableState) {
          process.nextTick(emitErrorNT2, this, err2);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process.nextTick(emitErrorNT2, this, err2);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err2 || null, function(err3) {
      if (!cb && err3) {
        if (!_this._writableState) {
          process.nextTick(emitErrorAndCloseNT2, _this, err3);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process.nextTick(emitErrorAndCloseNT2, _this, err3);
        } else {
          process.nextTick(emitCloseNT2, _this);
        }
      } else if (cb) {
        process.nextTick(emitCloseNT2, _this);
        cb(err3);
      } else {
        process.nextTick(emitCloseNT2, _this);
      }
    });
    return this;
  }
  function emitErrorAndCloseNT2(self2, err2) {
    emitErrorNT2(self2, err2);
    emitCloseNT2(self2);
  }
  function emitCloseNT2(self2) {
    if (self2._writableState && !self2._writableState.emitClose)
      return;
    if (self2._readableState && !self2._readableState.emitClose)
      return;
    self2.emit("close");
  }
  function undestroy2() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT2(self2, err2) {
    self2.emit("error", err2);
  }
  function errorOrDestroy2(stream2, err2) {
    var rState = stream2._readableState;
    var wState = stream2._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy)
      stream2.destroy(err2);
    else
      stream2.emit("error", err2);
  }
  destroy_1$1 = {
    destroy: destroy2,
    undestroy: undestroy2,
    errorOrDestroy: errorOrDestroy2
  };
  return destroy_1$1;
}
var errorsBrowser$1 = {};
var hasRequiredErrorsBrowser;
function requireErrorsBrowser() {
  if (hasRequiredErrorsBrowser)
    return errorsBrowser$1;
  hasRequiredErrorsBrowser = 1;
  function _inheritsLoose2(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  var codes2 = {};
  function createErrorType2(code, message, Base) {
    if (!Base) {
      Base = Error;
    }
    function getMessage(arg1, arg2, arg3) {
      if (typeof message === "string") {
        return message;
      } else {
        return message(arg1, arg2, arg3);
      }
    }
    var NodeError = /* @__PURE__ */ function(_Base) {
      _inheritsLoose2(NodeError2, _Base);
      function NodeError2(arg1, arg2, arg3) {
        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
      }
      return NodeError2;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes2[code] = NodeError;
  }
  function oneOf2(expected, thing) {
    if (Array.isArray(expected)) {
      var len = expected.length;
      expected = expected.map(function(i) {
        return String(i);
      });
      if (len > 2) {
        return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
      } else if (len === 2) {
        return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
      } else {
        return "of ".concat(thing, " ").concat(expected[0]);
      }
    } else {
      return "of ".concat(thing, " ").concat(String(expected));
    }
  }
  function startsWith2(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  }
  function endsWith2(str, search, this_len) {
    if (this_len === void 0 || this_len > str.length) {
      this_len = str.length;
    }
    return str.substring(this_len - search.length, this_len) === search;
  }
  function includes2(str, search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  createErrorType2("ERR_INVALID_OPT_VALUE", function(name2, value) {
    return 'The value "' + value + '" is invalid for option "' + name2 + '"';
  }, TypeError);
  createErrorType2("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
    var determiner;
    if (typeof expected === "string" && startsWith2(expected, "not ")) {
      determiner = "must not be";
      expected = expected.replace(/^not /, "");
    } else {
      determiner = "must be";
    }
    var msg2;
    if (endsWith2(name2, " argument")) {
      msg2 = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf2(expected, "type"));
    } else {
      var type = includes2(name2, ".") ? "property" : "argument";
      msg2 = 'The "'.concat(name2, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf2(expected, "type"));
    }
    msg2 += ". Received type ".concat(typeof actual);
    return msg2;
  }, TypeError);
  createErrorType2("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
  createErrorType2("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
    return "The " + name2 + " method is not implemented";
  });
  createErrorType2("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
  createErrorType2("ERR_STREAM_DESTROYED", function(name2) {
    return "Cannot call " + name2 + " after a stream was destroyed";
  });
  createErrorType2("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
  createErrorType2("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
  createErrorType2("ERR_STREAM_WRITE_AFTER_END", "write after end");
  createErrorType2("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  createErrorType2("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
  }, TypeError);
  createErrorType2("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
  errorsBrowser$1.codes = codes2;
  return errorsBrowser$1;
}
var state$1;
var hasRequiredState;
function requireState() {
  if (hasRequiredState)
    return state$1;
  hasRequiredState = 1;
  var ERR_INVALID_OPT_VALUE2 = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;
  function highWaterMarkFrom2(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  function getHighWaterMark2(state2, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom2(options, isDuplex, duplexKey);
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name2 = isDuplex ? duplexKey : "highWaterMark";
        throw new ERR_INVALID_OPT_VALUE2(name2, hwm);
      }
      return Math.floor(hwm);
    }
    return state2.objectMode ? 16 : 16 * 1024;
  }
  state$1 = {
    getHighWaterMark: getHighWaterMark2
  };
  return state$1;
}
var browser$1;
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser)
    return browser$1;
  hasRequiredBrowser = 1;
  browser$1 = deprecate;
  function deprecate(fn, msg2) {
    if (config2("noDeprecation")) {
      return fn;
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config2("throwDeprecation")) {
          throw new Error(msg2);
        } else if (config2("traceDeprecation")) {
          console.trace(msg2);
        } else {
          console.warn(msg2);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }
    return deprecated;
  }
  function config2(name2) {
    try {
      if (!commonjsGlobal.localStorage)
        return false;
    } catch (_) {
      return false;
    }
    var val = commonjsGlobal.localStorage[name2];
    if (null == val)
      return false;
    return String(val).toLowerCase() === "true";
  }
  return browser$1;
}
var _stream_writable$1;
var hasRequired_stream_writable$1;
function require_stream_writable$1() {
  if (hasRequired_stream_writable$1)
    return _stream_writable$1;
  hasRequired_stream_writable$1 = 1;
  _stream_writable$1 = Writable;
  function CorkedRequest(state2) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state2);
    };
  }
  var Duplex2;
  Writable.WritableState = WritableState;
  var internalUtil = {
    deprecate: requireBrowser()
  };
  var Stream2 = requireStreamBrowser();
  var Buffer2 = require$$0$2.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = requireDestroy();
  var _require = requireState(), getHighWaterMark2 = _require.getHighWaterMark;
  var _require$codes2 = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes2.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED2 = _require$codes2.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK2 = _require$codes2.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes2.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED2 = _require$codes2.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes2.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes2.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes2.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy2 = destroyImpl.errorOrDestroy;
  inherits_browser.exports(Writable, Stream2);
  function nop() {
  }
  function WritableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || require_stream_duplex$1();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark2(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream2, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object))
          return true;
        if (this !== Writable)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object) {
      return object instanceof this;
    };
  }
  function Writable(options) {
    Duplex2 = Duplex2 || require_stream_duplex$1();
    var isDuplex = this instanceof Duplex2;
    if (!isDuplex && !realHasInstance.call(Writable, this))
      return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream2.call(this);
  }
  Writable.prototype.pipe = function() {
    errorOrDestroy2(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream2, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy2(stream2, er);
    process.nextTick(cb, er);
  }
  function validChunk(stream2, state2, chunk, cb) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy2(stream2, er);
      process.nextTick(cb, er);
      return false;
    }
    return true;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    var ret = false;
    var isBuf = !state2.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer2.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state2.defaultEncoding;
    if (typeof cb !== "function")
      cb = nop;
    if (state2.ending)
      writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state2, chunk, cb)) {
      state2.pendingcb++;
      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable.prototype.uncork = function() {
    var state2 = this._writableState;
    if (state2.corked) {
      state2.corked--;
      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest)
        clearBuffer(this, state2);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableBuffer", {
    enumerable: false,
    get: function get2() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state2, chunk, encoding) {
    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer2.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get2() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream2, state2, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state2, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len = state2.objectMode ? 1 : chunk.length;
    state2.length += len;
    var ret = state2.length < state2.highWaterMark;
    if (!ret)
      state2.needDrain = true;
    if (state2.writing || state2.corked) {
      var last = state2.lastBufferedRequest;
      state2.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state2.lastBufferedRequest;
      } else {
        state2.bufferedRequest = state2.lastBufferedRequest;
      }
      state2.bufferedRequestCount += 1;
    } else {
      doWrite(stream2, state2, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream2, state2, writev, len, chunk, encoding, cb) {
    state2.writelen = len;
    state2.writecb = cb;
    state2.writing = true;
    state2.sync = true;
    if (state2.destroyed)
      state2.onwrite(new ERR_STREAM_DESTROYED2("write"));
    else if (writev)
      stream2._writev(chunk, state2.onwrite);
    else
      stream2._write(chunk, encoding, state2.onwrite);
    state2.sync = false;
  }
  function onwriteError(stream2, state2, sync, er, cb) {
    --state2.pendingcb;
    if (sync) {
      process.nextTick(cb, er);
      process.nextTick(finishMaybe, stream2, state2);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy2(stream2, er);
    } else {
      cb(er);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy2(stream2, er);
      finishMaybe(stream2, state2);
    }
  }
  function onwriteStateUpdate(state2) {
    state2.writing = false;
    state2.writecb = null;
    state2.length -= state2.writelen;
    state2.writelen = 0;
  }
  function onwrite(stream2, er) {
    var state2 = stream2._writableState;
    var sync = state2.sync;
    var cb = state2.writecb;
    if (typeof cb !== "function")
      throw new ERR_MULTIPLE_CALLBACK2();
    onwriteStateUpdate(state2);
    if (er)
      onwriteError(stream2, state2, sync, er, cb);
    else {
      var finished = needFinish(state2) || stream2.destroyed;
      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
        clearBuffer(stream2, state2);
      }
      if (sync) {
        process.nextTick(afterWrite, stream2, state2, finished, cb);
      } else {
        afterWrite(stream2, state2, finished, cb);
      }
    }
  }
  function afterWrite(stream2, state2, finished, cb) {
    if (!finished)
      onwriteDrain(stream2, state2);
    state2.pendingcb--;
    cb();
    finishMaybe(stream2, state2);
  }
  function onwriteDrain(stream2, state2) {
    if (state2.length === 0 && state2.needDrain) {
      state2.needDrain = false;
      stream2.emit("drain");
    }
  }
  function clearBuffer(stream2, state2) {
    state2.bufferProcessing = true;
    var entry = state2.bufferedRequest;
    if (stream2._writev && entry && entry.next) {
      var l = state2.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state2.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer.allBuffers = allBuffers;
      doWrite(stream2, state2, true, state2.length, buffer, "", holder.finish);
      state2.pendingcb++;
      state2.lastBufferedRequest = null;
      if (holder.next) {
        state2.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state2.corkedRequestsFree = new CorkedRequest(state2);
      }
      state2.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state2.objectMode ? 1 : chunk.length;
        doWrite(stream2, state2, false, len, chunk, encoding, cb);
        entry = entry.next;
        state2.bufferedRequestCount--;
        if (state2.writing) {
          break;
        }
      }
      if (entry === null)
        state2.lastBufferedRequest = null;
    }
    state2.bufferedRequest = entry;
    state2.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED2("_write()"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state2.corked) {
      state2.corked = 1;
      this.uncork();
    }
    if (!state2.ending)
      endWritable(this, state2, cb);
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableLength", {
    enumerable: false,
    get: function get2() {
      return this._writableState.length;
    }
  });
  function needFinish(state2) {
    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
  }
  function callFinal(stream2, state2) {
    stream2._final(function(err2) {
      state2.pendingcb--;
      if (err2) {
        errorOrDestroy2(stream2, err2);
      }
      state2.prefinished = true;
      stream2.emit("prefinish");
      finishMaybe(stream2, state2);
    });
  }
  function prefinish2(stream2, state2) {
    if (!state2.prefinished && !state2.finalCalled) {
      if (typeof stream2._final === "function" && !state2.destroyed) {
        state2.pendingcb++;
        state2.finalCalled = true;
        process.nextTick(callFinal, stream2, state2);
      } else {
        state2.prefinished = true;
        stream2.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream2, state2) {
    var need = needFinish(state2);
    if (need) {
      prefinish2(stream2, state2);
      if (state2.pendingcb === 0) {
        state2.finished = true;
        stream2.emit("finish");
        if (state2.autoDestroy) {
          var rState = stream2._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream2.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream2, state2, cb) {
    state2.ending = true;
    finishMaybe(stream2, state2);
    if (cb) {
      if (state2.finished)
        process.nextTick(cb);
      else
        stream2.once("finish", cb);
    }
    state2.ended = true;
    stream2.writable = false;
  }
  function onCorkedFinish(corkReq, state2, err2) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state2.pendingcb--;
      cb(err2);
      entry = entry.next;
    }
    state2.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    enumerable: false,
    get: function get2() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err2, cb) {
    cb(err2);
  };
  return _stream_writable$1;
}
var _stream_duplex$1;
var hasRequired_stream_duplex$1;
function require_stream_duplex$1() {
  if (hasRequired_stream_duplex$1)
    return _stream_duplex$1;
  hasRequired_stream_duplex$1 = 1;
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key in obj)
      keys2.push(key);
    return keys2;
  };
  _stream_duplex$1 = Duplex2;
  var Readable2 = require_stream_readable$1();
  var Writable = require_stream_writable$1();
  inherits_browser.exports(Duplex2, Readable2);
  {
    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex2.prototype[method])
        Duplex2.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex2(options) {
    if (!(this instanceof Duplex2))
      return new Duplex2(options);
    Readable2.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false)
        this.readable = false;
      if (options.writable === false)
        this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get2() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableBuffer", {
    enumerable: false,
    get: function get2() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableLength", {
    enumerable: false,
    get: function get2() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended)
      return;
    process.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex2.prototype, "destroyed", {
    enumerable: false,
    get: function get2() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  return _stream_duplex$1;
}
var string_decoder$1 = {};
var safeBuffer$1 = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var hasRequiredSafeBuffer$1;
function requireSafeBuffer$1() {
  if (hasRequiredSafeBuffer$1)
    return safeBuffer$1.exports;
  hasRequiredSafeBuffer$1 = 1;
  (function(module, exports) {
    var buffer = require$$0$2;
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  })(safeBuffer$1, safeBuffer$1.exports);
  return safeBuffer$1.exports;
}
var hasRequiredString_decoder$1;
function requireString_decoder$1() {
  if (hasRequiredString_decoder$1)
    return string_decoder$1;
  hasRequiredString_decoder$1 = 1;
  var Buffer2 = requireSafeBuffer$1().Buffer;
  var isEncoding = Buffer2.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function _normalizeEncoding(enc) {
    if (!enc)
      return "utf8";
    var retried;
    while (true) {
      switch (enc) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return enc;
        default:
          if (retried)
            return;
          enc = ("" + enc).toLowerCase();
          retried = true;
      }
    }
  }
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
      throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
  }
  string_decoder$1.StringDecoder = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case "utf16le":
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case "utf8":
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case "base64":
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer2.allocUnsafe(nb);
  }
  StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0)
      return "";
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === void 0)
        return "";
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length)
      return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
  };
  StringDecoder.prototype.end = utf8End;
  StringDecoder.prototype.text = utf8Text;
  StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };
  function utf8CheckByte(byte) {
    if (byte <= 127)
      return 0;
    else if (byte >> 5 === 6)
      return 2;
    else if (byte >> 4 === 14)
      return 3;
    else if (byte >> 3 === 30)
      return 4;
    return byte >> 6 === 2 ? -1 : -2;
  }
  function utf8CheckIncomplete(self2, buf, i) {
    var j = buf.length - 1;
    if (j < i)
      return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0)
        self2.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2)
      return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0)
        self2.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2)
      return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2)
          nb = 0;
        else
          self2.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }
  function utf8CheckExtraBytes(self2, buf, p) {
    if ((buf[0] & 192) !== 128) {
      self2.lastNeed = 0;
      return "\uFFFD";
    }
    if (self2.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 192) !== 128) {
        self2.lastNeed = 1;
        return "\uFFFD";
      }
      if (self2.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 192) !== 128) {
          self2.lastNeed = 2;
          return "\uFFFD";
        }
      }
    }
  }
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf);
    if (r !== void 0)
      return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed)
      return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
  }
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed)
      return r + "\uFFFD";
    return r;
  }
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString("utf16le", i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 55296 && c <= 56319) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
  }
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
  }
  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0)
      return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
  }
  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed)
      return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
  }
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
  }
  return string_decoder$1;
}
var endOfStream$1;
var hasRequiredEndOfStream;
function requireEndOfStream() {
  if (hasRequiredEndOfStream)
    return endOfStream$1;
  hasRequiredEndOfStream = 1;
  var ERR_STREAM_PREMATURE_CLOSE2 = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;
  function once2(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      callback.apply(this, args);
    };
  }
  function noop2() {
  }
  function isRequest2(stream2) {
    return stream2.setHeader && typeof stream2.abort === "function";
  }
  function eos2(stream2, opts, callback) {
    if (typeof opts === "function")
      return eos2(stream2, null, opts);
    if (!opts)
      opts = {};
    callback = once2(callback || noop2);
    var readable = opts.readable || opts.readable !== false && stream2.readable;
    var writable = opts.writable || opts.writable !== false && stream2.writable;
    var onlegacyfinish = function onlegacyfinish2() {
      if (!stream2.writable)
        onfinish();
    };
    var writableEnded = stream2._writableState && stream2._writableState.finished;
    var onfinish = function onfinish2() {
      writable = false;
      writableEnded = true;
      if (!readable)
        callback.call(stream2);
    };
    var readableEnded = stream2._readableState && stream2._readableState.endEmitted;
    var onend = function onend2() {
      readable = false;
      readableEnded = true;
      if (!writable)
        callback.call(stream2);
    };
    var onerror = function onerror2(err2) {
      callback.call(stream2, err2);
    };
    var onclose = function onclose2() {
      var err2;
      if (readable && !readableEnded) {
        if (!stream2._readableState || !stream2._readableState.ended)
          err2 = new ERR_STREAM_PREMATURE_CLOSE2();
        return callback.call(stream2, err2);
      }
      if (writable && !writableEnded) {
        if (!stream2._writableState || !stream2._writableState.ended)
          err2 = new ERR_STREAM_PREMATURE_CLOSE2();
        return callback.call(stream2, err2);
      }
    };
    var onrequest = function onrequest2() {
      stream2.req.on("finish", onfinish);
    };
    if (isRequest2(stream2)) {
      stream2.on("complete", onfinish);
      stream2.on("abort", onclose);
      if (stream2.req)
        onrequest();
      else
        stream2.on("request", onrequest);
    } else if (writable && !stream2._writableState) {
      stream2.on("end", onlegacyfinish);
      stream2.on("close", onlegacyfinish);
    }
    stream2.on("end", onend);
    stream2.on("finish", onfinish);
    if (opts.error !== false)
      stream2.on("error", onerror);
    stream2.on("close", onclose);
    return function() {
      stream2.removeListener("complete", onfinish);
      stream2.removeListener("abort", onclose);
      stream2.removeListener("request", onrequest);
      if (stream2.req)
        stream2.req.removeListener("finish", onfinish);
      stream2.removeListener("end", onlegacyfinish);
      stream2.removeListener("close", onlegacyfinish);
      stream2.removeListener("finish", onfinish);
      stream2.removeListener("end", onend);
      stream2.removeListener("error", onerror);
      stream2.removeListener("close", onclose);
    };
  }
  endOfStream$1 = eos2;
  return endOfStream$1;
}
var async_iterator$1;
var hasRequiredAsync_iterator$1;
function requireAsync_iterator$1() {
  if (hasRequiredAsync_iterator$1)
    return async_iterator$1;
  hasRequiredAsync_iterator$1 = 1;
  var _Object$setPrototypeO;
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var finished = requireEndOfStream();
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult(value, done2) {
    return {
      value,
      done: done2
    };
  }
  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
      var data2 = iter[kStream].read();
      if (data2 !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data2, false));
      }
    }
  }
  function onReadable(iter) {
    process.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve(createIterResult(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve, reject) {
          process.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data2 = this[kStream].read();
        if (data2 !== null) {
          return Promise.resolve(createIterResult(data2, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve, reject) {
      _this2[kStream].destroy(null, function(err2) {
        if (err2) {
          reject(err2);
          return;
        }
        resolve(createIterResult(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream2) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream2,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream2._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve, reject) {
        var data2 = iterator[kStream].read();
        if (data2) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data2, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream2, function(err2) {
      if (err2 && err2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err2);
        }
        iterator[kError] = err2;
        return;
      }
      var resolve = iterator[kLastResolve];
      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream2.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  async_iterator$1 = createReadableStreamAsyncIterator;
  return async_iterator$1;
}
var fromBrowser$1;
var hasRequiredFromBrowser$1;
function requireFromBrowser$1() {
  if (hasRequiredFromBrowser$1)
    return fromBrowser$1;
  hasRequiredFromBrowser$1 = 1;
  fromBrowser$1 = function() {
    throw new Error("Readable.from is not available in the browser");
  };
  return fromBrowser$1;
}
var _stream_readable$1;
var hasRequired_stream_readable$1;
function require_stream_readable$1() {
  if (hasRequired_stream_readable$1)
    return _stream_readable$1;
  hasRequired_stream_readable$1 = 1;
  _stream_readable$1 = Readable2;
  var Duplex2;
  Readable2.ReadableState = ReadableState;
  require$$0$1.EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream2 = requireStreamBrowser();
  var Buffer2 = require$$0$2.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = require$$3;
  var debug;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function debug2() {
    };
  }
  var BufferList = requireBuffer_list$1();
  var destroyImpl = requireDestroy();
  var _require = requireState(), getHighWaterMark2 = _require.getHighWaterMark;
  var _require$codes2 = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes2.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes2.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED2 = _require$codes2.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes2.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  inherits_browser.exports(Readable2, Stream2);
  var errorOrDestroy2 = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || require_stream_duplex$1();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark2(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = requireString_decoder$1().StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable2(options) {
    Duplex2 = Duplex2 || require_stream_duplex$1();
    if (!(this instanceof Readable2))
      return new Readable2(options);
    var isDuplex = this instanceof Duplex2;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream2.call(this);
  }
  Object.defineProperty(Readable2.prototype, "destroyed", {
    enumerable: false,
    get: function get2() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable2.prototype.destroy = destroyImpl.destroy;
  Readable2.prototype._undestroy = destroyImpl.undestroy;
  Readable2.prototype._destroy = function(err2, cb) {
    cb(err2);
  };
  Readable2.prototype.push = function(chunk, encoding) {
    var state2 = this._readableState;
    var skipChunkCheck;
    if (!state2.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state2.defaultEncoding;
        if (encoding !== state2.encoding) {
          chunk = Buffer2.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable2.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream2, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state2 = stream2._readableState;
    if (chunk === null) {
      state2.reading = false;
      onEofChunk(stream2, state2);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state2, chunk);
      if (er) {
        errorOrDestroy2(stream2, er);
      } else if (state2.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state2.endEmitted)
            errorOrDestroy2(stream2, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else
            addChunk(stream2, state2, chunk, true);
        } else if (state2.ended) {
          errorOrDestroy2(stream2, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state2.destroyed) {
          return false;
        } else {
          state2.reading = false;
          if (state2.decoder && !encoding) {
            chunk = state2.decoder.write(chunk);
            if (state2.objectMode || chunk.length !== 0)
              addChunk(stream2, state2, chunk, false);
            else
              maybeReadMore(stream2, state2);
          } else {
            addChunk(stream2, state2, chunk, false);
          }
        }
      } else if (!addToFront) {
        state2.reading = false;
        maybeReadMore(stream2, state2);
      }
    }
    return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);
  }
  function addChunk(stream2, state2, chunk, addToFront) {
    if (state2.flowing && state2.length === 0 && !state2.sync) {
      state2.awaitDrain = 0;
      stream2.emit("data", chunk);
    } else {
      state2.length += state2.objectMode ? 1 : chunk.length;
      if (addToFront)
        state2.buffer.unshift(chunk);
      else
        state2.buffer.push(chunk);
      if (state2.needReadable)
        emitReadable(stream2);
    }
    maybeReadMore(stream2, state2);
  }
  function chunkInvalid(state2, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable2.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable2.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = requireString_decoder$1().StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p = this._readableState.buffer.head;
    var content = "";
    while (p !== null) {
      content += decoder.write(p.data);
      p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "")
      this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  function howMuchToRead(n, state2) {
    if (n <= 0 || state2.length === 0 && state2.ended)
      return 0;
    if (state2.objectMode)
      return 1;
    if (n !== n) {
      if (state2.flowing && state2.length)
        return state2.buffer.head.data.length;
      else
        return state2.length;
    }
    if (n > state2.highWaterMark)
      state2.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state2.length)
      return n;
    if (!state2.ended) {
      state2.needReadable = true;
      return 0;
    }
    return state2.length;
  }
  Readable2.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state2 = this._readableState;
    var nOrig = n;
    if (n !== 0)
      state2.emittedReadable = false;
    if (n === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {
      debug("read: emitReadable", state2.length, state2.ended);
      if (state2.length === 0 && state2.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n = howMuchToRead(n, state2);
    if (n === 0 && state2.ended) {
      if (state2.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state2.needReadable;
    debug("need readable", doRead);
    if (state2.length === 0 || state2.length - n < state2.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state2.ended || state2.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state2.reading = true;
      state2.sync = true;
      if (state2.length === 0)
        state2.needReadable = true;
      this._read(state2.highWaterMark);
      state2.sync = false;
      if (!state2.reading)
        n = howMuchToRead(nOrig, state2);
    }
    var ret;
    if (n > 0)
      ret = fromList(n, state2);
    else
      ret = null;
    if (ret === null) {
      state2.needReadable = state2.length <= state2.highWaterMark;
      n = 0;
    } else {
      state2.length -= n;
      state2.awaitDrain = 0;
    }
    if (state2.length === 0) {
      if (!state2.ended)
        state2.needReadable = true;
      if (nOrig !== n && state2.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream2, state2) {
    debug("onEofChunk");
    if (state2.ended)
      return;
    if (state2.decoder) {
      var chunk = state2.decoder.end();
      if (chunk && chunk.length) {
        state2.buffer.push(chunk);
        state2.length += state2.objectMode ? 1 : chunk.length;
      }
    }
    state2.ended = true;
    if (state2.sync) {
      emitReadable(stream2);
    } else {
      state2.needReadable = false;
      if (!state2.emittedReadable) {
        state2.emittedReadable = true;
        emitReadable_(stream2);
      }
    }
  }
  function emitReadable(stream2) {
    var state2 = stream2._readableState;
    debug("emitReadable", state2.needReadable, state2.emittedReadable);
    state2.needReadable = false;
    if (!state2.emittedReadable) {
      debug("emitReadable", state2.flowing);
      state2.emittedReadable = true;
      process.nextTick(emitReadable_, stream2);
    }
  }
  function emitReadable_(stream2) {
    var state2 = stream2._readableState;
    debug("emitReadable_", state2.destroyed, state2.length, state2.ended);
    if (!state2.destroyed && (state2.length || state2.ended)) {
      stream2.emit("readable");
      state2.emittedReadable = false;
    }
    state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;
    flow(stream2);
  }
  function maybeReadMore(stream2, state2) {
    if (!state2.readingMore) {
      state2.readingMore = true;
      process.nextTick(maybeReadMore_, stream2, state2);
    }
  }
  function maybeReadMore_(stream2, state2) {
    while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {
      var len = state2.length;
      debug("maybeReadMore read 0");
      stream2.read(0);
      if (len === state2.length)
        break;
    }
    state2.readingMore = false;
  }
  Readable2.prototype._read = function(n) {
    errorOrDestroy2(this, new ERR_METHOD_NOT_IMPLEMENTED2("_read()"));
  };
  Readable2.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state2 = this._readableState;
    switch (state2.pipesCount) {
      case 0:
        state2.pipes = dest;
        break;
      case 1:
        state2.pipes = [state2.pipes, dest];
        break;
      default:
        state2.pipes.push(dest);
        break;
    }
    state2.pipesCount += 1;
    debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state2.endEmitted)
      process.nextTick(endFn);
    else
      src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src.removeListener("end", onend);
      src.removeListener("end", unpipe);
      src.removeListener("data", ondata);
      cleanedUp = true;
      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      var ret = dest.write(chunk);
      debug("dest.write", ret);
      if (ret === false) {
        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state2.awaitDrain);
          state2.awaitDrain++;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        errorOrDestroy2(dest, er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src.unpipe(dest);
    }
    dest.emit("pipe", src);
    if (!state2.flowing) {
      debug("pipe resume");
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state2 = src._readableState;
      debug("pipeOnDrain", state2.awaitDrain);
      if (state2.awaitDrain)
        state2.awaitDrain--;
      if (state2.awaitDrain === 0 && EElistenerCount(src, "data")) {
        state2.flowing = true;
        flow(src);
      }
    };
  }
  Readable2.prototype.unpipe = function(dest) {
    var state2 = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state2.pipesCount === 0)
      return this;
    if (state2.pipesCount === 1) {
      if (dest && dest !== state2.pipes)
        return this;
      if (!dest)
        dest = state2.pipes;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state2.pipes;
      var len = state2.pipesCount;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      for (var i = 0; i < len; i++)
        dests[i].emit("unpipe", this, {
          hasUnpiped: false
        });
      return this;
    }
    var index2 = indexOf2(state2.pipes, dest);
    if (index2 === -1)
      return this;
    state2.pipes.splice(index2, 1);
    state2.pipesCount -= 1;
    if (state2.pipesCount === 1)
      state2.pipes = state2.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable2.prototype.on = function(ev, fn) {
    var res = Stream2.prototype.on.call(this, ev, fn);
    var state2 = this._readableState;
    if (ev === "data") {
      state2.readableListening = this.listenerCount("readable") > 0;
      if (state2.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      if (!state2.endEmitted && !state2.readableListening) {
        state2.readableListening = state2.needReadable = true;
        state2.flowing = false;
        state2.emittedReadable = false;
        debug("on readable", state2.length, state2.reading);
        if (state2.length) {
          emitReadable(this);
        } else if (!state2.reading) {
          process.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable2.prototype.addListener = Readable2.prototype.on;
  Readable2.prototype.removeListener = function(ev, fn) {
    var res = Stream2.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable2.prototype.removeAllListeners = function(ev) {
    var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state2 = self2._readableState;
    state2.readableListening = self2.listenerCount("readable") > 0;
    if (state2.resumeScheduled && !state2.paused) {
      state2.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable2.prototype.resume = function() {
    var state2 = this._readableState;
    if (!state2.flowing) {
      debug("resume");
      state2.flowing = !state2.readableListening;
      resume(this, state2);
    }
    state2.paused = false;
    return this;
  };
  function resume(stream2, state2) {
    if (!state2.resumeScheduled) {
      state2.resumeScheduled = true;
      process.nextTick(resume_, stream2, state2);
    }
  }
  function resume_(stream2, state2) {
    debug("resume", state2.reading);
    if (!state2.reading) {
      stream2.read(0);
    }
    state2.resumeScheduled = false;
    stream2.emit("resume");
    flow(stream2);
    if (state2.flowing && !state2.reading)
      stream2.read(0);
  }
  Readable2.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow(stream2) {
    var state2 = stream2._readableState;
    debug("flow", state2.flowing);
    while (state2.flowing && stream2.read() !== null)
      ;
  }
  Readable2.prototype.wrap = function(stream2) {
    var _this = this;
    var state2 = this._readableState;
    var paused = false;
    stream2.on("end", function() {
      debug("wrapped end");
      if (state2.decoder && !state2.ended) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream2.on("data", function(chunk) {
      debug("wrapped data");
      if (state2.decoder)
        chunk = state2.decoder.write(chunk);
      if (state2.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state2.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream2.pause();
      }
    });
    for (var i in stream2) {
      if (this[i] === void 0 && typeof stream2[i] === "function") {
        this[i] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream2[method].apply(stream2, arguments);
          };
        }(i);
      }
    }
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream2.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }
    this._read = function(n2) {
      debug("wrapped _read", n2);
      if (paused) {
        paused = false;
        stream2.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable2.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = requireAsync_iterator$1();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function get2() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableBuffer", {
    enumerable: false,
    get: function get2() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableFlowing", {
    enumerable: false,
    get: function get2() {
      return this._readableState.flowing;
    },
    set: function set(state2) {
      if (this._readableState) {
        this._readableState.flowing = state2;
      }
    }
  });
  Readable2._fromList = fromList;
  Object.defineProperty(Readable2.prototype, "readableLength", {
    enumerable: false,
    get: function get2() {
      return this._readableState.length;
    }
  });
  function fromList(n, state2) {
    if (state2.length === 0)
      return null;
    var ret;
    if (state2.objectMode)
      ret = state2.buffer.shift();
    else if (!n || n >= state2.length) {
      if (state2.decoder)
        ret = state2.buffer.join("");
      else if (state2.buffer.length === 1)
        ret = state2.buffer.first();
      else
        ret = state2.buffer.concat(state2.length);
      state2.buffer.clear();
    } else {
      ret = state2.buffer.consume(n, state2.decoder);
    }
    return ret;
  }
  function endReadable(stream2) {
    var state2 = stream2._readableState;
    debug("endReadable", state2.endEmitted);
    if (!state2.endEmitted) {
      state2.ended = true;
      process.nextTick(endReadableNT, state2, stream2);
    }
  }
  function endReadableNT(state2, stream2) {
    debug("endReadableNT", state2.endEmitted, state2.length);
    if (!state2.endEmitted && state2.length === 0) {
      state2.endEmitted = true;
      stream2.readable = false;
      stream2.emit("end");
      if (state2.autoDestroy) {
        var wState = stream2._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream2.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable2.from = function(iterable, opts) {
      if (from === void 0) {
        from = requireFromBrowser$1();
      }
      return from(Readable2, iterable, opts);
    };
  }
  function indexOf2(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x)
        return i;
    }
    return -1;
  }
  return _stream_readable$1;
}
var _stream_transform$1;
var hasRequired_stream_transform;
function require_stream_transform() {
  if (hasRequired_stream_transform)
    return _stream_transform$1;
  hasRequired_stream_transform = 1;
  _stream_transform$1 = Transform2;
  var _require$codes2 = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED2 = _require$codes2.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK2 = _require$codes2.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING2 = _require$codes2.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_02 = _require$codes2.ERR_TRANSFORM_WITH_LENGTH_0;
  var Duplex2 = require_stream_duplex$1();
  inherits_browser.exports(Transform2, Duplex2);
  function afterTransform2(er, data2) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) {
      return this.emit("error", new ERR_MULTIPLE_CALLBACK2());
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data2 != null)
      this.push(data2);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform2(options) {
    if (!(this instanceof Transform2))
      return new Transform2(options);
    Duplex2.call(this, options);
    this._transformState = {
      afterTransform: afterTransform2.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish2);
  }
  function prefinish2() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) {
      this._flush(function(er, data2) {
        done2(_this, er, data2);
      });
    } else {
      done2(this, null, null);
    }
  }
  Transform2.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex2.prototype.push.call(this, chunk, encoding);
  };
  Transform2.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED2("_transform()"));
  };
  Transform2.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform2.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform2.prototype._destroy = function(err2, cb) {
    Duplex2.prototype._destroy.call(this, err2, function(err22) {
      cb(err22);
    });
  };
  function done2(stream2, er, data2) {
    if (er)
      return stream2.emit("error", er);
    if (data2 != null)
      stream2.push(data2);
    if (stream2._writableState.length)
      throw new ERR_TRANSFORM_WITH_LENGTH_02();
    if (stream2._transformState.transforming)
      throw new ERR_TRANSFORM_ALREADY_TRANSFORMING2();
    return stream2.push(null);
  }
  return _stream_transform$1;
}
var _stream_passthrough$1;
var hasRequired_stream_passthrough;
function require_stream_passthrough() {
  if (hasRequired_stream_passthrough)
    return _stream_passthrough$1;
  hasRequired_stream_passthrough = 1;
  _stream_passthrough$1 = PassThrough2;
  var Transform2 = require_stream_transform();
  inherits_browser.exports(PassThrough2, Transform2);
  function PassThrough2(options) {
    if (!(this instanceof PassThrough2))
      return new PassThrough2(options);
    Transform2.call(this, options);
  }
  PassThrough2.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
  return _stream_passthrough$1;
}
var pipeline_1$1;
var hasRequiredPipeline;
function requirePipeline() {
  if (hasRequiredPipeline)
    return pipeline_1$1;
  hasRequiredPipeline = 1;
  var eos2;
  function once2(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  var _require$codes2 = requireErrorsBrowser().codes, ERR_MISSING_ARGS2 = _require$codes2.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED2 = _require$codes2.ERR_STREAM_DESTROYED;
  function noop2(err2) {
    if (err2)
      throw err2;
  }
  function isRequest2(stream2) {
    return stream2.setHeader && typeof stream2.abort === "function";
  }
  function destroyer2(stream2, reading, writing, callback) {
    callback = once2(callback);
    var closed = false;
    stream2.on("close", function() {
      closed = true;
    });
    if (eos2 === void 0)
      eos2 = requireEndOfStream();
    eos2(stream2, {
      readable: reading,
      writable: writing
    }, function(err2) {
      if (err2)
        return callback(err2);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err2) {
      if (closed)
        return;
      if (destroyed)
        return;
      destroyed = true;
      if (isRequest2(stream2))
        return stream2.abort();
      if (typeof stream2.destroy === "function")
        return stream2.destroy();
      callback(err2 || new ERR_STREAM_DESTROYED2("pipe"));
    };
  }
  function call2(fn) {
    fn();
  }
  function pipe2(from, to) {
    return from.pipe(to);
  }
  function popCallback2(streams) {
    if (!streams.length)
      return noop2;
    if (typeof streams[streams.length - 1] !== "function")
      return noop2;
    return streams.pop();
  }
  function pipeline2() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
    var callback = popCallback2(streams);
    if (Array.isArray(streams[0]))
      streams = streams[0];
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS2("streams");
    }
    var error;
    var destroys = streams.map(function(stream2, i) {
      var reading = i < streams.length - 1;
      var writing = i > 0;
      return destroyer2(stream2, reading, writing, function(err2) {
        if (!error)
          error = err2;
        if (err2)
          destroys.forEach(call2);
        if (reading)
          return;
        destroys.forEach(call2);
        callback(error);
      });
    });
    return streams.reduce(pipe2);
  }
  pipeline_1$1 = pipeline2;
  return pipeline_1$1;
}
var streamBrowserify = Stream;
var EE = require$$0$1.EventEmitter;
var inherits$2 = inherits_browser.exports;
inherits$2(Stream, EE);
Stream.Readable = require_stream_readable$1();
Stream.Writable = require_stream_writable$1();
Stream.Duplex = require_stream_duplex$1();
Stream.Transform = require_stream_transform();
Stream.PassThrough = require_stream_passthrough();
Stream.finished = requireEndOfStream();
Stream.pipeline = requirePipeline();
Stream.Stream = Stream;
function Stream() {
  EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
  var source = this;
  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }
  source.on("data", ondata);
  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }
  dest.on("drain", ondrain);
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on("end", onend);
    source.on("close", onclose);
  }
  var didOnEnd = false;
  function onend() {
    if (didOnEnd)
      return;
    didOnEnd = true;
    dest.end();
  }
  function onclose() {
    if (didOnEnd)
      return;
    didOnEnd = true;
    if (typeof dest.destroy === "function")
      dest.destroy();
  }
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, "error") === 0) {
      throw er;
    }
  }
  source.on("error", onerror);
  dest.on("error", onerror);
  function cleanup() {
    source.removeListener("data", ondata);
    dest.removeListener("drain", ondrain);
    source.removeListener("end", onend);
    source.removeListener("close", onclose);
    source.removeListener("error", onerror);
    dest.removeListener("error", onerror);
    source.removeListener("end", cleanup);
    source.removeListener("close", cleanup);
    dest.removeListener("close", cleanup);
  }
  source.on("end", cleanup);
  source.on("close", cleanup);
  dest.on("close", cleanup);
  dest.emit("pipe", source);
  return dest;
};
var streamHttp = {};
var request = { exports: {} };
var capability$2 = {};
(function(exports) {
  exports.fetch = isFunction2(commonjsGlobal.fetch) && isFunction2(commonjsGlobal.ReadableStream);
  exports.writableStream = isFunction2(commonjsGlobal.WritableStream);
  exports.abortController = isFunction2(commonjsGlobal.AbortController);
  var xhr;
  function getXHR() {
    if (xhr !== void 0)
      return xhr;
    if (commonjsGlobal.XMLHttpRequest) {
      xhr = new commonjsGlobal.XMLHttpRequest();
      try {
        xhr.open("GET", commonjsGlobal.XDomainRequest ? "/" : "https://example.com");
      } catch (e) {
        xhr = null;
      }
    } else {
      xhr = null;
    }
    return xhr;
  }
  function checkTypeSupport(type) {
    var xhr2 = getXHR();
    if (!xhr2)
      return false;
    try {
      xhr2.responseType = type;
      return xhr2.responseType === type;
    } catch (e) {
    }
    return false;
  }
  exports.arraybuffer = exports.fetch || checkTypeSupport("arraybuffer");
  exports.msstream = !exports.fetch && checkTypeSupport("ms-stream");
  exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport("moz-chunked-arraybuffer");
  exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction2(getXHR().overrideMimeType) : false);
  function isFunction2(value) {
    return typeof value === "function";
  }
  xhr = null;
})(capability$2);
var response$1 = {};
var readableBrowser = { exports: {} };
var streamBrowser = require$$0$1.EventEmitter;
var buffer_list;
var hasRequiredBuffer_list;
function requireBuffer_list() {
  if (hasRequiredBuffer_list)
    return buffer_list;
  hasRequiredBuffer_list = 1;
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var _require = require$$0$2, Buffer2 = _require.Buffer;
  var _require2 = require$$3, inspect = _require2.inspect;
  var custom = inspect && inspect.custom || "inspect";
  function copyBuffer(src, target, offset) {
    Buffer2.prototype.copy.call(src, target, offset);
  }
  buffer_list = /* @__PURE__ */ function() {
    function BufferList() {
      _classCallCheck(this, BufferList);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList, [{
      key: "push",
      value: function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s) {
        if (this.length === 0)
          return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next)
          ret += s + p.data;
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n) {
        if (this.length === 0)
          return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      }
    }, {
      key: "consume",
      value: function consume(n, hasStrings) {
        var ret;
        if (n < this.head.data.length) {
          ret = this.head.data.slice(0, n);
          this.head.data = this.head.data.slice(n);
        } else if (n === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n) : this._getBuffer(n);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      }
    }, {
      key: "_getString",
      value: function _getString(n) {
        var p = this.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length)
            ret += str;
          else
            ret += str.slice(0, n);
          n -= nb;
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        this.length -= c;
        return ret;
      }
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n) {
        var ret = Buffer2.allocUnsafe(n);
        var p = this.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        this.length -= c;
        return ret;
      }
    }, {
      key: custom,
      value: function value(_, options) {
        return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
          depth: 0,
          customInspect: false
        }));
      }
    }]);
    return BufferList;
  }();
  return buffer_list;
}
function destroy(err2, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err2);
    } else if (err2) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err2);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err2);
      }
    }
    return this;
  }
  if (this._readableState) {
    this._readableState.destroyed = true;
  }
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err2 || null, function(err3) {
    if (!cb && err3) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err3);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err3);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err3);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self2, err2) {
  emitErrorNT(self2, err2);
  emitCloseNT(self2);
}
function emitCloseNT(self2) {
  if (self2._writableState && !self2._writableState.emitClose)
    return;
  if (self2._readableState && !self2._readableState.emitClose)
    return;
  self2.emit("close");
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self2, err2) {
  self2.emit("error", err2);
}
function errorOrDestroy(stream2, err2) {
  var rState = stream2._readableState;
  var wState = stream2._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy)
    stream2.destroy(err2);
  else
    stream2.emit("error", err2);
}
var destroy_1 = {
  destroy,
  undestroy,
  errorOrDestroy
};
var errorsBrowser = {};
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === "string") {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /* @__PURE__ */ function(_Base) {
    _inheritsLoose(NodeError2, _Base);
    function NodeError2(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }
    return NodeError2;
  }(Base);
  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
}
function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function(i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
}
function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}
function endsWith(str, search, this_len) {
  if (this_len === void 0 || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}
function includes(str, search, start) {
  if (typeof start !== "number") {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
  return 'The value "' + value + '" is invalid for option "' + name2 + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
  var determiner;
  if (typeof expected === "string" && startsWith(expected, "not ")) {
    determiner = "must not be";
    expected = expected.replace(/^not /, "");
  } else {
    determiner = "must be";
  }
  var msg2;
  if (endsWith(name2, " argument")) {
    msg2 = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
  } else {
    var type = includes(name2, ".") ? "property" : "argument";
    msg2 = 'The "'.concat(name2, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
  }
  msg2 += ". Received type ".concat(typeof actual);
  return msg2;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
  return "The " + name2 + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name2) {
  return "Cannot call " + name2 + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
  return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
errorsBrowser.codes = codes;
var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state2, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name2 = isDuplex ? duplexKey : "highWaterMark";
      throw new ERR_INVALID_OPT_VALUE(name2, hwm);
    }
    return Math.floor(hwm);
  }
  return state2.objectMode ? 16 : 16 * 1024;
}
var state = {
  getHighWaterMark
};
var _stream_writable;
var hasRequired_stream_writable;
function require_stream_writable() {
  if (hasRequired_stream_writable)
    return _stream_writable;
  hasRequired_stream_writable = 1;
  _stream_writable = Writable;
  function CorkedRequest(state2) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state2);
    };
  }
  var Duplex2;
  Writable.WritableState = WritableState;
  var internalUtil = {
    deprecate: requireBrowser()
  };
  var Stream2 = streamBrowser;
  var Buffer2 = require$$0$2.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = destroy_1;
  var _require = state, getHighWaterMark2 = _require.getHighWaterMark;
  var _require$codes2 = errorsBrowser.codes, ERR_INVALID_ARG_TYPE = _require$codes2.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED2 = _require$codes2.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK2 = _require$codes2.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes2.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED2 = _require$codes2.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes2.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes2.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes2.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy2 = destroyImpl.errorOrDestroy;
  inherits_browser.exports(Writable, Stream2);
  function nop() {
  }
  function WritableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || require_stream_duplex();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark2(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream2, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object))
          return true;
        if (this !== Writable)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object) {
      return object instanceof this;
    };
  }
  function Writable(options) {
    Duplex2 = Duplex2 || require_stream_duplex();
    var isDuplex = this instanceof Duplex2;
    if (!isDuplex && !realHasInstance.call(Writable, this))
      return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream2.call(this);
  }
  Writable.prototype.pipe = function() {
    errorOrDestroy2(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream2, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy2(stream2, er);
    process.nextTick(cb, er);
  }
  function validChunk(stream2, state2, chunk, cb) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy2(stream2, er);
      process.nextTick(cb, er);
      return false;
    }
    return true;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    var ret = false;
    var isBuf = !state2.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer2.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state2.defaultEncoding;
    if (typeof cb !== "function")
      cb = nop;
    if (state2.ending)
      writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state2, chunk, cb)) {
      state2.pendingcb++;
      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable.prototype.uncork = function() {
    var state2 = this._writableState;
    if (state2.corked) {
      state2.corked--;
      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest)
        clearBuffer(this, state2);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableBuffer", {
    enumerable: false,
    get: function get2() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state2, chunk, encoding) {
    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer2.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get2() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream2, state2, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state2, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len = state2.objectMode ? 1 : chunk.length;
    state2.length += len;
    var ret = state2.length < state2.highWaterMark;
    if (!ret)
      state2.needDrain = true;
    if (state2.writing || state2.corked) {
      var last = state2.lastBufferedRequest;
      state2.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state2.lastBufferedRequest;
      } else {
        state2.bufferedRequest = state2.lastBufferedRequest;
      }
      state2.bufferedRequestCount += 1;
    } else {
      doWrite(stream2, state2, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream2, state2, writev, len, chunk, encoding, cb) {
    state2.writelen = len;
    state2.writecb = cb;
    state2.writing = true;
    state2.sync = true;
    if (state2.destroyed)
      state2.onwrite(new ERR_STREAM_DESTROYED2("write"));
    else if (writev)
      stream2._writev(chunk, state2.onwrite);
    else
      stream2._write(chunk, encoding, state2.onwrite);
    state2.sync = false;
  }
  function onwriteError(stream2, state2, sync, er, cb) {
    --state2.pendingcb;
    if (sync) {
      process.nextTick(cb, er);
      process.nextTick(finishMaybe, stream2, state2);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy2(stream2, er);
    } else {
      cb(er);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy2(stream2, er);
      finishMaybe(stream2, state2);
    }
  }
  function onwriteStateUpdate(state2) {
    state2.writing = false;
    state2.writecb = null;
    state2.length -= state2.writelen;
    state2.writelen = 0;
  }
  function onwrite(stream2, er) {
    var state2 = stream2._writableState;
    var sync = state2.sync;
    var cb = state2.writecb;
    if (typeof cb !== "function")
      throw new ERR_MULTIPLE_CALLBACK2();
    onwriteStateUpdate(state2);
    if (er)
      onwriteError(stream2, state2, sync, er, cb);
    else {
      var finished = needFinish(state2) || stream2.destroyed;
      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
        clearBuffer(stream2, state2);
      }
      if (sync) {
        process.nextTick(afterWrite, stream2, state2, finished, cb);
      } else {
        afterWrite(stream2, state2, finished, cb);
      }
    }
  }
  function afterWrite(stream2, state2, finished, cb) {
    if (!finished)
      onwriteDrain(stream2, state2);
    state2.pendingcb--;
    cb();
    finishMaybe(stream2, state2);
  }
  function onwriteDrain(stream2, state2) {
    if (state2.length === 0 && state2.needDrain) {
      state2.needDrain = false;
      stream2.emit("drain");
    }
  }
  function clearBuffer(stream2, state2) {
    state2.bufferProcessing = true;
    var entry = state2.bufferedRequest;
    if (stream2._writev && entry && entry.next) {
      var l = state2.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state2.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer.allBuffers = allBuffers;
      doWrite(stream2, state2, true, state2.length, buffer, "", holder.finish);
      state2.pendingcb++;
      state2.lastBufferedRequest = null;
      if (holder.next) {
        state2.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state2.corkedRequestsFree = new CorkedRequest(state2);
      }
      state2.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state2.objectMode ? 1 : chunk.length;
        doWrite(stream2, state2, false, len, chunk, encoding, cb);
        entry = entry.next;
        state2.bufferedRequestCount--;
        if (state2.writing) {
          break;
        }
      }
      if (entry === null)
        state2.lastBufferedRequest = null;
    }
    state2.bufferedRequest = entry;
    state2.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED2("_write()"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state2.corked) {
      state2.corked = 1;
      this.uncork();
    }
    if (!state2.ending)
      endWritable(this, state2, cb);
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableLength", {
    enumerable: false,
    get: function get2() {
      return this._writableState.length;
    }
  });
  function needFinish(state2) {
    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
  }
  function callFinal(stream2, state2) {
    stream2._final(function(err2) {
      state2.pendingcb--;
      if (err2) {
        errorOrDestroy2(stream2, err2);
      }
      state2.prefinished = true;
      stream2.emit("prefinish");
      finishMaybe(stream2, state2);
    });
  }
  function prefinish2(stream2, state2) {
    if (!state2.prefinished && !state2.finalCalled) {
      if (typeof stream2._final === "function" && !state2.destroyed) {
        state2.pendingcb++;
        state2.finalCalled = true;
        process.nextTick(callFinal, stream2, state2);
      } else {
        state2.prefinished = true;
        stream2.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream2, state2) {
    var need = needFinish(state2);
    if (need) {
      prefinish2(stream2, state2);
      if (state2.pendingcb === 0) {
        state2.finished = true;
        stream2.emit("finish");
        if (state2.autoDestroy) {
          var rState = stream2._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream2.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream2, state2, cb) {
    state2.ending = true;
    finishMaybe(stream2, state2);
    if (cb) {
      if (state2.finished)
        process.nextTick(cb);
      else
        stream2.once("finish", cb);
    }
    state2.ended = true;
    stream2.writable = false;
  }
  function onCorkedFinish(corkReq, state2, err2) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state2.pendingcb--;
      cb(err2);
      entry = entry.next;
    }
    state2.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    enumerable: false,
    get: function get2() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err2, cb) {
    cb(err2);
  };
  return _stream_writable;
}
var _stream_duplex;
var hasRequired_stream_duplex;
function require_stream_duplex() {
  if (hasRequired_stream_duplex)
    return _stream_duplex;
  hasRequired_stream_duplex = 1;
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key in obj)
      keys2.push(key);
    return keys2;
  };
  _stream_duplex = Duplex2;
  var Readable2 = require_stream_readable();
  var Writable = require_stream_writable();
  inherits_browser.exports(Duplex2, Readable2);
  {
    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex2.prototype[method])
        Duplex2.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex2(options) {
    if (!(this instanceof Duplex2))
      return new Duplex2(options);
    Readable2.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false)
        this.readable = false;
      if (options.writable === false)
        this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get2() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableBuffer", {
    enumerable: false,
    get: function get2() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableLength", {
    enumerable: false,
    get: function get2() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended)
      return;
    process.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex2.prototype, "destroyed", {
    enumerable: false,
    get: function get2() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  return _stream_duplex;
}
var string_decoder = {};
var safeBuffer = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var hasRequiredSafeBuffer;
function requireSafeBuffer() {
  if (hasRequiredSafeBuffer)
    return safeBuffer.exports;
  hasRequiredSafeBuffer = 1;
  (function(module, exports) {
    var buffer = require$$0$2;
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  })(safeBuffer, safeBuffer.exports);
  return safeBuffer.exports;
}
var hasRequiredString_decoder;
function requireString_decoder() {
  if (hasRequiredString_decoder)
    return string_decoder;
  hasRequiredString_decoder = 1;
  var Buffer2 = requireSafeBuffer().Buffer;
  var isEncoding = Buffer2.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function _normalizeEncoding(enc) {
    if (!enc)
      return "utf8";
    var retried;
    while (true) {
      switch (enc) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return enc;
        default:
          if (retried)
            return;
          enc = ("" + enc).toLowerCase();
          retried = true;
      }
    }
  }
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
      throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
  }
  string_decoder.StringDecoder = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case "utf16le":
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case "utf8":
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case "base64":
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer2.allocUnsafe(nb);
  }
  StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0)
      return "";
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === void 0)
        return "";
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length)
      return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
  };
  StringDecoder.prototype.end = utf8End;
  StringDecoder.prototype.text = utf8Text;
  StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };
  function utf8CheckByte(byte) {
    if (byte <= 127)
      return 0;
    else if (byte >> 5 === 6)
      return 2;
    else if (byte >> 4 === 14)
      return 3;
    else if (byte >> 3 === 30)
      return 4;
    return byte >> 6 === 2 ? -1 : -2;
  }
  function utf8CheckIncomplete(self2, buf, i) {
    var j = buf.length - 1;
    if (j < i)
      return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0)
        self2.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2)
      return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0)
        self2.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2)
      return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2)
          nb = 0;
        else
          self2.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }
  function utf8CheckExtraBytes(self2, buf, p) {
    if ((buf[0] & 192) !== 128) {
      self2.lastNeed = 0;
      return "\uFFFD";
    }
    if (self2.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 192) !== 128) {
        self2.lastNeed = 1;
        return "\uFFFD";
      }
      if (self2.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 192) !== 128) {
          self2.lastNeed = 2;
          return "\uFFFD";
        }
      }
    }
  }
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf);
    if (r !== void 0)
      return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed)
      return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
  }
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed)
      return r + "\uFFFD";
    return r;
  }
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString("utf16le", i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 55296 && c <= 56319) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
  }
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
  }
  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0)
      return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
  }
  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed)
      return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
  }
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
  }
  return string_decoder;
}
var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
function once$1(callback) {
  var called = false;
  return function() {
    if (called)
      return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop$1() {
}
function isRequest$2(stream2) {
  return stream2.setHeader && typeof stream2.abort === "function";
}
function eos$1(stream2, opts, callback) {
  if (typeof opts === "function")
    return eos$1(stream2, null, opts);
  if (!opts)
    opts = {};
  callback = once$1(callback || noop$1);
  var readable = opts.readable || opts.readable !== false && stream2.readable;
  var writable = opts.writable || opts.writable !== false && stream2.writable;
  var onlegacyfinish = function onlegacyfinish2() {
    if (!stream2.writable)
      onfinish();
  };
  var writableEnded = stream2._writableState && stream2._writableState.finished;
  var onfinish = function onfinish2() {
    writable = false;
    writableEnded = true;
    if (!readable)
      callback.call(stream2);
  };
  var readableEnded = stream2._readableState && stream2._readableState.endEmitted;
  var onend = function onend2() {
    readable = false;
    readableEnded = true;
    if (!writable)
      callback.call(stream2);
  };
  var onerror = function onerror2(err2) {
    callback.call(stream2, err2);
  };
  var onclose = function onclose2() {
    var err2;
    if (readable && !readableEnded) {
      if (!stream2._readableState || !stream2._readableState.ended)
        err2 = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream2, err2);
    }
    if (writable && !writableEnded) {
      if (!stream2._writableState || !stream2._writableState.ended)
        err2 = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream2, err2);
    }
  };
  var onrequest = function onrequest2() {
    stream2.req.on("finish", onfinish);
  };
  if (isRequest$2(stream2)) {
    stream2.on("complete", onfinish);
    stream2.on("abort", onclose);
    if (stream2.req)
      onrequest();
    else
      stream2.on("request", onrequest);
  } else if (writable && !stream2._writableState) {
    stream2.on("end", onlegacyfinish);
    stream2.on("close", onlegacyfinish);
  }
  stream2.on("end", onend);
  stream2.on("finish", onfinish);
  if (opts.error !== false)
    stream2.on("error", onerror);
  stream2.on("close", onclose);
  return function() {
    stream2.removeListener("complete", onfinish);
    stream2.removeListener("abort", onclose);
    stream2.removeListener("request", onrequest);
    if (stream2.req)
      stream2.req.removeListener("finish", onfinish);
    stream2.removeListener("end", onlegacyfinish);
    stream2.removeListener("close", onlegacyfinish);
    stream2.removeListener("finish", onfinish);
    stream2.removeListener("end", onend);
    stream2.removeListener("error", onerror);
    stream2.removeListener("close", onclose);
  };
}
var endOfStream = eos$1;
var async_iterator;
var hasRequiredAsync_iterator;
function requireAsync_iterator() {
  if (hasRequiredAsync_iterator)
    return async_iterator;
  hasRequiredAsync_iterator = 1;
  var _Object$setPrototypeO;
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var finished = endOfStream;
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult(value, done2) {
    return {
      value,
      done: done2
    };
  }
  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
      var data2 = iter[kStream].read();
      if (data2 !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data2, false));
      }
    }
  }
  function onReadable(iter) {
    process.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve(createIterResult(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve, reject) {
          process.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data2 = this[kStream].read();
        if (data2 !== null) {
          return Promise.resolve(createIterResult(data2, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve, reject) {
      _this2[kStream].destroy(null, function(err2) {
        if (err2) {
          reject(err2);
          return;
        }
        resolve(createIterResult(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream2) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream2,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream2._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve, reject) {
        var data2 = iterator[kStream].read();
        if (data2) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data2, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream2, function(err2) {
      if (err2 && err2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err2);
        }
        iterator[kError] = err2;
        return;
      }
      var resolve = iterator[kLastResolve];
      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream2.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  async_iterator = createReadableStreamAsyncIterator;
  return async_iterator;
}
var fromBrowser;
var hasRequiredFromBrowser;
function requireFromBrowser() {
  if (hasRequiredFromBrowser)
    return fromBrowser;
  hasRequiredFromBrowser = 1;
  fromBrowser = function() {
    throw new Error("Readable.from is not available in the browser");
  };
  return fromBrowser;
}
var _stream_readable;
var hasRequired_stream_readable;
function require_stream_readable() {
  if (hasRequired_stream_readable)
    return _stream_readable;
  hasRequired_stream_readable = 1;
  _stream_readable = Readable2;
  var Duplex2;
  Readable2.ReadableState = ReadableState;
  require$$0$1.EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream2 = streamBrowser;
  var Buffer2 = require$$0$2.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = require$$3;
  var debug;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function debug2() {
    };
  }
  var BufferList = requireBuffer_list();
  var destroyImpl = destroy_1;
  var _require = state, getHighWaterMark2 = _require.getHighWaterMark;
  var _require$codes2 = errorsBrowser.codes, ERR_INVALID_ARG_TYPE = _require$codes2.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes2.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED2 = _require$codes2.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes2.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  inherits_browser.exports(Readable2, Stream2);
  var errorOrDestroy2 = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || require_stream_duplex();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark2(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = requireString_decoder().StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable2(options) {
    Duplex2 = Duplex2 || require_stream_duplex();
    if (!(this instanceof Readable2))
      return new Readable2(options);
    var isDuplex = this instanceof Duplex2;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream2.call(this);
  }
  Object.defineProperty(Readable2.prototype, "destroyed", {
    enumerable: false,
    get: function get2() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable2.prototype.destroy = destroyImpl.destroy;
  Readable2.prototype._undestroy = destroyImpl.undestroy;
  Readable2.prototype._destroy = function(err2, cb) {
    cb(err2);
  };
  Readable2.prototype.push = function(chunk, encoding) {
    var state2 = this._readableState;
    var skipChunkCheck;
    if (!state2.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state2.defaultEncoding;
        if (encoding !== state2.encoding) {
          chunk = Buffer2.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable2.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream2, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state2 = stream2._readableState;
    if (chunk === null) {
      state2.reading = false;
      onEofChunk(stream2, state2);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state2, chunk);
      if (er) {
        errorOrDestroy2(stream2, er);
      } else if (state2.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state2.endEmitted)
            errorOrDestroy2(stream2, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else
            addChunk(stream2, state2, chunk, true);
        } else if (state2.ended) {
          errorOrDestroy2(stream2, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state2.destroyed) {
          return false;
        } else {
          state2.reading = false;
          if (state2.decoder && !encoding) {
            chunk = state2.decoder.write(chunk);
            if (state2.objectMode || chunk.length !== 0)
              addChunk(stream2, state2, chunk, false);
            else
              maybeReadMore(stream2, state2);
          } else {
            addChunk(stream2, state2, chunk, false);
          }
        }
      } else if (!addToFront) {
        state2.reading = false;
        maybeReadMore(stream2, state2);
      }
    }
    return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);
  }
  function addChunk(stream2, state2, chunk, addToFront) {
    if (state2.flowing && state2.length === 0 && !state2.sync) {
      state2.awaitDrain = 0;
      stream2.emit("data", chunk);
    } else {
      state2.length += state2.objectMode ? 1 : chunk.length;
      if (addToFront)
        state2.buffer.unshift(chunk);
      else
        state2.buffer.push(chunk);
      if (state2.needReadable)
        emitReadable(stream2);
    }
    maybeReadMore(stream2, state2);
  }
  function chunkInvalid(state2, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable2.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable2.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = requireString_decoder().StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p = this._readableState.buffer.head;
    var content = "";
    while (p !== null) {
      content += decoder.write(p.data);
      p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "")
      this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  function howMuchToRead(n, state2) {
    if (n <= 0 || state2.length === 0 && state2.ended)
      return 0;
    if (state2.objectMode)
      return 1;
    if (n !== n) {
      if (state2.flowing && state2.length)
        return state2.buffer.head.data.length;
      else
        return state2.length;
    }
    if (n > state2.highWaterMark)
      state2.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state2.length)
      return n;
    if (!state2.ended) {
      state2.needReadable = true;
      return 0;
    }
    return state2.length;
  }
  Readable2.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state2 = this._readableState;
    var nOrig = n;
    if (n !== 0)
      state2.emittedReadable = false;
    if (n === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {
      debug("read: emitReadable", state2.length, state2.ended);
      if (state2.length === 0 && state2.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n = howMuchToRead(n, state2);
    if (n === 0 && state2.ended) {
      if (state2.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state2.needReadable;
    debug("need readable", doRead);
    if (state2.length === 0 || state2.length - n < state2.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state2.ended || state2.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state2.reading = true;
      state2.sync = true;
      if (state2.length === 0)
        state2.needReadable = true;
      this._read(state2.highWaterMark);
      state2.sync = false;
      if (!state2.reading)
        n = howMuchToRead(nOrig, state2);
    }
    var ret;
    if (n > 0)
      ret = fromList(n, state2);
    else
      ret = null;
    if (ret === null) {
      state2.needReadable = state2.length <= state2.highWaterMark;
      n = 0;
    } else {
      state2.length -= n;
      state2.awaitDrain = 0;
    }
    if (state2.length === 0) {
      if (!state2.ended)
        state2.needReadable = true;
      if (nOrig !== n && state2.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream2, state2) {
    debug("onEofChunk");
    if (state2.ended)
      return;
    if (state2.decoder) {
      var chunk = state2.decoder.end();
      if (chunk && chunk.length) {
        state2.buffer.push(chunk);
        state2.length += state2.objectMode ? 1 : chunk.length;
      }
    }
    state2.ended = true;
    if (state2.sync) {
      emitReadable(stream2);
    } else {
      state2.needReadable = false;
      if (!state2.emittedReadable) {
        state2.emittedReadable = true;
        emitReadable_(stream2);
      }
    }
  }
  function emitReadable(stream2) {
    var state2 = stream2._readableState;
    debug("emitReadable", state2.needReadable, state2.emittedReadable);
    state2.needReadable = false;
    if (!state2.emittedReadable) {
      debug("emitReadable", state2.flowing);
      state2.emittedReadable = true;
      process.nextTick(emitReadable_, stream2);
    }
  }
  function emitReadable_(stream2) {
    var state2 = stream2._readableState;
    debug("emitReadable_", state2.destroyed, state2.length, state2.ended);
    if (!state2.destroyed && (state2.length || state2.ended)) {
      stream2.emit("readable");
      state2.emittedReadable = false;
    }
    state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;
    flow(stream2);
  }
  function maybeReadMore(stream2, state2) {
    if (!state2.readingMore) {
      state2.readingMore = true;
      process.nextTick(maybeReadMore_, stream2, state2);
    }
  }
  function maybeReadMore_(stream2, state2) {
    while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {
      var len = state2.length;
      debug("maybeReadMore read 0");
      stream2.read(0);
      if (len === state2.length)
        break;
    }
    state2.readingMore = false;
  }
  Readable2.prototype._read = function(n) {
    errorOrDestroy2(this, new ERR_METHOD_NOT_IMPLEMENTED2("_read()"));
  };
  Readable2.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state2 = this._readableState;
    switch (state2.pipesCount) {
      case 0:
        state2.pipes = dest;
        break;
      case 1:
        state2.pipes = [state2.pipes, dest];
        break;
      default:
        state2.pipes.push(dest);
        break;
    }
    state2.pipesCount += 1;
    debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state2.endEmitted)
      process.nextTick(endFn);
    else
      src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src.removeListener("end", onend);
      src.removeListener("end", unpipe);
      src.removeListener("data", ondata);
      cleanedUp = true;
      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      var ret = dest.write(chunk);
      debug("dest.write", ret);
      if (ret === false) {
        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state2.awaitDrain);
          state2.awaitDrain++;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        errorOrDestroy2(dest, er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src.unpipe(dest);
    }
    dest.emit("pipe", src);
    if (!state2.flowing) {
      debug("pipe resume");
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state2 = src._readableState;
      debug("pipeOnDrain", state2.awaitDrain);
      if (state2.awaitDrain)
        state2.awaitDrain--;
      if (state2.awaitDrain === 0 && EElistenerCount(src, "data")) {
        state2.flowing = true;
        flow(src);
      }
    };
  }
  Readable2.prototype.unpipe = function(dest) {
    var state2 = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state2.pipesCount === 0)
      return this;
    if (state2.pipesCount === 1) {
      if (dest && dest !== state2.pipes)
        return this;
      if (!dest)
        dest = state2.pipes;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state2.pipes;
      var len = state2.pipesCount;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      for (var i = 0; i < len; i++)
        dests[i].emit("unpipe", this, {
          hasUnpiped: false
        });
      return this;
    }
    var index2 = indexOf2(state2.pipes, dest);
    if (index2 === -1)
      return this;
    state2.pipes.splice(index2, 1);
    state2.pipesCount -= 1;
    if (state2.pipesCount === 1)
      state2.pipes = state2.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable2.prototype.on = function(ev, fn) {
    var res = Stream2.prototype.on.call(this, ev, fn);
    var state2 = this._readableState;
    if (ev === "data") {
      state2.readableListening = this.listenerCount("readable") > 0;
      if (state2.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      if (!state2.endEmitted && !state2.readableListening) {
        state2.readableListening = state2.needReadable = true;
        state2.flowing = false;
        state2.emittedReadable = false;
        debug("on readable", state2.length, state2.reading);
        if (state2.length) {
          emitReadable(this);
        } else if (!state2.reading) {
          process.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable2.prototype.addListener = Readable2.prototype.on;
  Readable2.prototype.removeListener = function(ev, fn) {
    var res = Stream2.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable2.prototype.removeAllListeners = function(ev) {
    var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state2 = self2._readableState;
    state2.readableListening = self2.listenerCount("readable") > 0;
    if (state2.resumeScheduled && !state2.paused) {
      state2.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable2.prototype.resume = function() {
    var state2 = this._readableState;
    if (!state2.flowing) {
      debug("resume");
      state2.flowing = !state2.readableListening;
      resume(this, state2);
    }
    state2.paused = false;
    return this;
  };
  function resume(stream2, state2) {
    if (!state2.resumeScheduled) {
      state2.resumeScheduled = true;
      process.nextTick(resume_, stream2, state2);
    }
  }
  function resume_(stream2, state2) {
    debug("resume", state2.reading);
    if (!state2.reading) {
      stream2.read(0);
    }
    state2.resumeScheduled = false;
    stream2.emit("resume");
    flow(stream2);
    if (state2.flowing && !state2.reading)
      stream2.read(0);
  }
  Readable2.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow(stream2) {
    var state2 = stream2._readableState;
    debug("flow", state2.flowing);
    while (state2.flowing && stream2.read() !== null)
      ;
  }
  Readable2.prototype.wrap = function(stream2) {
    var _this = this;
    var state2 = this._readableState;
    var paused = false;
    stream2.on("end", function() {
      debug("wrapped end");
      if (state2.decoder && !state2.ended) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream2.on("data", function(chunk) {
      debug("wrapped data");
      if (state2.decoder)
        chunk = state2.decoder.write(chunk);
      if (state2.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state2.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream2.pause();
      }
    });
    for (var i in stream2) {
      if (this[i] === void 0 && typeof stream2[i] === "function") {
        this[i] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream2[method].apply(stream2, arguments);
          };
        }(i);
      }
    }
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream2.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }
    this._read = function(n2) {
      debug("wrapped _read", n2);
      if (paused) {
        paused = false;
        stream2.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable2.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = requireAsync_iterator();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function get2() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableBuffer", {
    enumerable: false,
    get: function get2() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableFlowing", {
    enumerable: false,
    get: function get2() {
      return this._readableState.flowing;
    },
    set: function set(state2) {
      if (this._readableState) {
        this._readableState.flowing = state2;
      }
    }
  });
  Readable2._fromList = fromList;
  Object.defineProperty(Readable2.prototype, "readableLength", {
    enumerable: false,
    get: function get2() {
      return this._readableState.length;
    }
  });
  function fromList(n, state2) {
    if (state2.length === 0)
      return null;
    var ret;
    if (state2.objectMode)
      ret = state2.buffer.shift();
    else if (!n || n >= state2.length) {
      if (state2.decoder)
        ret = state2.buffer.join("");
      else if (state2.buffer.length === 1)
        ret = state2.buffer.first();
      else
        ret = state2.buffer.concat(state2.length);
      state2.buffer.clear();
    } else {
      ret = state2.buffer.consume(n, state2.decoder);
    }
    return ret;
  }
  function endReadable(stream2) {
    var state2 = stream2._readableState;
    debug("endReadable", state2.endEmitted);
    if (!state2.endEmitted) {
      state2.ended = true;
      process.nextTick(endReadableNT, state2, stream2);
    }
  }
  function endReadableNT(state2, stream2) {
    debug("endReadableNT", state2.endEmitted, state2.length);
    if (!state2.endEmitted && state2.length === 0) {
      state2.endEmitted = true;
      stream2.readable = false;
      stream2.emit("end");
      if (state2.autoDestroy) {
        var wState = stream2._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream2.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable2.from = function(iterable, opts) {
      if (from === void 0) {
        from = requireFromBrowser();
      }
      return from(Readable2, iterable, opts);
    };
  }
  function indexOf2(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x)
        return i;
    }
    return -1;
  }
  return _stream_readable;
}
var _stream_transform = Transform$1;
var _require$codes$1 = errorsBrowser.codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require_stream_duplex();
inherits_browser.exports(Transform$1, Duplex);
function afterTransform(er, data2) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit("error", new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data2 != null)
    this.push(data2);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform$1(options) {
  if (!(this instanceof Transform$1))
    return new Transform$1(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };
  this._readableState.needReadable = true;
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === "function")
      this._transform = options.transform;
    if (typeof options.flush === "function")
      this._flush = options.flush;
  }
  this.on("prefinish", prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === "function" && !this._readableState.destroyed) {
    this._flush(function(er, data2) {
      done(_this, er, data2);
    });
  } else {
    done(this, null, null);
  }
}
Transform$1.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};
Transform$1.prototype._transform = function(chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform$1.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};
Transform$1.prototype._read = function(n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    ts.needTransform = true;
  }
};
Transform$1.prototype._destroy = function(err2, cb) {
  Duplex.prototype._destroy.call(this, err2, function(err22) {
    cb(err22);
  });
};
function done(stream2, er, data2) {
  if (er)
    return stream2.emit("error", er);
  if (data2 != null)
    stream2.push(data2);
  if (stream2._writableState.length)
    throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream2._transformState.transforming)
    throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream2.push(null);
}
var _stream_passthrough = PassThrough$2;
var Transform = _stream_transform;
inherits_browser.exports(PassThrough$2, Transform);
function PassThrough$2(options) {
  if (!(this instanceof PassThrough$2))
    return new PassThrough$2(options);
  Transform.call(this, options);
}
PassThrough$2.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};
var eos;
function once(callback) {
  var called = false;
  return function() {
    if (called)
      return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = errorsBrowser.codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err2) {
  if (err2)
    throw err2;
}
function isRequest$1(stream2) {
  return stream2.setHeader && typeof stream2.abort === "function";
}
function destroyer(stream2, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream2.on("close", function() {
    closed = true;
  });
  if (eos === void 0)
    eos = endOfStream;
  eos(stream2, {
    readable: reading,
    writable: writing
  }, function(err2) {
    if (err2)
      return callback(err2);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function(err2) {
    if (closed)
      return;
    if (destroyed)
      return;
    destroyed = true;
    if (isRequest$1(stream2))
      return stream2.abort();
    if (typeof stream2.destroy === "function")
      return stream2.destroy();
    callback(err2 || new ERR_STREAM_DESTROYED("pipe"));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length)
    return noop;
  if (typeof streams[streams.length - 1] !== "function")
    return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0]))
    streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS("streams");
  }
  var error;
  var destroys = streams.map(function(stream2, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream2, reading, writing, function(err2) {
      if (!error)
        error = err2;
      if (err2)
        destroys.forEach(call);
      if (reading)
        return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
var pipeline_1 = pipeline;
(function(module, exports) {
  exports = module.exports = require_stream_readable();
  exports.Stream = exports;
  exports.Readable = exports;
  exports.Writable = require_stream_writable();
  exports.Duplex = require_stream_duplex();
  exports.Transform = _stream_transform;
  exports.PassThrough = _stream_passthrough;
  exports.finished = endOfStream;
  exports.pipeline = pipeline_1;
})(readableBrowser, readableBrowser.exports);
var capability$1 = capability$2;
var inherits$1 = inherits_browser.exports;
var stream$1 = readableBrowser.exports;
var rStates$1 = response$1.readyStates = {
  UNSENT: 0,
  OPENED: 1,
  HEADERS_RECEIVED: 2,
  LOADING: 3,
  DONE: 4
};
var IncomingMessage$1 = response$1.IncomingMessage = function(xhr, response2, mode, resetTimers) {
  var self2 = this;
  stream$1.Readable.call(self2);
  self2._mode = mode;
  self2.headers = {};
  self2.rawHeaders = [];
  self2.trailers = {};
  self2.rawTrailers = [];
  self2.on("end", function() {
    process.nextTick(function() {
      self2.emit("close");
    });
  });
  if (mode === "fetch") {
    let read = function() {
      reader.read().then(function(result) {
        if (self2._destroyed)
          return;
        resetTimers(result.done);
        if (result.done) {
          self2.push(null);
          return;
        }
        self2.push(Buffer.from(result.value));
        read();
      }).catch(function(err2) {
        resetTimers(true);
        if (!self2._destroyed)
          self2.emit("error", err2);
      });
    };
    self2._fetchResponse = response2;
    self2.url = response2.url;
    self2.statusCode = response2.status;
    self2.statusMessage = response2.statusText;
    response2.headers.forEach(function(header, key) {
      self2.headers[key.toLowerCase()] = header;
      self2.rawHeaders.push(key, header);
    });
    if (capability$1.writableStream) {
      var writable = new WritableStream({
        write: function(chunk) {
          resetTimers(false);
          return new Promise(function(resolve, reject) {
            if (self2._destroyed) {
              reject();
            } else if (self2.push(Buffer.from(chunk))) {
              resolve();
            } else {
              self2._resumeFetch = resolve;
            }
          });
        },
        close: function() {
          resetTimers(true);
          if (!self2._destroyed)
            self2.push(null);
        },
        abort: function(err2) {
          resetTimers(true);
          if (!self2._destroyed)
            self2.emit("error", err2);
        }
      });
      try {
        response2.body.pipeTo(writable).catch(function(err2) {
          resetTimers(true);
          if (!self2._destroyed)
            self2.emit("error", err2);
        });
        return;
      } catch (e) {
      }
    }
    var reader = response2.body.getReader();
    read();
  } else {
    self2._xhr = xhr;
    self2._pos = 0;
    self2.url = xhr.responseURL;
    self2.statusCode = xhr.status;
    self2.statusMessage = xhr.statusText;
    var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
    headers.forEach(function(header) {
      var matches = header.match(/^([^:]+):\s*(.*)/);
      if (matches) {
        var key = matches[1].toLowerCase();
        if (key === "set-cookie") {
          if (self2.headers[key] === void 0) {
            self2.headers[key] = [];
          }
          self2.headers[key].push(matches[2]);
        } else if (self2.headers[key] !== void 0) {
          self2.headers[key] += ", " + matches[2];
        } else {
          self2.headers[key] = matches[2];
        }
        self2.rawHeaders.push(matches[1], matches[2]);
      }
    });
    self2._charset = "x-user-defined";
    if (!capability$1.overrideMimeType) {
      var mimeType = self2.rawHeaders["mime-type"];
      if (mimeType) {
        var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
        if (charsetMatch) {
          self2._charset = charsetMatch[1].toLowerCase();
        }
      }
      if (!self2._charset)
        self2._charset = "utf-8";
    }
  }
};
inherits$1(IncomingMessage$1, stream$1.Readable);
IncomingMessage$1.prototype._read = function() {
  var self2 = this;
  var resolve = self2._resumeFetch;
  if (resolve) {
    self2._resumeFetch = null;
    resolve();
  }
};
IncomingMessage$1.prototype._onXHRProgress = function(resetTimers) {
  var self2 = this;
  var xhr = self2._xhr;
  var response2 = null;
  switch (self2._mode) {
    case "text":
      response2 = xhr.responseText;
      if (response2.length > self2._pos) {
        var newData = response2.substr(self2._pos);
        if (self2._charset === "x-user-defined") {
          var buffer = Buffer.alloc(newData.length);
          for (var i = 0; i < newData.length; i++)
            buffer[i] = newData.charCodeAt(i) & 255;
          self2.push(buffer);
        } else {
          self2.push(newData, self2._charset);
        }
        self2._pos = response2.length;
      }
      break;
    case "arraybuffer":
      if (xhr.readyState !== rStates$1.DONE || !xhr.response)
        break;
      response2 = xhr.response;
      self2.push(Buffer.from(new Uint8Array(response2)));
      break;
    case "moz-chunked-arraybuffer":
      response2 = xhr.response;
      if (xhr.readyState !== rStates$1.LOADING || !response2)
        break;
      self2.push(Buffer.from(new Uint8Array(response2)));
      break;
    case "ms-stream":
      response2 = xhr.response;
      if (xhr.readyState !== rStates$1.LOADING)
        break;
      var reader = new commonjsGlobal.MSStreamReader();
      reader.onprogress = function() {
        if (reader.result.byteLength > self2._pos) {
          self2.push(Buffer.from(new Uint8Array(reader.result.slice(self2._pos))));
          self2._pos = reader.result.byteLength;
        }
      };
      reader.onload = function() {
        resetTimers(true);
        self2.push(null);
      };
      reader.readAsArrayBuffer(response2);
      break;
  }
  if (self2._xhr.readyState === rStates$1.DONE && self2._mode !== "ms-stream") {
    resetTimers(true);
    self2.push(null);
  }
};
var capability = capability$2;
var inherits = inherits_browser.exports;
var response = response$1;
var stream = readableBrowser.exports;
var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;
function decideMode(preferBinary, useFetch) {
  if (capability.fetch && useFetch) {
    return "fetch";
  } else if (capability.mozchunkedarraybuffer) {
    return "moz-chunked-arraybuffer";
  } else if (capability.msstream) {
    return "ms-stream";
  } else if (capability.arraybuffer && preferBinary) {
    return "arraybuffer";
  } else {
    return "text";
  }
}
var ClientRequest = request.exports = function(opts) {
  var self2 = this;
  stream.Writable.call(self2);
  self2._opts = opts;
  self2._body = [];
  self2._headers = {};
  if (opts.auth)
    self2.setHeader("Authorization", "Basic " + Buffer.from(opts.auth).toString("base64"));
  Object.keys(opts.headers).forEach(function(name2) {
    self2.setHeader(name2, opts.headers[name2]);
  });
  var preferBinary;
  var useFetch = true;
  if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability.abortController) {
    useFetch = false;
    preferBinary = true;
  } else if (opts.mode === "prefer-streaming") {
    preferBinary = false;
  } else if (opts.mode === "allow-wrong-content-type") {
    preferBinary = !capability.overrideMimeType;
  } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
    preferBinary = true;
  } else {
    throw new Error("Invalid value for opts.mode");
  }
  self2._mode = decideMode(preferBinary, useFetch);
  self2._fetchTimer = null;
  self2._socketTimeout = null;
  self2._socketTimer = null;
  self2.on("finish", function() {
    self2._onFinish();
  });
};
inherits(ClientRequest, stream.Writable);
ClientRequest.prototype.setHeader = function(name2, value) {
  var self2 = this;
  var lowerName = name2.toLowerCase();
  if (unsafeHeaders.indexOf(lowerName) !== -1)
    return;
  self2._headers[lowerName] = {
    name: name2,
    value
  };
};
ClientRequest.prototype.getHeader = function(name2) {
  var header = this._headers[name2.toLowerCase()];
  if (header)
    return header.value;
  return null;
};
ClientRequest.prototype.removeHeader = function(name2) {
  var self2 = this;
  delete self2._headers[name2.toLowerCase()];
};
ClientRequest.prototype._onFinish = function() {
  var self2 = this;
  if (self2._destroyed)
    return;
  var opts = self2._opts;
  if ("timeout" in opts && opts.timeout !== 0) {
    self2.setTimeout(opts.timeout);
  }
  var headersObj = self2._headers;
  var body = null;
  if (opts.method !== "GET" && opts.method !== "HEAD") {
    body = new Blob(self2._body, {
      type: (headersObj["content-type"] || {}).value || ""
    });
  }
  var headersList = [];
  Object.keys(headersObj).forEach(function(keyName) {
    var name2 = headersObj[keyName].name;
    var value = headersObj[keyName].value;
    if (Array.isArray(value)) {
      value.forEach(function(v) {
        headersList.push([name2, v]);
      });
    } else {
      headersList.push([name2, value]);
    }
  });
  if (self2._mode === "fetch") {
    var signal = null;
    if (capability.abortController) {
      var controller = new AbortController();
      signal = controller.signal;
      self2._fetchAbortController = controller;
      if ("requestTimeout" in opts && opts.requestTimeout !== 0) {
        self2._fetchTimer = commonjsGlobal.setTimeout(function() {
          self2.emit("requestTimeout");
          if (self2._fetchAbortController)
            self2._fetchAbortController.abort();
        }, opts.requestTimeout);
      }
    }
    commonjsGlobal.fetch(self2._opts.url, {
      method: self2._opts.method,
      headers: headersList,
      body: body || void 0,
      mode: "cors",
      credentials: opts.withCredentials ? "include" : "same-origin",
      signal
    }).then(function(response2) {
      self2._fetchResponse = response2;
      self2._resetTimers(false);
      self2._connect();
    }, function(reason) {
      self2._resetTimers(true);
      if (!self2._destroyed)
        self2.emit("error", reason);
    });
  } else {
    var xhr = self2._xhr = new commonjsGlobal.XMLHttpRequest();
    try {
      xhr.open(self2._opts.method, self2._opts.url, true);
    } catch (err2) {
      process.nextTick(function() {
        self2.emit("error", err2);
      });
      return;
    }
    if ("responseType" in xhr)
      xhr.responseType = self2._mode;
    if ("withCredentials" in xhr)
      xhr.withCredentials = !!opts.withCredentials;
    if (self2._mode === "text" && "overrideMimeType" in xhr)
      xhr.overrideMimeType("text/plain; charset=x-user-defined");
    if ("requestTimeout" in opts) {
      xhr.timeout = opts.requestTimeout;
      xhr.ontimeout = function() {
        self2.emit("requestTimeout");
      };
    }
    headersList.forEach(function(header) {
      xhr.setRequestHeader(header[0], header[1]);
    });
    self2._response = null;
    xhr.onreadystatechange = function() {
      switch (xhr.readyState) {
        case rStates.LOADING:
        case rStates.DONE:
          self2._onXHRProgress();
          break;
      }
    };
    if (self2._mode === "moz-chunked-arraybuffer") {
      xhr.onprogress = function() {
        self2._onXHRProgress();
      };
    }
    xhr.onerror = function() {
      if (self2._destroyed)
        return;
      self2._resetTimers(true);
      self2.emit("error", new Error("XHR error"));
    };
    try {
      xhr.send(body);
    } catch (err2) {
      process.nextTick(function() {
        self2.emit("error", err2);
      });
      return;
    }
  }
};
function statusValid(xhr) {
  try {
    var status = xhr.status;
    return status !== null && status !== 0;
  } catch (e) {
    return false;
  }
}
ClientRequest.prototype._onXHRProgress = function() {
  var self2 = this;
  self2._resetTimers(false);
  if (!statusValid(self2._xhr) || self2._destroyed)
    return;
  if (!self2._response)
    self2._connect();
  self2._response._onXHRProgress(self2._resetTimers.bind(self2));
};
ClientRequest.prototype._connect = function() {
  var self2 = this;
  if (self2._destroyed)
    return;
  self2._response = new IncomingMessage(self2._xhr, self2._fetchResponse, self2._mode, self2._resetTimers.bind(self2));
  self2._response.on("error", function(err2) {
    self2.emit("error", err2);
  });
  self2.emit("response", self2._response);
};
ClientRequest.prototype._write = function(chunk, encoding, cb) {
  var self2 = this;
  self2._body.push(chunk);
  cb();
};
ClientRequest.prototype._resetTimers = function(done2) {
  var self2 = this;
  commonjsGlobal.clearTimeout(self2._socketTimer);
  self2._socketTimer = null;
  if (done2) {
    commonjsGlobal.clearTimeout(self2._fetchTimer);
    self2._fetchTimer = null;
  } else if (self2._socketTimeout) {
    self2._socketTimer = commonjsGlobal.setTimeout(function() {
      self2.emit("timeout");
    }, self2._socketTimeout);
  }
};
ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function(err2) {
  var self2 = this;
  self2._destroyed = true;
  self2._resetTimers(true);
  if (self2._response)
    self2._response._destroyed = true;
  if (self2._xhr)
    self2._xhr.abort();
  else if (self2._fetchAbortController)
    self2._fetchAbortController.abort();
  if (err2)
    self2.emit("error", err2);
};
ClientRequest.prototype.end = function(data2, encoding, cb) {
  var self2 = this;
  if (typeof data2 === "function") {
    cb = data2;
    data2 = void 0;
  }
  stream.Writable.prototype.end.call(self2, data2, encoding, cb);
};
ClientRequest.prototype.setTimeout = function(timeout, cb) {
  var self2 = this;
  if (cb)
    self2.once("timeout", cb);
  self2._socketTimeout = timeout;
  self2._resetTimers(false);
};
ClientRequest.prototype.flushHeaders = function() {
};
ClientRequest.prototype.setNoDelay = function() {
};
ClientRequest.prototype.setSocketKeepAlive = function() {
};
var unsafeHeaders = [
  "accept-charset",
  "accept-encoding",
  "access-control-request-headers",
  "access-control-request-method",
  "connection",
  "content-length",
  "cookie",
  "cookie2",
  "date",
  "dnt",
  "expect",
  "host",
  "keep-alive",
  "origin",
  "referer",
  "te",
  "trailer",
  "transfer-encoding",
  "upgrade",
  "via"
];
var immutable = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
  var target = {};
  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}
var browser = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};
(function(exports) {
  var ClientRequest2 = request.exports;
  var response2 = response$1;
  var extend2 = immutable;
  var statusCodes = browser;
  var url = Url;
  var http2 = exports;
  http2.request = function(opts, cb) {
    if (typeof opts === "string")
      opts = url.parse(opts);
    else
      opts = extend2(opts);
    var defaultProtocol = commonjsGlobal.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || "/";
    if (host && host.indexOf(":") !== -1)
      host = "[" + host + "]";
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    var req = new ClientRequest2(opts);
    if (cb)
      req.on("response", cb);
    return req;
  };
  http2.get = function get2(opts, cb) {
    var req = http2.request(opts, cb);
    req.end();
    return req;
  };
  http2.ClientRequest = ClientRequest2;
  http2.IncomingMessage = response2.IncomingMessage;
  http2.Agent = function() {
  };
  http2.Agent.defaultMaxSockets = 4;
  http2.globalAgent = new http2.Agent();
  http2.STATUS_CODES = statusCodes;
  http2.METHODS = [
    "CHECKOUT",
    "CONNECT",
    "COPY",
    "DELETE",
    "GET",
    "HEAD",
    "LOCK",
    "M-SEARCH",
    "MERGE",
    "MKACTIVITY",
    "MKCOL",
    "MOVE",
    "NOTIFY",
    "OPTIONS",
    "PATCH",
    "POST",
    "PROPFIND",
    "PROPPATCH",
    "PURGE",
    "PUT",
    "REPORT",
    "SEARCH",
    "SUBSCRIBE",
    "TRACE",
    "UNLOCK",
    "UNSUBSCRIBE"
  ];
})(streamHttp);
const http = streamHttp;
var publicApi = {};
var URL$2 = { exports: {} };
var conversions = {};
var lib$1 = conversions;
function sign(x) {
  return x < 0 ? -1 : 1;
}
function evenRound(x) {
  if (x % 1 === 0.5 && (x & 1) === 0) {
    return Math.floor(x);
  } else {
    return Math.round(x);
  }
}
function createNumberConversion(bitLength, typeOpts) {
  if (!typeOpts.unsigned) {
    --bitLength;
  }
  const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
  const upperBound = Math.pow(2, bitLength) - 1;
  const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
  const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
  return function(V, opts) {
    if (!opts)
      opts = {};
    let x = +V;
    if (opts.enforceRange) {
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite number");
      }
      x = sign(x) * Math.floor(Math.abs(x));
      if (x < lowerBound || x > upperBound) {
        throw new TypeError("Argument is not in byte range");
      }
      return x;
    }
    if (!isNaN(x) && opts.clamp) {
      x = evenRound(x);
      if (x < lowerBound)
        x = lowerBound;
      if (x > upperBound)
        x = upperBound;
      return x;
    }
    if (!Number.isFinite(x) || x === 0) {
      return 0;
    }
    x = sign(x) * Math.floor(Math.abs(x));
    x = x % moduloVal;
    if (!typeOpts.unsigned && x >= moduloBound) {
      return x - moduloVal;
    } else if (typeOpts.unsigned) {
      if (x < 0) {
        x += moduloVal;
      } else if (x === -0) {
        return 0;
      }
    }
    return x;
  };
}
conversions["void"] = function() {
  return void 0;
};
conversions["boolean"] = function(val) {
  return !!val;
};
conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });
conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
conversions["double"] = function(V) {
  const x = +V;
  if (!Number.isFinite(x)) {
    throw new TypeError("Argument is not a finite floating-point value");
  }
  return x;
};
conversions["unrestricted double"] = function(V) {
  const x = +V;
  if (isNaN(x)) {
    throw new TypeError("Argument is NaN");
  }
  return x;
};
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];
conversions["DOMString"] = function(V, opts) {
  if (!opts)
    opts = {};
  if (opts.treatNullAsEmptyString && V === null) {
    return "";
  }
  return String(V);
};
conversions["ByteString"] = function(V, opts) {
  const x = String(V);
  let c = void 0;
  for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
    if (c > 255) {
      throw new TypeError("Argument is not a valid bytestring");
    }
  }
  return x;
};
conversions["USVString"] = function(V) {
  const S = String(V);
  const n = S.length;
  const U = [];
  for (let i = 0; i < n; ++i) {
    const c = S.charCodeAt(i);
    if (c < 55296 || c > 57343) {
      U.push(String.fromCodePoint(c));
    } else if (56320 <= c && c <= 57343) {
      U.push(String.fromCodePoint(65533));
    } else {
      if (i === n - 1) {
        U.push(String.fromCodePoint(65533));
      } else {
        const d = S.charCodeAt(i + 1);
        if (56320 <= d && d <= 57343) {
          const a = c & 1023;
          const b = d & 1023;
          U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(65533));
        }
      }
    }
  }
  return U.join("");
};
conversions["Date"] = function(V, opts) {
  if (!(V instanceof Date)) {
    throw new TypeError("Argument is not a Date object");
  }
  if (isNaN(V)) {
    return void 0;
  }
  return V;
};
conversions["RegExp"] = function(V, opts) {
  if (!(V instanceof RegExp)) {
    V = new RegExp(V);
  }
  return V;
};
var utils$4 = { exports: {} };
(function(module) {
  module.exports.mixin = function mixin(target, source) {
    const keys = Object.getOwnPropertyNames(source);
    for (let i = 0; i < keys.length; ++i) {
      Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
    }
  };
  module.exports.wrapperSymbol = Symbol("wrapper");
  module.exports.implSymbol = Symbol("impl");
  module.exports.wrapperForImpl = function(impl) {
    return impl[module.exports.wrapperSymbol];
  };
  module.exports.implForWrapper = function(wrapper) {
    return wrapper[module.exports.implSymbol];
  };
})(utils$4);
var URLImpl = {};
var urlStateMachine = { exports: {} };
var tr46 = {};
const require$$1 = [
  [
    [
      0,
      44
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      45,
      46
    ],
    "valid"
  ],
  [
    [
      47,
      47
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      48,
      57
    ],
    "valid"
  ],
  [
    [
      58,
      64
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      65,
      65
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      66,
      66
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      67,
      67
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      68,
      68
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      69,
      69
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      70,
      70
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      71,
      71
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      72,
      72
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      73,
      73
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      74,
      74
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      75,
      75
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      76,
      76
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      77,
      77
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      78,
      78
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      79,
      79
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      80,
      80
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      81,
      81
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      82,
      82
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      83,
      83
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      84,
      84
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      85,
      85
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      86,
      86
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      87,
      87
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      88,
      88
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      89,
      89
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      90,
      90
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      91,
      96
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      97,
      122
    ],
    "valid"
  ],
  [
    [
      123,
      127
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      128,
      159
    ],
    "disallowed"
  ],
  [
    [
      160,
      160
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      161,
      167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      168,
      168
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776
    ]
  ],
  [
    [
      169,
      169
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      170,
      170
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      171,
      172
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      173,
      173
    ],
    "ignored"
  ],
  [
    [
      174,
      174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      175,
      175
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      176,
      177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      178,
      178
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      179,
      179
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      180,
      180
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      181,
      181
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      182,
      182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      183,
      183
    ],
    "valid"
  ],
  [
    [
      184,
      184
    ],
    "disallowed_STD3_mapped",
    [
      32,
      807
    ]
  ],
  [
    [
      185,
      185
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      186,
      186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      187,
      187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      188,
      188
    ],
    "mapped",
    [
      49,
      8260,
      52
    ]
  ],
  [
    [
      189,
      189
    ],
    "mapped",
    [
      49,
      8260,
      50
    ]
  ],
  [
    [
      190,
      190
    ],
    "mapped",
    [
      51,
      8260,
      52
    ]
  ],
  [
    [
      191,
      191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      192,
      192
    ],
    "mapped",
    [
      224
    ]
  ],
  [
    [
      193,
      193
    ],
    "mapped",
    [
      225
    ]
  ],
  [
    [
      194,
      194
    ],
    "mapped",
    [
      226
    ]
  ],
  [
    [
      195,
      195
    ],
    "mapped",
    [
      227
    ]
  ],
  [
    [
      196,
      196
    ],
    "mapped",
    [
      228
    ]
  ],
  [
    [
      197,
      197
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      198,
      198
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      199,
      199
    ],
    "mapped",
    [
      231
    ]
  ],
  [
    [
      200,
      200
    ],
    "mapped",
    [
      232
    ]
  ],
  [
    [
      201,
      201
    ],
    "mapped",
    [
      233
    ]
  ],
  [
    [
      202,
      202
    ],
    "mapped",
    [
      234
    ]
  ],
  [
    [
      203,
      203
    ],
    "mapped",
    [
      235
    ]
  ],
  [
    [
      204,
      204
    ],
    "mapped",
    [
      236
    ]
  ],
  [
    [
      205,
      205
    ],
    "mapped",
    [
      237
    ]
  ],
  [
    [
      206,
      206
    ],
    "mapped",
    [
      238
    ]
  ],
  [
    [
      207,
      207
    ],
    "mapped",
    [
      239
    ]
  ],
  [
    [
      208,
      208
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      209,
      209
    ],
    "mapped",
    [
      241
    ]
  ],
  [
    [
      210,
      210
    ],
    "mapped",
    [
      242
    ]
  ],
  [
    [
      211,
      211
    ],
    "mapped",
    [
      243
    ]
  ],
  [
    [
      212,
      212
    ],
    "mapped",
    [
      244
    ]
  ],
  [
    [
      213,
      213
    ],
    "mapped",
    [
      245
    ]
  ],
  [
    [
      214,
      214
    ],
    "mapped",
    [
      246
    ]
  ],
  [
    [
      215,
      215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      216,
      216
    ],
    "mapped",
    [
      248
    ]
  ],
  [
    [
      217,
      217
    ],
    "mapped",
    [
      249
    ]
  ],
  [
    [
      218,
      218
    ],
    "mapped",
    [
      250
    ]
  ],
  [
    [
      219,
      219
    ],
    "mapped",
    [
      251
    ]
  ],
  [
    [
      220,
      220
    ],
    "mapped",
    [
      252
    ]
  ],
  [
    [
      221,
      221
    ],
    "mapped",
    [
      253
    ]
  ],
  [
    [
      222,
      222
    ],
    "mapped",
    [
      254
    ]
  ],
  [
    [
      223,
      223
    ],
    "deviation",
    [
      115,
      115
    ]
  ],
  [
    [
      224,
      246
    ],
    "valid"
  ],
  [
    [
      247,
      247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      248,
      255
    ],
    "valid"
  ],
  [
    [
      256,
      256
    ],
    "mapped",
    [
      257
    ]
  ],
  [
    [
      257,
      257
    ],
    "valid"
  ],
  [
    [
      258,
      258
    ],
    "mapped",
    [
      259
    ]
  ],
  [
    [
      259,
      259
    ],
    "valid"
  ],
  [
    [
      260,
      260
    ],
    "mapped",
    [
      261
    ]
  ],
  [
    [
      261,
      261
    ],
    "valid"
  ],
  [
    [
      262,
      262
    ],
    "mapped",
    [
      263
    ]
  ],
  [
    [
      263,
      263
    ],
    "valid"
  ],
  [
    [
      264,
      264
    ],
    "mapped",
    [
      265
    ]
  ],
  [
    [
      265,
      265
    ],
    "valid"
  ],
  [
    [
      266,
      266
    ],
    "mapped",
    [
      267
    ]
  ],
  [
    [
      267,
      267
    ],
    "valid"
  ],
  [
    [
      268,
      268
    ],
    "mapped",
    [
      269
    ]
  ],
  [
    [
      269,
      269
    ],
    "valid"
  ],
  [
    [
      270,
      270
    ],
    "mapped",
    [
      271
    ]
  ],
  [
    [
      271,
      271
    ],
    "valid"
  ],
  [
    [
      272,
      272
    ],
    "mapped",
    [
      273
    ]
  ],
  [
    [
      273,
      273
    ],
    "valid"
  ],
  [
    [
      274,
      274
    ],
    "mapped",
    [
      275
    ]
  ],
  [
    [
      275,
      275
    ],
    "valid"
  ],
  [
    [
      276,
      276
    ],
    "mapped",
    [
      277
    ]
  ],
  [
    [
      277,
      277
    ],
    "valid"
  ],
  [
    [
      278,
      278
    ],
    "mapped",
    [
      279
    ]
  ],
  [
    [
      279,
      279
    ],
    "valid"
  ],
  [
    [
      280,
      280
    ],
    "mapped",
    [
      281
    ]
  ],
  [
    [
      281,
      281
    ],
    "valid"
  ],
  [
    [
      282,
      282
    ],
    "mapped",
    [
      283
    ]
  ],
  [
    [
      283,
      283
    ],
    "valid"
  ],
  [
    [
      284,
      284
    ],
    "mapped",
    [
      285
    ]
  ],
  [
    [
      285,
      285
    ],
    "valid"
  ],
  [
    [
      286,
      286
    ],
    "mapped",
    [
      287
    ]
  ],
  [
    [
      287,
      287
    ],
    "valid"
  ],
  [
    [
      288,
      288
    ],
    "mapped",
    [
      289
    ]
  ],
  [
    [
      289,
      289
    ],
    "valid"
  ],
  [
    [
      290,
      290
    ],
    "mapped",
    [
      291
    ]
  ],
  [
    [
      291,
      291
    ],
    "valid"
  ],
  [
    [
      292,
      292
    ],
    "mapped",
    [
      293
    ]
  ],
  [
    [
      293,
      293
    ],
    "valid"
  ],
  [
    [
      294,
      294
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      295,
      295
    ],
    "valid"
  ],
  [
    [
      296,
      296
    ],
    "mapped",
    [
      297
    ]
  ],
  [
    [
      297,
      297
    ],
    "valid"
  ],
  [
    [
      298,
      298
    ],
    "mapped",
    [
      299
    ]
  ],
  [
    [
      299,
      299
    ],
    "valid"
  ],
  [
    [
      300,
      300
    ],
    "mapped",
    [
      301
    ]
  ],
  [
    [
      301,
      301
    ],
    "valid"
  ],
  [
    [
      302,
      302
    ],
    "mapped",
    [
      303
    ]
  ],
  [
    [
      303,
      303
    ],
    "valid"
  ],
  [
    [
      304,
      304
    ],
    "mapped",
    [
      105,
      775
    ]
  ],
  [
    [
      305,
      305
    ],
    "valid"
  ],
  [
    [
      306,
      307
    ],
    "mapped",
    [
      105,
      106
    ]
  ],
  [
    [
      308,
      308
    ],
    "mapped",
    [
      309
    ]
  ],
  [
    [
      309,
      309
    ],
    "valid"
  ],
  [
    [
      310,
      310
    ],
    "mapped",
    [
      311
    ]
  ],
  [
    [
      311,
      312
    ],
    "valid"
  ],
  [
    [
      313,
      313
    ],
    "mapped",
    [
      314
    ]
  ],
  [
    [
      314,
      314
    ],
    "valid"
  ],
  [
    [
      315,
      315
    ],
    "mapped",
    [
      316
    ]
  ],
  [
    [
      316,
      316
    ],
    "valid"
  ],
  [
    [
      317,
      317
    ],
    "mapped",
    [
      318
    ]
  ],
  [
    [
      318,
      318
    ],
    "valid"
  ],
  [
    [
      319,
      320
    ],
    "mapped",
    [
      108,
      183
    ]
  ],
  [
    [
      321,
      321
    ],
    "mapped",
    [
      322
    ]
  ],
  [
    [
      322,
      322
    ],
    "valid"
  ],
  [
    [
      323,
      323
    ],
    "mapped",
    [
      324
    ]
  ],
  [
    [
      324,
      324
    ],
    "valid"
  ],
  [
    [
      325,
      325
    ],
    "mapped",
    [
      326
    ]
  ],
  [
    [
      326,
      326
    ],
    "valid"
  ],
  [
    [
      327,
      327
    ],
    "mapped",
    [
      328
    ]
  ],
  [
    [
      328,
      328
    ],
    "valid"
  ],
  [
    [
      329,
      329
    ],
    "mapped",
    [
      700,
      110
    ]
  ],
  [
    [
      330,
      330
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      331,
      331
    ],
    "valid"
  ],
  [
    [
      332,
      332
    ],
    "mapped",
    [
      333
    ]
  ],
  [
    [
      333,
      333
    ],
    "valid"
  ],
  [
    [
      334,
      334
    ],
    "mapped",
    [
      335
    ]
  ],
  [
    [
      335,
      335
    ],
    "valid"
  ],
  [
    [
      336,
      336
    ],
    "mapped",
    [
      337
    ]
  ],
  [
    [
      337,
      337
    ],
    "valid"
  ],
  [
    [
      338,
      338
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      339,
      339
    ],
    "valid"
  ],
  [
    [
      340,
      340
    ],
    "mapped",
    [
      341
    ]
  ],
  [
    [
      341,
      341
    ],
    "valid"
  ],
  [
    [
      342,
      342
    ],
    "mapped",
    [
      343
    ]
  ],
  [
    [
      343,
      343
    ],
    "valid"
  ],
  [
    [
      344,
      344
    ],
    "mapped",
    [
      345
    ]
  ],
  [
    [
      345,
      345
    ],
    "valid"
  ],
  [
    [
      346,
      346
    ],
    "mapped",
    [
      347
    ]
  ],
  [
    [
      347,
      347
    ],
    "valid"
  ],
  [
    [
      348,
      348
    ],
    "mapped",
    [
      349
    ]
  ],
  [
    [
      349,
      349
    ],
    "valid"
  ],
  [
    [
      350,
      350
    ],
    "mapped",
    [
      351
    ]
  ],
  [
    [
      351,
      351
    ],
    "valid"
  ],
  [
    [
      352,
      352
    ],
    "mapped",
    [
      353
    ]
  ],
  [
    [
      353,
      353
    ],
    "valid"
  ],
  [
    [
      354,
      354
    ],
    "mapped",
    [
      355
    ]
  ],
  [
    [
      355,
      355
    ],
    "valid"
  ],
  [
    [
      356,
      356
    ],
    "mapped",
    [
      357
    ]
  ],
  [
    [
      357,
      357
    ],
    "valid"
  ],
  [
    [
      358,
      358
    ],
    "mapped",
    [
      359
    ]
  ],
  [
    [
      359,
      359
    ],
    "valid"
  ],
  [
    [
      360,
      360
    ],
    "mapped",
    [
      361
    ]
  ],
  [
    [
      361,
      361
    ],
    "valid"
  ],
  [
    [
      362,
      362
    ],
    "mapped",
    [
      363
    ]
  ],
  [
    [
      363,
      363
    ],
    "valid"
  ],
  [
    [
      364,
      364
    ],
    "mapped",
    [
      365
    ]
  ],
  [
    [
      365,
      365
    ],
    "valid"
  ],
  [
    [
      366,
      366
    ],
    "mapped",
    [
      367
    ]
  ],
  [
    [
      367,
      367
    ],
    "valid"
  ],
  [
    [
      368,
      368
    ],
    "mapped",
    [
      369
    ]
  ],
  [
    [
      369,
      369
    ],
    "valid"
  ],
  [
    [
      370,
      370
    ],
    "mapped",
    [
      371
    ]
  ],
  [
    [
      371,
      371
    ],
    "valid"
  ],
  [
    [
      372,
      372
    ],
    "mapped",
    [
      373
    ]
  ],
  [
    [
      373,
      373
    ],
    "valid"
  ],
  [
    [
      374,
      374
    ],
    "mapped",
    [
      375
    ]
  ],
  [
    [
      375,
      375
    ],
    "valid"
  ],
  [
    [
      376,
      376
    ],
    "mapped",
    [
      255
    ]
  ],
  [
    [
      377,
      377
    ],
    "mapped",
    [
      378
    ]
  ],
  [
    [
      378,
      378
    ],
    "valid"
  ],
  [
    [
      379,
      379
    ],
    "mapped",
    [
      380
    ]
  ],
  [
    [
      380,
      380
    ],
    "valid"
  ],
  [
    [
      381,
      381
    ],
    "mapped",
    [
      382
    ]
  ],
  [
    [
      382,
      382
    ],
    "valid"
  ],
  [
    [
      383,
      383
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      384,
      384
    ],
    "valid"
  ],
  [
    [
      385,
      385
    ],
    "mapped",
    [
      595
    ]
  ],
  [
    [
      386,
      386
    ],
    "mapped",
    [
      387
    ]
  ],
  [
    [
      387,
      387
    ],
    "valid"
  ],
  [
    [
      388,
      388
    ],
    "mapped",
    [
      389
    ]
  ],
  [
    [
      389,
      389
    ],
    "valid"
  ],
  [
    [
      390,
      390
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      391,
      391
    ],
    "mapped",
    [
      392
    ]
  ],
  [
    [
      392,
      392
    ],
    "valid"
  ],
  [
    [
      393,
      393
    ],
    "mapped",
    [
      598
    ]
  ],
  [
    [
      394,
      394
    ],
    "mapped",
    [
      599
    ]
  ],
  [
    [
      395,
      395
    ],
    "mapped",
    [
      396
    ]
  ],
  [
    [
      396,
      397
    ],
    "valid"
  ],
  [
    [
      398,
      398
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      399,
      399
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      400,
      400
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      401,
      401
    ],
    "mapped",
    [
      402
    ]
  ],
  [
    [
      402,
      402
    ],
    "valid"
  ],
  [
    [
      403,
      403
    ],
    "mapped",
    [
      608
    ]
  ],
  [
    [
      404,
      404
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      405,
      405
    ],
    "valid"
  ],
  [
    [
      406,
      406
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      407,
      407
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      408,
      408
    ],
    "mapped",
    [
      409
    ]
  ],
  [
    [
      409,
      411
    ],
    "valid"
  ],
  [
    [
      412,
      412
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      413,
      413
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      414,
      414
    ],
    "valid"
  ],
  [
    [
      415,
      415
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      416,
      416
    ],
    "mapped",
    [
      417
    ]
  ],
  [
    [
      417,
      417
    ],
    "valid"
  ],
  [
    [
      418,
      418
    ],
    "mapped",
    [
      419
    ]
  ],
  [
    [
      419,
      419
    ],
    "valid"
  ],
  [
    [
      420,
      420
    ],
    "mapped",
    [
      421
    ]
  ],
  [
    [
      421,
      421
    ],
    "valid"
  ],
  [
    [
      422,
      422
    ],
    "mapped",
    [
      640
    ]
  ],
  [
    [
      423,
      423
    ],
    "mapped",
    [
      424
    ]
  ],
  [
    [
      424,
      424
    ],
    "valid"
  ],
  [
    [
      425,
      425
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      426,
      427
    ],
    "valid"
  ],
  [
    [
      428,
      428
    ],
    "mapped",
    [
      429
    ]
  ],
  [
    [
      429,
      429
    ],
    "valid"
  ],
  [
    [
      430,
      430
    ],
    "mapped",
    [
      648
    ]
  ],
  [
    [
      431,
      431
    ],
    "mapped",
    [
      432
    ]
  ],
  [
    [
      432,
      432
    ],
    "valid"
  ],
  [
    [
      433,
      433
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      434,
      434
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      435,
      435
    ],
    "mapped",
    [
      436
    ]
  ],
  [
    [
      436,
      436
    ],
    "valid"
  ],
  [
    [
      437,
      437
    ],
    "mapped",
    [
      438
    ]
  ],
  [
    [
      438,
      438
    ],
    "valid"
  ],
  [
    [
      439,
      439
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      440,
      440
    ],
    "mapped",
    [
      441
    ]
  ],
  [
    [
      441,
      443
    ],
    "valid"
  ],
  [
    [
      444,
      444
    ],
    "mapped",
    [
      445
    ]
  ],
  [
    [
      445,
      451
    ],
    "valid"
  ],
  [
    [
      452,
      454
    ],
    "mapped",
    [
      100,
      382
    ]
  ],
  [
    [
      455,
      457
    ],
    "mapped",
    [
      108,
      106
    ]
  ],
  [
    [
      458,
      460
    ],
    "mapped",
    [
      110,
      106
    ]
  ],
  [
    [
      461,
      461
    ],
    "mapped",
    [
      462
    ]
  ],
  [
    [
      462,
      462
    ],
    "valid"
  ],
  [
    [
      463,
      463
    ],
    "mapped",
    [
      464
    ]
  ],
  [
    [
      464,
      464
    ],
    "valid"
  ],
  [
    [
      465,
      465
    ],
    "mapped",
    [
      466
    ]
  ],
  [
    [
      466,
      466
    ],
    "valid"
  ],
  [
    [
      467,
      467
    ],
    "mapped",
    [
      468
    ]
  ],
  [
    [
      468,
      468
    ],
    "valid"
  ],
  [
    [
      469,
      469
    ],
    "mapped",
    [
      470
    ]
  ],
  [
    [
      470,
      470
    ],
    "valid"
  ],
  [
    [
      471,
      471
    ],
    "mapped",
    [
      472
    ]
  ],
  [
    [
      472,
      472
    ],
    "valid"
  ],
  [
    [
      473,
      473
    ],
    "mapped",
    [
      474
    ]
  ],
  [
    [
      474,
      474
    ],
    "valid"
  ],
  [
    [
      475,
      475
    ],
    "mapped",
    [
      476
    ]
  ],
  [
    [
      476,
      477
    ],
    "valid"
  ],
  [
    [
      478,
      478
    ],
    "mapped",
    [
      479
    ]
  ],
  [
    [
      479,
      479
    ],
    "valid"
  ],
  [
    [
      480,
      480
    ],
    "mapped",
    [
      481
    ]
  ],
  [
    [
      481,
      481
    ],
    "valid"
  ],
  [
    [
      482,
      482
    ],
    "mapped",
    [
      483
    ]
  ],
  [
    [
      483,
      483
    ],
    "valid"
  ],
  [
    [
      484,
      484
    ],
    "mapped",
    [
      485
    ]
  ],
  [
    [
      485,
      485
    ],
    "valid"
  ],
  [
    [
      486,
      486
    ],
    "mapped",
    [
      487
    ]
  ],
  [
    [
      487,
      487
    ],
    "valid"
  ],
  [
    [
      488,
      488
    ],
    "mapped",
    [
      489
    ]
  ],
  [
    [
      489,
      489
    ],
    "valid"
  ],
  [
    [
      490,
      490
    ],
    "mapped",
    [
      491
    ]
  ],
  [
    [
      491,
      491
    ],
    "valid"
  ],
  [
    [
      492,
      492
    ],
    "mapped",
    [
      493
    ]
  ],
  [
    [
      493,
      493
    ],
    "valid"
  ],
  [
    [
      494,
      494
    ],
    "mapped",
    [
      495
    ]
  ],
  [
    [
      495,
      496
    ],
    "valid"
  ],
  [
    [
      497,
      499
    ],
    "mapped",
    [
      100,
      122
    ]
  ],
  [
    [
      500,
      500
    ],
    "mapped",
    [
      501
    ]
  ],
  [
    [
      501,
      501
    ],
    "valid"
  ],
  [
    [
      502,
      502
    ],
    "mapped",
    [
      405
    ]
  ],
  [
    [
      503,
      503
    ],
    "mapped",
    [
      447
    ]
  ],
  [
    [
      504,
      504
    ],
    "mapped",
    [
      505
    ]
  ],
  [
    [
      505,
      505
    ],
    "valid"
  ],
  [
    [
      506,
      506
    ],
    "mapped",
    [
      507
    ]
  ],
  [
    [
      507,
      507
    ],
    "valid"
  ],
  [
    [
      508,
      508
    ],
    "mapped",
    [
      509
    ]
  ],
  [
    [
      509,
      509
    ],
    "valid"
  ],
  [
    [
      510,
      510
    ],
    "mapped",
    [
      511
    ]
  ],
  [
    [
      511,
      511
    ],
    "valid"
  ],
  [
    [
      512,
      512
    ],
    "mapped",
    [
      513
    ]
  ],
  [
    [
      513,
      513
    ],
    "valid"
  ],
  [
    [
      514,
      514
    ],
    "mapped",
    [
      515
    ]
  ],
  [
    [
      515,
      515
    ],
    "valid"
  ],
  [
    [
      516,
      516
    ],
    "mapped",
    [
      517
    ]
  ],
  [
    [
      517,
      517
    ],
    "valid"
  ],
  [
    [
      518,
      518
    ],
    "mapped",
    [
      519
    ]
  ],
  [
    [
      519,
      519
    ],
    "valid"
  ],
  [
    [
      520,
      520
    ],
    "mapped",
    [
      521
    ]
  ],
  [
    [
      521,
      521
    ],
    "valid"
  ],
  [
    [
      522,
      522
    ],
    "mapped",
    [
      523
    ]
  ],
  [
    [
      523,
      523
    ],
    "valid"
  ],
  [
    [
      524,
      524
    ],
    "mapped",
    [
      525
    ]
  ],
  [
    [
      525,
      525
    ],
    "valid"
  ],
  [
    [
      526,
      526
    ],
    "mapped",
    [
      527
    ]
  ],
  [
    [
      527,
      527
    ],
    "valid"
  ],
  [
    [
      528,
      528
    ],
    "mapped",
    [
      529
    ]
  ],
  [
    [
      529,
      529
    ],
    "valid"
  ],
  [
    [
      530,
      530
    ],
    "mapped",
    [
      531
    ]
  ],
  [
    [
      531,
      531
    ],
    "valid"
  ],
  [
    [
      532,
      532
    ],
    "mapped",
    [
      533
    ]
  ],
  [
    [
      533,
      533
    ],
    "valid"
  ],
  [
    [
      534,
      534
    ],
    "mapped",
    [
      535
    ]
  ],
  [
    [
      535,
      535
    ],
    "valid"
  ],
  [
    [
      536,
      536
    ],
    "mapped",
    [
      537
    ]
  ],
  [
    [
      537,
      537
    ],
    "valid"
  ],
  [
    [
      538,
      538
    ],
    "mapped",
    [
      539
    ]
  ],
  [
    [
      539,
      539
    ],
    "valid"
  ],
  [
    [
      540,
      540
    ],
    "mapped",
    [
      541
    ]
  ],
  [
    [
      541,
      541
    ],
    "valid"
  ],
  [
    [
      542,
      542
    ],
    "mapped",
    [
      543
    ]
  ],
  [
    [
      543,
      543
    ],
    "valid"
  ],
  [
    [
      544,
      544
    ],
    "mapped",
    [
      414
    ]
  ],
  [
    [
      545,
      545
    ],
    "valid"
  ],
  [
    [
      546,
      546
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      547,
      547
    ],
    "valid"
  ],
  [
    [
      548,
      548
    ],
    "mapped",
    [
      549
    ]
  ],
  [
    [
      549,
      549
    ],
    "valid"
  ],
  [
    [
      550,
      550
    ],
    "mapped",
    [
      551
    ]
  ],
  [
    [
      551,
      551
    ],
    "valid"
  ],
  [
    [
      552,
      552
    ],
    "mapped",
    [
      553
    ]
  ],
  [
    [
      553,
      553
    ],
    "valid"
  ],
  [
    [
      554,
      554
    ],
    "mapped",
    [
      555
    ]
  ],
  [
    [
      555,
      555
    ],
    "valid"
  ],
  [
    [
      556,
      556
    ],
    "mapped",
    [
      557
    ]
  ],
  [
    [
      557,
      557
    ],
    "valid"
  ],
  [
    [
      558,
      558
    ],
    "mapped",
    [
      559
    ]
  ],
  [
    [
      559,
      559
    ],
    "valid"
  ],
  [
    [
      560,
      560
    ],
    "mapped",
    [
      561
    ]
  ],
  [
    [
      561,
      561
    ],
    "valid"
  ],
  [
    [
      562,
      562
    ],
    "mapped",
    [
      563
    ]
  ],
  [
    [
      563,
      563
    ],
    "valid"
  ],
  [
    [
      564,
      566
    ],
    "valid"
  ],
  [
    [
      567,
      569
    ],
    "valid"
  ],
  [
    [
      570,
      570
    ],
    "mapped",
    [
      11365
    ]
  ],
  [
    [
      571,
      571
    ],
    "mapped",
    [
      572
    ]
  ],
  [
    [
      572,
      572
    ],
    "valid"
  ],
  [
    [
      573,
      573
    ],
    "mapped",
    [
      410
    ]
  ],
  [
    [
      574,
      574
    ],
    "mapped",
    [
      11366
    ]
  ],
  [
    [
      575,
      576
    ],
    "valid"
  ],
  [
    [
      577,
      577
    ],
    "mapped",
    [
      578
    ]
  ],
  [
    [
      578,
      578
    ],
    "valid"
  ],
  [
    [
      579,
      579
    ],
    "mapped",
    [
      384
    ]
  ],
  [
    [
      580,
      580
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      581,
      581
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      582,
      582
    ],
    "mapped",
    [
      583
    ]
  ],
  [
    [
      583,
      583
    ],
    "valid"
  ],
  [
    [
      584,
      584
    ],
    "mapped",
    [
      585
    ]
  ],
  [
    [
      585,
      585
    ],
    "valid"
  ],
  [
    [
      586,
      586
    ],
    "mapped",
    [
      587
    ]
  ],
  [
    [
      587,
      587
    ],
    "valid"
  ],
  [
    [
      588,
      588
    ],
    "mapped",
    [
      589
    ]
  ],
  [
    [
      589,
      589
    ],
    "valid"
  ],
  [
    [
      590,
      590
    ],
    "mapped",
    [
      591
    ]
  ],
  [
    [
      591,
      591
    ],
    "valid"
  ],
  [
    [
      592,
      680
    ],
    "valid"
  ],
  [
    [
      681,
      685
    ],
    "valid"
  ],
  [
    [
      686,
      687
    ],
    "valid"
  ],
  [
    [
      688,
      688
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      689,
      689
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      690,
      690
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      691,
      691
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      692,
      692
    ],
    "mapped",
    [
      633
    ]
  ],
  [
    [
      693,
      693
    ],
    "mapped",
    [
      635
    ]
  ],
  [
    [
      694,
      694
    ],
    "mapped",
    [
      641
    ]
  ],
  [
    [
      695,
      695
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      696,
      696
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      697,
      705
    ],
    "valid"
  ],
  [
    [
      706,
      709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      710,
      721
    ],
    "valid"
  ],
  [
    [
      722,
      727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      728,
      728
    ],
    "disallowed_STD3_mapped",
    [
      32,
      774
    ]
  ],
  [
    [
      729,
      729
    ],
    "disallowed_STD3_mapped",
    [
      32,
      775
    ]
  ],
  [
    [
      730,
      730
    ],
    "disallowed_STD3_mapped",
    [
      32,
      778
    ]
  ],
  [
    [
      731,
      731
    ],
    "disallowed_STD3_mapped",
    [
      32,
      808
    ]
  ],
  [
    [
      732,
      732
    ],
    "disallowed_STD3_mapped",
    [
      32,
      771
    ]
  ],
  [
    [
      733,
      733
    ],
    "disallowed_STD3_mapped",
    [
      32,
      779
    ]
  ],
  [
    [
      734,
      734
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      735,
      735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      736,
      736
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      737,
      737
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      738,
      738
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      739,
      739
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      740,
      740
    ],
    "mapped",
    [
      661
    ]
  ],
  [
    [
      741,
      745
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      746,
      747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      748,
      748
    ],
    "valid"
  ],
  [
    [
      749,
      749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      750,
      750
    ],
    "valid"
  ],
  [
    [
      751,
      767
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      768,
      831
    ],
    "valid"
  ],
  [
    [
      832,
      832
    ],
    "mapped",
    [
      768
    ]
  ],
  [
    [
      833,
      833
    ],
    "mapped",
    [
      769
    ]
  ],
  [
    [
      834,
      834
    ],
    "valid"
  ],
  [
    [
      835,
      835
    ],
    "mapped",
    [
      787
    ]
  ],
  [
    [
      836,
      836
    ],
    "mapped",
    [
      776,
      769
    ]
  ],
  [
    [
      837,
      837
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      838,
      846
    ],
    "valid"
  ],
  [
    [
      847,
      847
    ],
    "ignored"
  ],
  [
    [
      848,
      855
    ],
    "valid"
  ],
  [
    [
      856,
      860
    ],
    "valid"
  ],
  [
    [
      861,
      863
    ],
    "valid"
  ],
  [
    [
      864,
      865
    ],
    "valid"
  ],
  [
    [
      866,
      866
    ],
    "valid"
  ],
  [
    [
      867,
      879
    ],
    "valid"
  ],
  [
    [
      880,
      880
    ],
    "mapped",
    [
      881
    ]
  ],
  [
    [
      881,
      881
    ],
    "valid"
  ],
  [
    [
      882,
      882
    ],
    "mapped",
    [
      883
    ]
  ],
  [
    [
      883,
      883
    ],
    "valid"
  ],
  [
    [
      884,
      884
    ],
    "mapped",
    [
      697
    ]
  ],
  [
    [
      885,
      885
    ],
    "valid"
  ],
  [
    [
      886,
      886
    ],
    "mapped",
    [
      887
    ]
  ],
  [
    [
      887,
      887
    ],
    "valid"
  ],
  [
    [
      888,
      889
    ],
    "disallowed"
  ],
  [
    [
      890,
      890
    ],
    "disallowed_STD3_mapped",
    [
      32,
      953
    ]
  ],
  [
    [
      891,
      893
    ],
    "valid"
  ],
  [
    [
      894,
      894
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      895,
      895
    ],
    "mapped",
    [
      1011
    ]
  ],
  [
    [
      896,
      899
    ],
    "disallowed"
  ],
  [
    [
      900,
      900
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      901,
      901
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      902,
      902
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      903,
      903
    ],
    "mapped",
    [
      183
    ]
  ],
  [
    [
      904,
      904
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      905,
      905
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      906,
      906
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      907,
      907
    ],
    "disallowed"
  ],
  [
    [
      908,
      908
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      909,
      909
    ],
    "disallowed"
  ],
  [
    [
      910,
      910
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      911,
      911
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      912,
      912
    ],
    "valid"
  ],
  [
    [
      913,
      913
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      914,
      914
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      915,
      915
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      916,
      916
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      917,
      917
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      918,
      918
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      919,
      919
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      920,
      920
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      921,
      921
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      922,
      922
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      923,
      923
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      924,
      924
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      925,
      925
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      926,
      926
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      927,
      927
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      928,
      928
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      929,
      929
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      930,
      930
    ],
    "disallowed"
  ],
  [
    [
      931,
      931
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      932,
      932
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      933,
      933
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      934,
      934
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      935,
      935
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      936,
      936
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      937,
      937
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      938,
      938
    ],
    "mapped",
    [
      970
    ]
  ],
  [
    [
      939,
      939
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      940,
      961
    ],
    "valid"
  ],
  [
    [
      962,
      962
    ],
    "deviation",
    [
      963
    ]
  ],
  [
    [
      963,
      974
    ],
    "valid"
  ],
  [
    [
      975,
      975
    ],
    "mapped",
    [
      983
    ]
  ],
  [
    [
      976,
      976
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      977,
      977
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      978,
      978
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      979,
      979
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      980,
      980
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      981,
      981
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      982,
      982
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      983,
      983
    ],
    "valid"
  ],
  [
    [
      984,
      984
    ],
    "mapped",
    [
      985
    ]
  ],
  [
    [
      985,
      985
    ],
    "valid"
  ],
  [
    [
      986,
      986
    ],
    "mapped",
    [
      987
    ]
  ],
  [
    [
      987,
      987
    ],
    "valid"
  ],
  [
    [
      988,
      988
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      989,
      989
    ],
    "valid"
  ],
  [
    [
      990,
      990
    ],
    "mapped",
    [
      991
    ]
  ],
  [
    [
      991,
      991
    ],
    "valid"
  ],
  [
    [
      992,
      992
    ],
    "mapped",
    [
      993
    ]
  ],
  [
    [
      993,
      993
    ],
    "valid"
  ],
  [
    [
      994,
      994
    ],
    "mapped",
    [
      995
    ]
  ],
  [
    [
      995,
      995
    ],
    "valid"
  ],
  [
    [
      996,
      996
    ],
    "mapped",
    [
      997
    ]
  ],
  [
    [
      997,
      997
    ],
    "valid"
  ],
  [
    [
      998,
      998
    ],
    "mapped",
    [
      999
    ]
  ],
  [
    [
      999,
      999
    ],
    "valid"
  ],
  [
    [
      1e3,
      1e3
    ],
    "mapped",
    [
      1001
    ]
  ],
  [
    [
      1001,
      1001
    ],
    "valid"
  ],
  [
    [
      1002,
      1002
    ],
    "mapped",
    [
      1003
    ]
  ],
  [
    [
      1003,
      1003
    ],
    "valid"
  ],
  [
    [
      1004,
      1004
    ],
    "mapped",
    [
      1005
    ]
  ],
  [
    [
      1005,
      1005
    ],
    "valid"
  ],
  [
    [
      1006,
      1006
    ],
    "mapped",
    [
      1007
    ]
  ],
  [
    [
      1007,
      1007
    ],
    "valid"
  ],
  [
    [
      1008,
      1008
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      1009,
      1009
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      1010,
      1010
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1011,
      1011
    ],
    "valid"
  ],
  [
    [
      1012,
      1012
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      1013,
      1013
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      1014,
      1014
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1015,
      1015
    ],
    "mapped",
    [
      1016
    ]
  ],
  [
    [
      1016,
      1016
    ],
    "valid"
  ],
  [
    [
      1017,
      1017
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1018,
      1018
    ],
    "mapped",
    [
      1019
    ]
  ],
  [
    [
      1019,
      1019
    ],
    "valid"
  ],
  [
    [
      1020,
      1020
    ],
    "valid"
  ],
  [
    [
      1021,
      1021
    ],
    "mapped",
    [
      891
    ]
  ],
  [
    [
      1022,
      1022
    ],
    "mapped",
    [
      892
    ]
  ],
  [
    [
      1023,
      1023
    ],
    "mapped",
    [
      893
    ]
  ],
  [
    [
      1024,
      1024
    ],
    "mapped",
    [
      1104
    ]
  ],
  [
    [
      1025,
      1025
    ],
    "mapped",
    [
      1105
    ]
  ],
  [
    [
      1026,
      1026
    ],
    "mapped",
    [
      1106
    ]
  ],
  [
    [
      1027,
      1027
    ],
    "mapped",
    [
      1107
    ]
  ],
  [
    [
      1028,
      1028
    ],
    "mapped",
    [
      1108
    ]
  ],
  [
    [
      1029,
      1029
    ],
    "mapped",
    [
      1109
    ]
  ],
  [
    [
      1030,
      1030
    ],
    "mapped",
    [
      1110
    ]
  ],
  [
    [
      1031,
      1031
    ],
    "mapped",
    [
      1111
    ]
  ],
  [
    [
      1032,
      1032
    ],
    "mapped",
    [
      1112
    ]
  ],
  [
    [
      1033,
      1033
    ],
    "mapped",
    [
      1113
    ]
  ],
  [
    [
      1034,
      1034
    ],
    "mapped",
    [
      1114
    ]
  ],
  [
    [
      1035,
      1035
    ],
    "mapped",
    [
      1115
    ]
  ],
  [
    [
      1036,
      1036
    ],
    "mapped",
    [
      1116
    ]
  ],
  [
    [
      1037,
      1037
    ],
    "mapped",
    [
      1117
    ]
  ],
  [
    [
      1038,
      1038
    ],
    "mapped",
    [
      1118
    ]
  ],
  [
    [
      1039,
      1039
    ],
    "mapped",
    [
      1119
    ]
  ],
  [
    [
      1040,
      1040
    ],
    "mapped",
    [
      1072
    ]
  ],
  [
    [
      1041,
      1041
    ],
    "mapped",
    [
      1073
    ]
  ],
  [
    [
      1042,
      1042
    ],
    "mapped",
    [
      1074
    ]
  ],
  [
    [
      1043,
      1043
    ],
    "mapped",
    [
      1075
    ]
  ],
  [
    [
      1044,
      1044
    ],
    "mapped",
    [
      1076
    ]
  ],
  [
    [
      1045,
      1045
    ],
    "mapped",
    [
      1077
    ]
  ],
  [
    [
      1046,
      1046
    ],
    "mapped",
    [
      1078
    ]
  ],
  [
    [
      1047,
      1047
    ],
    "mapped",
    [
      1079
    ]
  ],
  [
    [
      1048,
      1048
    ],
    "mapped",
    [
      1080
    ]
  ],
  [
    [
      1049,
      1049
    ],
    "mapped",
    [
      1081
    ]
  ],
  [
    [
      1050,
      1050
    ],
    "mapped",
    [
      1082
    ]
  ],
  [
    [
      1051,
      1051
    ],
    "mapped",
    [
      1083
    ]
  ],
  [
    [
      1052,
      1052
    ],
    "mapped",
    [
      1084
    ]
  ],
  [
    [
      1053,
      1053
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      1054,
      1054
    ],
    "mapped",
    [
      1086
    ]
  ],
  [
    [
      1055,
      1055
    ],
    "mapped",
    [
      1087
    ]
  ],
  [
    [
      1056,
      1056
    ],
    "mapped",
    [
      1088
    ]
  ],
  [
    [
      1057,
      1057
    ],
    "mapped",
    [
      1089
    ]
  ],
  [
    [
      1058,
      1058
    ],
    "mapped",
    [
      1090
    ]
  ],
  [
    [
      1059,
      1059
    ],
    "mapped",
    [
      1091
    ]
  ],
  [
    [
      1060,
      1060
    ],
    "mapped",
    [
      1092
    ]
  ],
  [
    [
      1061,
      1061
    ],
    "mapped",
    [
      1093
    ]
  ],
  [
    [
      1062,
      1062
    ],
    "mapped",
    [
      1094
    ]
  ],
  [
    [
      1063,
      1063
    ],
    "mapped",
    [
      1095
    ]
  ],
  [
    [
      1064,
      1064
    ],
    "mapped",
    [
      1096
    ]
  ],
  [
    [
      1065,
      1065
    ],
    "mapped",
    [
      1097
    ]
  ],
  [
    [
      1066,
      1066
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      1067,
      1067
    ],
    "mapped",
    [
      1099
    ]
  ],
  [
    [
      1068,
      1068
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      1069,
      1069
    ],
    "mapped",
    [
      1101
    ]
  ],
  [
    [
      1070,
      1070
    ],
    "mapped",
    [
      1102
    ]
  ],
  [
    [
      1071,
      1071
    ],
    "mapped",
    [
      1103
    ]
  ],
  [
    [
      1072,
      1103
    ],
    "valid"
  ],
  [
    [
      1104,
      1104
    ],
    "valid"
  ],
  [
    [
      1105,
      1116
    ],
    "valid"
  ],
  [
    [
      1117,
      1117
    ],
    "valid"
  ],
  [
    [
      1118,
      1119
    ],
    "valid"
  ],
  [
    [
      1120,
      1120
    ],
    "mapped",
    [
      1121
    ]
  ],
  [
    [
      1121,
      1121
    ],
    "valid"
  ],
  [
    [
      1122,
      1122
    ],
    "mapped",
    [
      1123
    ]
  ],
  [
    [
      1123,
      1123
    ],
    "valid"
  ],
  [
    [
      1124,
      1124
    ],
    "mapped",
    [
      1125
    ]
  ],
  [
    [
      1125,
      1125
    ],
    "valid"
  ],
  [
    [
      1126,
      1126
    ],
    "mapped",
    [
      1127
    ]
  ],
  [
    [
      1127,
      1127
    ],
    "valid"
  ],
  [
    [
      1128,
      1128
    ],
    "mapped",
    [
      1129
    ]
  ],
  [
    [
      1129,
      1129
    ],
    "valid"
  ],
  [
    [
      1130,
      1130
    ],
    "mapped",
    [
      1131
    ]
  ],
  [
    [
      1131,
      1131
    ],
    "valid"
  ],
  [
    [
      1132,
      1132
    ],
    "mapped",
    [
      1133
    ]
  ],
  [
    [
      1133,
      1133
    ],
    "valid"
  ],
  [
    [
      1134,
      1134
    ],
    "mapped",
    [
      1135
    ]
  ],
  [
    [
      1135,
      1135
    ],
    "valid"
  ],
  [
    [
      1136,
      1136
    ],
    "mapped",
    [
      1137
    ]
  ],
  [
    [
      1137,
      1137
    ],
    "valid"
  ],
  [
    [
      1138,
      1138
    ],
    "mapped",
    [
      1139
    ]
  ],
  [
    [
      1139,
      1139
    ],
    "valid"
  ],
  [
    [
      1140,
      1140
    ],
    "mapped",
    [
      1141
    ]
  ],
  [
    [
      1141,
      1141
    ],
    "valid"
  ],
  [
    [
      1142,
      1142
    ],
    "mapped",
    [
      1143
    ]
  ],
  [
    [
      1143,
      1143
    ],
    "valid"
  ],
  [
    [
      1144,
      1144
    ],
    "mapped",
    [
      1145
    ]
  ],
  [
    [
      1145,
      1145
    ],
    "valid"
  ],
  [
    [
      1146,
      1146
    ],
    "mapped",
    [
      1147
    ]
  ],
  [
    [
      1147,
      1147
    ],
    "valid"
  ],
  [
    [
      1148,
      1148
    ],
    "mapped",
    [
      1149
    ]
  ],
  [
    [
      1149,
      1149
    ],
    "valid"
  ],
  [
    [
      1150,
      1150
    ],
    "mapped",
    [
      1151
    ]
  ],
  [
    [
      1151,
      1151
    ],
    "valid"
  ],
  [
    [
      1152,
      1152
    ],
    "mapped",
    [
      1153
    ]
  ],
  [
    [
      1153,
      1153
    ],
    "valid"
  ],
  [
    [
      1154,
      1154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1155,
      1158
    ],
    "valid"
  ],
  [
    [
      1159,
      1159
    ],
    "valid"
  ],
  [
    [
      1160,
      1161
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1162,
      1162
    ],
    "mapped",
    [
      1163
    ]
  ],
  [
    [
      1163,
      1163
    ],
    "valid"
  ],
  [
    [
      1164,
      1164
    ],
    "mapped",
    [
      1165
    ]
  ],
  [
    [
      1165,
      1165
    ],
    "valid"
  ],
  [
    [
      1166,
      1166
    ],
    "mapped",
    [
      1167
    ]
  ],
  [
    [
      1167,
      1167
    ],
    "valid"
  ],
  [
    [
      1168,
      1168
    ],
    "mapped",
    [
      1169
    ]
  ],
  [
    [
      1169,
      1169
    ],
    "valid"
  ],
  [
    [
      1170,
      1170
    ],
    "mapped",
    [
      1171
    ]
  ],
  [
    [
      1171,
      1171
    ],
    "valid"
  ],
  [
    [
      1172,
      1172
    ],
    "mapped",
    [
      1173
    ]
  ],
  [
    [
      1173,
      1173
    ],
    "valid"
  ],
  [
    [
      1174,
      1174
    ],
    "mapped",
    [
      1175
    ]
  ],
  [
    [
      1175,
      1175
    ],
    "valid"
  ],
  [
    [
      1176,
      1176
    ],
    "mapped",
    [
      1177
    ]
  ],
  [
    [
      1177,
      1177
    ],
    "valid"
  ],
  [
    [
      1178,
      1178
    ],
    "mapped",
    [
      1179
    ]
  ],
  [
    [
      1179,
      1179
    ],
    "valid"
  ],
  [
    [
      1180,
      1180
    ],
    "mapped",
    [
      1181
    ]
  ],
  [
    [
      1181,
      1181
    ],
    "valid"
  ],
  [
    [
      1182,
      1182
    ],
    "mapped",
    [
      1183
    ]
  ],
  [
    [
      1183,
      1183
    ],
    "valid"
  ],
  [
    [
      1184,
      1184
    ],
    "mapped",
    [
      1185
    ]
  ],
  [
    [
      1185,
      1185
    ],
    "valid"
  ],
  [
    [
      1186,
      1186
    ],
    "mapped",
    [
      1187
    ]
  ],
  [
    [
      1187,
      1187
    ],
    "valid"
  ],
  [
    [
      1188,
      1188
    ],
    "mapped",
    [
      1189
    ]
  ],
  [
    [
      1189,
      1189
    ],
    "valid"
  ],
  [
    [
      1190,
      1190
    ],
    "mapped",
    [
      1191
    ]
  ],
  [
    [
      1191,
      1191
    ],
    "valid"
  ],
  [
    [
      1192,
      1192
    ],
    "mapped",
    [
      1193
    ]
  ],
  [
    [
      1193,
      1193
    ],
    "valid"
  ],
  [
    [
      1194,
      1194
    ],
    "mapped",
    [
      1195
    ]
  ],
  [
    [
      1195,
      1195
    ],
    "valid"
  ],
  [
    [
      1196,
      1196
    ],
    "mapped",
    [
      1197
    ]
  ],
  [
    [
      1197,
      1197
    ],
    "valid"
  ],
  [
    [
      1198,
      1198
    ],
    "mapped",
    [
      1199
    ]
  ],
  [
    [
      1199,
      1199
    ],
    "valid"
  ],
  [
    [
      1200,
      1200
    ],
    "mapped",
    [
      1201
    ]
  ],
  [
    [
      1201,
      1201
    ],
    "valid"
  ],
  [
    [
      1202,
      1202
    ],
    "mapped",
    [
      1203
    ]
  ],
  [
    [
      1203,
      1203
    ],
    "valid"
  ],
  [
    [
      1204,
      1204
    ],
    "mapped",
    [
      1205
    ]
  ],
  [
    [
      1205,
      1205
    ],
    "valid"
  ],
  [
    [
      1206,
      1206
    ],
    "mapped",
    [
      1207
    ]
  ],
  [
    [
      1207,
      1207
    ],
    "valid"
  ],
  [
    [
      1208,
      1208
    ],
    "mapped",
    [
      1209
    ]
  ],
  [
    [
      1209,
      1209
    ],
    "valid"
  ],
  [
    [
      1210,
      1210
    ],
    "mapped",
    [
      1211
    ]
  ],
  [
    [
      1211,
      1211
    ],
    "valid"
  ],
  [
    [
      1212,
      1212
    ],
    "mapped",
    [
      1213
    ]
  ],
  [
    [
      1213,
      1213
    ],
    "valid"
  ],
  [
    [
      1214,
      1214
    ],
    "mapped",
    [
      1215
    ]
  ],
  [
    [
      1215,
      1215
    ],
    "valid"
  ],
  [
    [
      1216,
      1216
    ],
    "disallowed"
  ],
  [
    [
      1217,
      1217
    ],
    "mapped",
    [
      1218
    ]
  ],
  [
    [
      1218,
      1218
    ],
    "valid"
  ],
  [
    [
      1219,
      1219
    ],
    "mapped",
    [
      1220
    ]
  ],
  [
    [
      1220,
      1220
    ],
    "valid"
  ],
  [
    [
      1221,
      1221
    ],
    "mapped",
    [
      1222
    ]
  ],
  [
    [
      1222,
      1222
    ],
    "valid"
  ],
  [
    [
      1223,
      1223
    ],
    "mapped",
    [
      1224
    ]
  ],
  [
    [
      1224,
      1224
    ],
    "valid"
  ],
  [
    [
      1225,
      1225
    ],
    "mapped",
    [
      1226
    ]
  ],
  [
    [
      1226,
      1226
    ],
    "valid"
  ],
  [
    [
      1227,
      1227
    ],
    "mapped",
    [
      1228
    ]
  ],
  [
    [
      1228,
      1228
    ],
    "valid"
  ],
  [
    [
      1229,
      1229
    ],
    "mapped",
    [
      1230
    ]
  ],
  [
    [
      1230,
      1230
    ],
    "valid"
  ],
  [
    [
      1231,
      1231
    ],
    "valid"
  ],
  [
    [
      1232,
      1232
    ],
    "mapped",
    [
      1233
    ]
  ],
  [
    [
      1233,
      1233
    ],
    "valid"
  ],
  [
    [
      1234,
      1234
    ],
    "mapped",
    [
      1235
    ]
  ],
  [
    [
      1235,
      1235
    ],
    "valid"
  ],
  [
    [
      1236,
      1236
    ],
    "mapped",
    [
      1237
    ]
  ],
  [
    [
      1237,
      1237
    ],
    "valid"
  ],
  [
    [
      1238,
      1238
    ],
    "mapped",
    [
      1239
    ]
  ],
  [
    [
      1239,
      1239
    ],
    "valid"
  ],
  [
    [
      1240,
      1240
    ],
    "mapped",
    [
      1241
    ]
  ],
  [
    [
      1241,
      1241
    ],
    "valid"
  ],
  [
    [
      1242,
      1242
    ],
    "mapped",
    [
      1243
    ]
  ],
  [
    [
      1243,
      1243
    ],
    "valid"
  ],
  [
    [
      1244,
      1244
    ],
    "mapped",
    [
      1245
    ]
  ],
  [
    [
      1245,
      1245
    ],
    "valid"
  ],
  [
    [
      1246,
      1246
    ],
    "mapped",
    [
      1247
    ]
  ],
  [
    [
      1247,
      1247
    ],
    "valid"
  ],
  [
    [
      1248,
      1248
    ],
    "mapped",
    [
      1249
    ]
  ],
  [
    [
      1249,
      1249
    ],
    "valid"
  ],
  [
    [
      1250,
      1250
    ],
    "mapped",
    [
      1251
    ]
  ],
  [
    [
      1251,
      1251
    ],
    "valid"
  ],
  [
    [
      1252,
      1252
    ],
    "mapped",
    [
      1253
    ]
  ],
  [
    [
      1253,
      1253
    ],
    "valid"
  ],
  [
    [
      1254,
      1254
    ],
    "mapped",
    [
      1255
    ]
  ],
  [
    [
      1255,
      1255
    ],
    "valid"
  ],
  [
    [
      1256,
      1256
    ],
    "mapped",
    [
      1257
    ]
  ],
  [
    [
      1257,
      1257
    ],
    "valid"
  ],
  [
    [
      1258,
      1258
    ],
    "mapped",
    [
      1259
    ]
  ],
  [
    [
      1259,
      1259
    ],
    "valid"
  ],
  [
    [
      1260,
      1260
    ],
    "mapped",
    [
      1261
    ]
  ],
  [
    [
      1261,
      1261
    ],
    "valid"
  ],
  [
    [
      1262,
      1262
    ],
    "mapped",
    [
      1263
    ]
  ],
  [
    [
      1263,
      1263
    ],
    "valid"
  ],
  [
    [
      1264,
      1264
    ],
    "mapped",
    [
      1265
    ]
  ],
  [
    [
      1265,
      1265
    ],
    "valid"
  ],
  [
    [
      1266,
      1266
    ],
    "mapped",
    [
      1267
    ]
  ],
  [
    [
      1267,
      1267
    ],
    "valid"
  ],
  [
    [
      1268,
      1268
    ],
    "mapped",
    [
      1269
    ]
  ],
  [
    [
      1269,
      1269
    ],
    "valid"
  ],
  [
    [
      1270,
      1270
    ],
    "mapped",
    [
      1271
    ]
  ],
  [
    [
      1271,
      1271
    ],
    "valid"
  ],
  [
    [
      1272,
      1272
    ],
    "mapped",
    [
      1273
    ]
  ],
  [
    [
      1273,
      1273
    ],
    "valid"
  ],
  [
    [
      1274,
      1274
    ],
    "mapped",
    [
      1275
    ]
  ],
  [
    [
      1275,
      1275
    ],
    "valid"
  ],
  [
    [
      1276,
      1276
    ],
    "mapped",
    [
      1277
    ]
  ],
  [
    [
      1277,
      1277
    ],
    "valid"
  ],
  [
    [
      1278,
      1278
    ],
    "mapped",
    [
      1279
    ]
  ],
  [
    [
      1279,
      1279
    ],
    "valid"
  ],
  [
    [
      1280,
      1280
    ],
    "mapped",
    [
      1281
    ]
  ],
  [
    [
      1281,
      1281
    ],
    "valid"
  ],
  [
    [
      1282,
      1282
    ],
    "mapped",
    [
      1283
    ]
  ],
  [
    [
      1283,
      1283
    ],
    "valid"
  ],
  [
    [
      1284,
      1284
    ],
    "mapped",
    [
      1285
    ]
  ],
  [
    [
      1285,
      1285
    ],
    "valid"
  ],
  [
    [
      1286,
      1286
    ],
    "mapped",
    [
      1287
    ]
  ],
  [
    [
      1287,
      1287
    ],
    "valid"
  ],
  [
    [
      1288,
      1288
    ],
    "mapped",
    [
      1289
    ]
  ],
  [
    [
      1289,
      1289
    ],
    "valid"
  ],
  [
    [
      1290,
      1290
    ],
    "mapped",
    [
      1291
    ]
  ],
  [
    [
      1291,
      1291
    ],
    "valid"
  ],
  [
    [
      1292,
      1292
    ],
    "mapped",
    [
      1293
    ]
  ],
  [
    [
      1293,
      1293
    ],
    "valid"
  ],
  [
    [
      1294,
      1294
    ],
    "mapped",
    [
      1295
    ]
  ],
  [
    [
      1295,
      1295
    ],
    "valid"
  ],
  [
    [
      1296,
      1296
    ],
    "mapped",
    [
      1297
    ]
  ],
  [
    [
      1297,
      1297
    ],
    "valid"
  ],
  [
    [
      1298,
      1298
    ],
    "mapped",
    [
      1299
    ]
  ],
  [
    [
      1299,
      1299
    ],
    "valid"
  ],
  [
    [
      1300,
      1300
    ],
    "mapped",
    [
      1301
    ]
  ],
  [
    [
      1301,
      1301
    ],
    "valid"
  ],
  [
    [
      1302,
      1302
    ],
    "mapped",
    [
      1303
    ]
  ],
  [
    [
      1303,
      1303
    ],
    "valid"
  ],
  [
    [
      1304,
      1304
    ],
    "mapped",
    [
      1305
    ]
  ],
  [
    [
      1305,
      1305
    ],
    "valid"
  ],
  [
    [
      1306,
      1306
    ],
    "mapped",
    [
      1307
    ]
  ],
  [
    [
      1307,
      1307
    ],
    "valid"
  ],
  [
    [
      1308,
      1308
    ],
    "mapped",
    [
      1309
    ]
  ],
  [
    [
      1309,
      1309
    ],
    "valid"
  ],
  [
    [
      1310,
      1310
    ],
    "mapped",
    [
      1311
    ]
  ],
  [
    [
      1311,
      1311
    ],
    "valid"
  ],
  [
    [
      1312,
      1312
    ],
    "mapped",
    [
      1313
    ]
  ],
  [
    [
      1313,
      1313
    ],
    "valid"
  ],
  [
    [
      1314,
      1314
    ],
    "mapped",
    [
      1315
    ]
  ],
  [
    [
      1315,
      1315
    ],
    "valid"
  ],
  [
    [
      1316,
      1316
    ],
    "mapped",
    [
      1317
    ]
  ],
  [
    [
      1317,
      1317
    ],
    "valid"
  ],
  [
    [
      1318,
      1318
    ],
    "mapped",
    [
      1319
    ]
  ],
  [
    [
      1319,
      1319
    ],
    "valid"
  ],
  [
    [
      1320,
      1320
    ],
    "mapped",
    [
      1321
    ]
  ],
  [
    [
      1321,
      1321
    ],
    "valid"
  ],
  [
    [
      1322,
      1322
    ],
    "mapped",
    [
      1323
    ]
  ],
  [
    [
      1323,
      1323
    ],
    "valid"
  ],
  [
    [
      1324,
      1324
    ],
    "mapped",
    [
      1325
    ]
  ],
  [
    [
      1325,
      1325
    ],
    "valid"
  ],
  [
    [
      1326,
      1326
    ],
    "mapped",
    [
      1327
    ]
  ],
  [
    [
      1327,
      1327
    ],
    "valid"
  ],
  [
    [
      1328,
      1328
    ],
    "disallowed"
  ],
  [
    [
      1329,
      1329
    ],
    "mapped",
    [
      1377
    ]
  ],
  [
    [
      1330,
      1330
    ],
    "mapped",
    [
      1378
    ]
  ],
  [
    [
      1331,
      1331
    ],
    "mapped",
    [
      1379
    ]
  ],
  [
    [
      1332,
      1332
    ],
    "mapped",
    [
      1380
    ]
  ],
  [
    [
      1333,
      1333
    ],
    "mapped",
    [
      1381
    ]
  ],
  [
    [
      1334,
      1334
    ],
    "mapped",
    [
      1382
    ]
  ],
  [
    [
      1335,
      1335
    ],
    "mapped",
    [
      1383
    ]
  ],
  [
    [
      1336,
      1336
    ],
    "mapped",
    [
      1384
    ]
  ],
  [
    [
      1337,
      1337
    ],
    "mapped",
    [
      1385
    ]
  ],
  [
    [
      1338,
      1338
    ],
    "mapped",
    [
      1386
    ]
  ],
  [
    [
      1339,
      1339
    ],
    "mapped",
    [
      1387
    ]
  ],
  [
    [
      1340,
      1340
    ],
    "mapped",
    [
      1388
    ]
  ],
  [
    [
      1341,
      1341
    ],
    "mapped",
    [
      1389
    ]
  ],
  [
    [
      1342,
      1342
    ],
    "mapped",
    [
      1390
    ]
  ],
  [
    [
      1343,
      1343
    ],
    "mapped",
    [
      1391
    ]
  ],
  [
    [
      1344,
      1344
    ],
    "mapped",
    [
      1392
    ]
  ],
  [
    [
      1345,
      1345
    ],
    "mapped",
    [
      1393
    ]
  ],
  [
    [
      1346,
      1346
    ],
    "mapped",
    [
      1394
    ]
  ],
  [
    [
      1347,
      1347
    ],
    "mapped",
    [
      1395
    ]
  ],
  [
    [
      1348,
      1348
    ],
    "mapped",
    [
      1396
    ]
  ],
  [
    [
      1349,
      1349
    ],
    "mapped",
    [
      1397
    ]
  ],
  [
    [
      1350,
      1350
    ],
    "mapped",
    [
      1398
    ]
  ],
  [
    [
      1351,
      1351
    ],
    "mapped",
    [
      1399
    ]
  ],
  [
    [
      1352,
      1352
    ],
    "mapped",
    [
      1400
    ]
  ],
  [
    [
      1353,
      1353
    ],
    "mapped",
    [
      1401
    ]
  ],
  [
    [
      1354,
      1354
    ],
    "mapped",
    [
      1402
    ]
  ],
  [
    [
      1355,
      1355
    ],
    "mapped",
    [
      1403
    ]
  ],
  [
    [
      1356,
      1356
    ],
    "mapped",
    [
      1404
    ]
  ],
  [
    [
      1357,
      1357
    ],
    "mapped",
    [
      1405
    ]
  ],
  [
    [
      1358,
      1358
    ],
    "mapped",
    [
      1406
    ]
  ],
  [
    [
      1359,
      1359
    ],
    "mapped",
    [
      1407
    ]
  ],
  [
    [
      1360,
      1360
    ],
    "mapped",
    [
      1408
    ]
  ],
  [
    [
      1361,
      1361
    ],
    "mapped",
    [
      1409
    ]
  ],
  [
    [
      1362,
      1362
    ],
    "mapped",
    [
      1410
    ]
  ],
  [
    [
      1363,
      1363
    ],
    "mapped",
    [
      1411
    ]
  ],
  [
    [
      1364,
      1364
    ],
    "mapped",
    [
      1412
    ]
  ],
  [
    [
      1365,
      1365
    ],
    "mapped",
    [
      1413
    ]
  ],
  [
    [
      1366,
      1366
    ],
    "mapped",
    [
      1414
    ]
  ],
  [
    [
      1367,
      1368
    ],
    "disallowed"
  ],
  [
    [
      1369,
      1369
    ],
    "valid"
  ],
  [
    [
      1370,
      1375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1376,
      1376
    ],
    "disallowed"
  ],
  [
    [
      1377,
      1414
    ],
    "valid"
  ],
  [
    [
      1415,
      1415
    ],
    "mapped",
    [
      1381,
      1410
    ]
  ],
  [
    [
      1416,
      1416
    ],
    "disallowed"
  ],
  [
    [
      1417,
      1417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1418,
      1418
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1419,
      1420
    ],
    "disallowed"
  ],
  [
    [
      1421,
      1422
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1423,
      1423
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1424,
      1424
    ],
    "disallowed"
  ],
  [
    [
      1425,
      1441
    ],
    "valid"
  ],
  [
    [
      1442,
      1442
    ],
    "valid"
  ],
  [
    [
      1443,
      1455
    ],
    "valid"
  ],
  [
    [
      1456,
      1465
    ],
    "valid"
  ],
  [
    [
      1466,
      1466
    ],
    "valid"
  ],
  [
    [
      1467,
      1469
    ],
    "valid"
  ],
  [
    [
      1470,
      1470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1471,
      1471
    ],
    "valid"
  ],
  [
    [
      1472,
      1472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1473,
      1474
    ],
    "valid"
  ],
  [
    [
      1475,
      1475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1476,
      1476
    ],
    "valid"
  ],
  [
    [
      1477,
      1477
    ],
    "valid"
  ],
  [
    [
      1478,
      1478
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1479,
      1479
    ],
    "valid"
  ],
  [
    [
      1480,
      1487
    ],
    "disallowed"
  ],
  [
    [
      1488,
      1514
    ],
    "valid"
  ],
  [
    [
      1515,
      1519
    ],
    "disallowed"
  ],
  [
    [
      1520,
      1524
    ],
    "valid"
  ],
  [
    [
      1525,
      1535
    ],
    "disallowed"
  ],
  [
    [
      1536,
      1539
    ],
    "disallowed"
  ],
  [
    [
      1540,
      1540
    ],
    "disallowed"
  ],
  [
    [
      1541,
      1541
    ],
    "disallowed"
  ],
  [
    [
      1542,
      1546
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1547,
      1547
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1548,
      1548
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1549,
      1551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1552,
      1557
    ],
    "valid"
  ],
  [
    [
      1558,
      1562
    ],
    "valid"
  ],
  [
    [
      1563,
      1563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1564,
      1564
    ],
    "disallowed"
  ],
  [
    [
      1565,
      1565
    ],
    "disallowed"
  ],
  [
    [
      1566,
      1566
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1567,
      1567
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1568,
      1568
    ],
    "valid"
  ],
  [
    [
      1569,
      1594
    ],
    "valid"
  ],
  [
    [
      1595,
      1599
    ],
    "valid"
  ],
  [
    [
      1600,
      1600
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1601,
      1618
    ],
    "valid"
  ],
  [
    [
      1619,
      1621
    ],
    "valid"
  ],
  [
    [
      1622,
      1624
    ],
    "valid"
  ],
  [
    [
      1625,
      1630
    ],
    "valid"
  ],
  [
    [
      1631,
      1631
    ],
    "valid"
  ],
  [
    [
      1632,
      1641
    ],
    "valid"
  ],
  [
    [
      1642,
      1645
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1646,
      1647
    ],
    "valid"
  ],
  [
    [
      1648,
      1652
    ],
    "valid"
  ],
  [
    [
      1653,
      1653
    ],
    "mapped",
    [
      1575,
      1652
    ]
  ],
  [
    [
      1654,
      1654
    ],
    "mapped",
    [
      1608,
      1652
    ]
  ],
  [
    [
      1655,
      1655
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      1656,
      1656
    ],
    "mapped",
    [
      1610,
      1652
    ]
  ],
  [
    [
      1657,
      1719
    ],
    "valid"
  ],
  [
    [
      1720,
      1721
    ],
    "valid"
  ],
  [
    [
      1722,
      1726
    ],
    "valid"
  ],
  [
    [
      1727,
      1727
    ],
    "valid"
  ],
  [
    [
      1728,
      1742
    ],
    "valid"
  ],
  [
    [
      1743,
      1743
    ],
    "valid"
  ],
  [
    [
      1744,
      1747
    ],
    "valid"
  ],
  [
    [
      1748,
      1748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1749,
      1756
    ],
    "valid"
  ],
  [
    [
      1757,
      1757
    ],
    "disallowed"
  ],
  [
    [
      1758,
      1758
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1759,
      1768
    ],
    "valid"
  ],
  [
    [
      1769,
      1769
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1770,
      1773
    ],
    "valid"
  ],
  [
    [
      1774,
      1775
    ],
    "valid"
  ],
  [
    [
      1776,
      1785
    ],
    "valid"
  ],
  [
    [
      1786,
      1790
    ],
    "valid"
  ],
  [
    [
      1791,
      1791
    ],
    "valid"
  ],
  [
    [
      1792,
      1805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1806,
      1806
    ],
    "disallowed"
  ],
  [
    [
      1807,
      1807
    ],
    "disallowed"
  ],
  [
    [
      1808,
      1836
    ],
    "valid"
  ],
  [
    [
      1837,
      1839
    ],
    "valid"
  ],
  [
    [
      1840,
      1866
    ],
    "valid"
  ],
  [
    [
      1867,
      1868
    ],
    "disallowed"
  ],
  [
    [
      1869,
      1871
    ],
    "valid"
  ],
  [
    [
      1872,
      1901
    ],
    "valid"
  ],
  [
    [
      1902,
      1919
    ],
    "valid"
  ],
  [
    [
      1920,
      1968
    ],
    "valid"
  ],
  [
    [
      1969,
      1969
    ],
    "valid"
  ],
  [
    [
      1970,
      1983
    ],
    "disallowed"
  ],
  [
    [
      1984,
      2037
    ],
    "valid"
  ],
  [
    [
      2038,
      2042
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2043,
      2047
    ],
    "disallowed"
  ],
  [
    [
      2048,
      2093
    ],
    "valid"
  ],
  [
    [
      2094,
      2095
    ],
    "disallowed"
  ],
  [
    [
      2096,
      2110
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2111,
      2111
    ],
    "disallowed"
  ],
  [
    [
      2112,
      2139
    ],
    "valid"
  ],
  [
    [
      2140,
      2141
    ],
    "disallowed"
  ],
  [
    [
      2142,
      2142
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2143,
      2207
    ],
    "disallowed"
  ],
  [
    [
      2208,
      2208
    ],
    "valid"
  ],
  [
    [
      2209,
      2209
    ],
    "valid"
  ],
  [
    [
      2210,
      2220
    ],
    "valid"
  ],
  [
    [
      2221,
      2226
    ],
    "valid"
  ],
  [
    [
      2227,
      2228
    ],
    "valid"
  ],
  [
    [
      2229,
      2274
    ],
    "disallowed"
  ],
  [
    [
      2275,
      2275
    ],
    "valid"
  ],
  [
    [
      2276,
      2302
    ],
    "valid"
  ],
  [
    [
      2303,
      2303
    ],
    "valid"
  ],
  [
    [
      2304,
      2304
    ],
    "valid"
  ],
  [
    [
      2305,
      2307
    ],
    "valid"
  ],
  [
    [
      2308,
      2308
    ],
    "valid"
  ],
  [
    [
      2309,
      2361
    ],
    "valid"
  ],
  [
    [
      2362,
      2363
    ],
    "valid"
  ],
  [
    [
      2364,
      2381
    ],
    "valid"
  ],
  [
    [
      2382,
      2382
    ],
    "valid"
  ],
  [
    [
      2383,
      2383
    ],
    "valid"
  ],
  [
    [
      2384,
      2388
    ],
    "valid"
  ],
  [
    [
      2389,
      2389
    ],
    "valid"
  ],
  [
    [
      2390,
      2391
    ],
    "valid"
  ],
  [
    [
      2392,
      2392
    ],
    "mapped",
    [
      2325,
      2364
    ]
  ],
  [
    [
      2393,
      2393
    ],
    "mapped",
    [
      2326,
      2364
    ]
  ],
  [
    [
      2394,
      2394
    ],
    "mapped",
    [
      2327,
      2364
    ]
  ],
  [
    [
      2395,
      2395
    ],
    "mapped",
    [
      2332,
      2364
    ]
  ],
  [
    [
      2396,
      2396
    ],
    "mapped",
    [
      2337,
      2364
    ]
  ],
  [
    [
      2397,
      2397
    ],
    "mapped",
    [
      2338,
      2364
    ]
  ],
  [
    [
      2398,
      2398
    ],
    "mapped",
    [
      2347,
      2364
    ]
  ],
  [
    [
      2399,
      2399
    ],
    "mapped",
    [
      2351,
      2364
    ]
  ],
  [
    [
      2400,
      2403
    ],
    "valid"
  ],
  [
    [
      2404,
      2405
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2406,
      2415
    ],
    "valid"
  ],
  [
    [
      2416,
      2416
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2417,
      2418
    ],
    "valid"
  ],
  [
    [
      2419,
      2423
    ],
    "valid"
  ],
  [
    [
      2424,
      2424
    ],
    "valid"
  ],
  [
    [
      2425,
      2426
    ],
    "valid"
  ],
  [
    [
      2427,
      2428
    ],
    "valid"
  ],
  [
    [
      2429,
      2429
    ],
    "valid"
  ],
  [
    [
      2430,
      2431
    ],
    "valid"
  ],
  [
    [
      2432,
      2432
    ],
    "valid"
  ],
  [
    [
      2433,
      2435
    ],
    "valid"
  ],
  [
    [
      2436,
      2436
    ],
    "disallowed"
  ],
  [
    [
      2437,
      2444
    ],
    "valid"
  ],
  [
    [
      2445,
      2446
    ],
    "disallowed"
  ],
  [
    [
      2447,
      2448
    ],
    "valid"
  ],
  [
    [
      2449,
      2450
    ],
    "disallowed"
  ],
  [
    [
      2451,
      2472
    ],
    "valid"
  ],
  [
    [
      2473,
      2473
    ],
    "disallowed"
  ],
  [
    [
      2474,
      2480
    ],
    "valid"
  ],
  [
    [
      2481,
      2481
    ],
    "disallowed"
  ],
  [
    [
      2482,
      2482
    ],
    "valid"
  ],
  [
    [
      2483,
      2485
    ],
    "disallowed"
  ],
  [
    [
      2486,
      2489
    ],
    "valid"
  ],
  [
    [
      2490,
      2491
    ],
    "disallowed"
  ],
  [
    [
      2492,
      2492
    ],
    "valid"
  ],
  [
    [
      2493,
      2493
    ],
    "valid"
  ],
  [
    [
      2494,
      2500
    ],
    "valid"
  ],
  [
    [
      2501,
      2502
    ],
    "disallowed"
  ],
  [
    [
      2503,
      2504
    ],
    "valid"
  ],
  [
    [
      2505,
      2506
    ],
    "disallowed"
  ],
  [
    [
      2507,
      2509
    ],
    "valid"
  ],
  [
    [
      2510,
      2510
    ],
    "valid"
  ],
  [
    [
      2511,
      2518
    ],
    "disallowed"
  ],
  [
    [
      2519,
      2519
    ],
    "valid"
  ],
  [
    [
      2520,
      2523
    ],
    "disallowed"
  ],
  [
    [
      2524,
      2524
    ],
    "mapped",
    [
      2465,
      2492
    ]
  ],
  [
    [
      2525,
      2525
    ],
    "mapped",
    [
      2466,
      2492
    ]
  ],
  [
    [
      2526,
      2526
    ],
    "disallowed"
  ],
  [
    [
      2527,
      2527
    ],
    "mapped",
    [
      2479,
      2492
    ]
  ],
  [
    [
      2528,
      2531
    ],
    "valid"
  ],
  [
    [
      2532,
      2533
    ],
    "disallowed"
  ],
  [
    [
      2534,
      2545
    ],
    "valid"
  ],
  [
    [
      2546,
      2554
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2555,
      2555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2556,
      2560
    ],
    "disallowed"
  ],
  [
    [
      2561,
      2561
    ],
    "valid"
  ],
  [
    [
      2562,
      2562
    ],
    "valid"
  ],
  [
    [
      2563,
      2563
    ],
    "valid"
  ],
  [
    [
      2564,
      2564
    ],
    "disallowed"
  ],
  [
    [
      2565,
      2570
    ],
    "valid"
  ],
  [
    [
      2571,
      2574
    ],
    "disallowed"
  ],
  [
    [
      2575,
      2576
    ],
    "valid"
  ],
  [
    [
      2577,
      2578
    ],
    "disallowed"
  ],
  [
    [
      2579,
      2600
    ],
    "valid"
  ],
  [
    [
      2601,
      2601
    ],
    "disallowed"
  ],
  [
    [
      2602,
      2608
    ],
    "valid"
  ],
  [
    [
      2609,
      2609
    ],
    "disallowed"
  ],
  [
    [
      2610,
      2610
    ],
    "valid"
  ],
  [
    [
      2611,
      2611
    ],
    "mapped",
    [
      2610,
      2620
    ]
  ],
  [
    [
      2612,
      2612
    ],
    "disallowed"
  ],
  [
    [
      2613,
      2613
    ],
    "valid"
  ],
  [
    [
      2614,
      2614
    ],
    "mapped",
    [
      2616,
      2620
    ]
  ],
  [
    [
      2615,
      2615
    ],
    "disallowed"
  ],
  [
    [
      2616,
      2617
    ],
    "valid"
  ],
  [
    [
      2618,
      2619
    ],
    "disallowed"
  ],
  [
    [
      2620,
      2620
    ],
    "valid"
  ],
  [
    [
      2621,
      2621
    ],
    "disallowed"
  ],
  [
    [
      2622,
      2626
    ],
    "valid"
  ],
  [
    [
      2627,
      2630
    ],
    "disallowed"
  ],
  [
    [
      2631,
      2632
    ],
    "valid"
  ],
  [
    [
      2633,
      2634
    ],
    "disallowed"
  ],
  [
    [
      2635,
      2637
    ],
    "valid"
  ],
  [
    [
      2638,
      2640
    ],
    "disallowed"
  ],
  [
    [
      2641,
      2641
    ],
    "valid"
  ],
  [
    [
      2642,
      2648
    ],
    "disallowed"
  ],
  [
    [
      2649,
      2649
    ],
    "mapped",
    [
      2582,
      2620
    ]
  ],
  [
    [
      2650,
      2650
    ],
    "mapped",
    [
      2583,
      2620
    ]
  ],
  [
    [
      2651,
      2651
    ],
    "mapped",
    [
      2588,
      2620
    ]
  ],
  [
    [
      2652,
      2652
    ],
    "valid"
  ],
  [
    [
      2653,
      2653
    ],
    "disallowed"
  ],
  [
    [
      2654,
      2654
    ],
    "mapped",
    [
      2603,
      2620
    ]
  ],
  [
    [
      2655,
      2661
    ],
    "disallowed"
  ],
  [
    [
      2662,
      2676
    ],
    "valid"
  ],
  [
    [
      2677,
      2677
    ],
    "valid"
  ],
  [
    [
      2678,
      2688
    ],
    "disallowed"
  ],
  [
    [
      2689,
      2691
    ],
    "valid"
  ],
  [
    [
      2692,
      2692
    ],
    "disallowed"
  ],
  [
    [
      2693,
      2699
    ],
    "valid"
  ],
  [
    [
      2700,
      2700
    ],
    "valid"
  ],
  [
    [
      2701,
      2701
    ],
    "valid"
  ],
  [
    [
      2702,
      2702
    ],
    "disallowed"
  ],
  [
    [
      2703,
      2705
    ],
    "valid"
  ],
  [
    [
      2706,
      2706
    ],
    "disallowed"
  ],
  [
    [
      2707,
      2728
    ],
    "valid"
  ],
  [
    [
      2729,
      2729
    ],
    "disallowed"
  ],
  [
    [
      2730,
      2736
    ],
    "valid"
  ],
  [
    [
      2737,
      2737
    ],
    "disallowed"
  ],
  [
    [
      2738,
      2739
    ],
    "valid"
  ],
  [
    [
      2740,
      2740
    ],
    "disallowed"
  ],
  [
    [
      2741,
      2745
    ],
    "valid"
  ],
  [
    [
      2746,
      2747
    ],
    "disallowed"
  ],
  [
    [
      2748,
      2757
    ],
    "valid"
  ],
  [
    [
      2758,
      2758
    ],
    "disallowed"
  ],
  [
    [
      2759,
      2761
    ],
    "valid"
  ],
  [
    [
      2762,
      2762
    ],
    "disallowed"
  ],
  [
    [
      2763,
      2765
    ],
    "valid"
  ],
  [
    [
      2766,
      2767
    ],
    "disallowed"
  ],
  [
    [
      2768,
      2768
    ],
    "valid"
  ],
  [
    [
      2769,
      2783
    ],
    "disallowed"
  ],
  [
    [
      2784,
      2784
    ],
    "valid"
  ],
  [
    [
      2785,
      2787
    ],
    "valid"
  ],
  [
    [
      2788,
      2789
    ],
    "disallowed"
  ],
  [
    [
      2790,
      2799
    ],
    "valid"
  ],
  [
    [
      2800,
      2800
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2801,
      2801
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2802,
      2808
    ],
    "disallowed"
  ],
  [
    [
      2809,
      2809
    ],
    "valid"
  ],
  [
    [
      2810,
      2816
    ],
    "disallowed"
  ],
  [
    [
      2817,
      2819
    ],
    "valid"
  ],
  [
    [
      2820,
      2820
    ],
    "disallowed"
  ],
  [
    [
      2821,
      2828
    ],
    "valid"
  ],
  [
    [
      2829,
      2830
    ],
    "disallowed"
  ],
  [
    [
      2831,
      2832
    ],
    "valid"
  ],
  [
    [
      2833,
      2834
    ],
    "disallowed"
  ],
  [
    [
      2835,
      2856
    ],
    "valid"
  ],
  [
    [
      2857,
      2857
    ],
    "disallowed"
  ],
  [
    [
      2858,
      2864
    ],
    "valid"
  ],
  [
    [
      2865,
      2865
    ],
    "disallowed"
  ],
  [
    [
      2866,
      2867
    ],
    "valid"
  ],
  [
    [
      2868,
      2868
    ],
    "disallowed"
  ],
  [
    [
      2869,
      2869
    ],
    "valid"
  ],
  [
    [
      2870,
      2873
    ],
    "valid"
  ],
  [
    [
      2874,
      2875
    ],
    "disallowed"
  ],
  [
    [
      2876,
      2883
    ],
    "valid"
  ],
  [
    [
      2884,
      2884
    ],
    "valid"
  ],
  [
    [
      2885,
      2886
    ],
    "disallowed"
  ],
  [
    [
      2887,
      2888
    ],
    "valid"
  ],
  [
    [
      2889,
      2890
    ],
    "disallowed"
  ],
  [
    [
      2891,
      2893
    ],
    "valid"
  ],
  [
    [
      2894,
      2901
    ],
    "disallowed"
  ],
  [
    [
      2902,
      2903
    ],
    "valid"
  ],
  [
    [
      2904,
      2907
    ],
    "disallowed"
  ],
  [
    [
      2908,
      2908
    ],
    "mapped",
    [
      2849,
      2876
    ]
  ],
  [
    [
      2909,
      2909
    ],
    "mapped",
    [
      2850,
      2876
    ]
  ],
  [
    [
      2910,
      2910
    ],
    "disallowed"
  ],
  [
    [
      2911,
      2913
    ],
    "valid"
  ],
  [
    [
      2914,
      2915
    ],
    "valid"
  ],
  [
    [
      2916,
      2917
    ],
    "disallowed"
  ],
  [
    [
      2918,
      2927
    ],
    "valid"
  ],
  [
    [
      2928,
      2928
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2929,
      2929
    ],
    "valid"
  ],
  [
    [
      2930,
      2935
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2936,
      2945
    ],
    "disallowed"
  ],
  [
    [
      2946,
      2947
    ],
    "valid"
  ],
  [
    [
      2948,
      2948
    ],
    "disallowed"
  ],
  [
    [
      2949,
      2954
    ],
    "valid"
  ],
  [
    [
      2955,
      2957
    ],
    "disallowed"
  ],
  [
    [
      2958,
      2960
    ],
    "valid"
  ],
  [
    [
      2961,
      2961
    ],
    "disallowed"
  ],
  [
    [
      2962,
      2965
    ],
    "valid"
  ],
  [
    [
      2966,
      2968
    ],
    "disallowed"
  ],
  [
    [
      2969,
      2970
    ],
    "valid"
  ],
  [
    [
      2971,
      2971
    ],
    "disallowed"
  ],
  [
    [
      2972,
      2972
    ],
    "valid"
  ],
  [
    [
      2973,
      2973
    ],
    "disallowed"
  ],
  [
    [
      2974,
      2975
    ],
    "valid"
  ],
  [
    [
      2976,
      2978
    ],
    "disallowed"
  ],
  [
    [
      2979,
      2980
    ],
    "valid"
  ],
  [
    [
      2981,
      2983
    ],
    "disallowed"
  ],
  [
    [
      2984,
      2986
    ],
    "valid"
  ],
  [
    [
      2987,
      2989
    ],
    "disallowed"
  ],
  [
    [
      2990,
      2997
    ],
    "valid"
  ],
  [
    [
      2998,
      2998
    ],
    "valid"
  ],
  [
    [
      2999,
      3001
    ],
    "valid"
  ],
  [
    [
      3002,
      3005
    ],
    "disallowed"
  ],
  [
    [
      3006,
      3010
    ],
    "valid"
  ],
  [
    [
      3011,
      3013
    ],
    "disallowed"
  ],
  [
    [
      3014,
      3016
    ],
    "valid"
  ],
  [
    [
      3017,
      3017
    ],
    "disallowed"
  ],
  [
    [
      3018,
      3021
    ],
    "valid"
  ],
  [
    [
      3022,
      3023
    ],
    "disallowed"
  ],
  [
    [
      3024,
      3024
    ],
    "valid"
  ],
  [
    [
      3025,
      3030
    ],
    "disallowed"
  ],
  [
    [
      3031,
      3031
    ],
    "valid"
  ],
  [
    [
      3032,
      3045
    ],
    "disallowed"
  ],
  [
    [
      3046,
      3046
    ],
    "valid"
  ],
  [
    [
      3047,
      3055
    ],
    "valid"
  ],
  [
    [
      3056,
      3058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3059,
      3066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3067,
      3071
    ],
    "disallowed"
  ],
  [
    [
      3072,
      3072
    ],
    "valid"
  ],
  [
    [
      3073,
      3075
    ],
    "valid"
  ],
  [
    [
      3076,
      3076
    ],
    "disallowed"
  ],
  [
    [
      3077,
      3084
    ],
    "valid"
  ],
  [
    [
      3085,
      3085
    ],
    "disallowed"
  ],
  [
    [
      3086,
      3088
    ],
    "valid"
  ],
  [
    [
      3089,
      3089
    ],
    "disallowed"
  ],
  [
    [
      3090,
      3112
    ],
    "valid"
  ],
  [
    [
      3113,
      3113
    ],
    "disallowed"
  ],
  [
    [
      3114,
      3123
    ],
    "valid"
  ],
  [
    [
      3124,
      3124
    ],
    "valid"
  ],
  [
    [
      3125,
      3129
    ],
    "valid"
  ],
  [
    [
      3130,
      3132
    ],
    "disallowed"
  ],
  [
    [
      3133,
      3133
    ],
    "valid"
  ],
  [
    [
      3134,
      3140
    ],
    "valid"
  ],
  [
    [
      3141,
      3141
    ],
    "disallowed"
  ],
  [
    [
      3142,
      3144
    ],
    "valid"
  ],
  [
    [
      3145,
      3145
    ],
    "disallowed"
  ],
  [
    [
      3146,
      3149
    ],
    "valid"
  ],
  [
    [
      3150,
      3156
    ],
    "disallowed"
  ],
  [
    [
      3157,
      3158
    ],
    "valid"
  ],
  [
    [
      3159,
      3159
    ],
    "disallowed"
  ],
  [
    [
      3160,
      3161
    ],
    "valid"
  ],
  [
    [
      3162,
      3162
    ],
    "valid"
  ],
  [
    [
      3163,
      3167
    ],
    "disallowed"
  ],
  [
    [
      3168,
      3169
    ],
    "valid"
  ],
  [
    [
      3170,
      3171
    ],
    "valid"
  ],
  [
    [
      3172,
      3173
    ],
    "disallowed"
  ],
  [
    [
      3174,
      3183
    ],
    "valid"
  ],
  [
    [
      3184,
      3191
    ],
    "disallowed"
  ],
  [
    [
      3192,
      3199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3200,
      3200
    ],
    "disallowed"
  ],
  [
    [
      3201,
      3201
    ],
    "valid"
  ],
  [
    [
      3202,
      3203
    ],
    "valid"
  ],
  [
    [
      3204,
      3204
    ],
    "disallowed"
  ],
  [
    [
      3205,
      3212
    ],
    "valid"
  ],
  [
    [
      3213,
      3213
    ],
    "disallowed"
  ],
  [
    [
      3214,
      3216
    ],
    "valid"
  ],
  [
    [
      3217,
      3217
    ],
    "disallowed"
  ],
  [
    [
      3218,
      3240
    ],
    "valid"
  ],
  [
    [
      3241,
      3241
    ],
    "disallowed"
  ],
  [
    [
      3242,
      3251
    ],
    "valid"
  ],
  [
    [
      3252,
      3252
    ],
    "disallowed"
  ],
  [
    [
      3253,
      3257
    ],
    "valid"
  ],
  [
    [
      3258,
      3259
    ],
    "disallowed"
  ],
  [
    [
      3260,
      3261
    ],
    "valid"
  ],
  [
    [
      3262,
      3268
    ],
    "valid"
  ],
  [
    [
      3269,
      3269
    ],
    "disallowed"
  ],
  [
    [
      3270,
      3272
    ],
    "valid"
  ],
  [
    [
      3273,
      3273
    ],
    "disallowed"
  ],
  [
    [
      3274,
      3277
    ],
    "valid"
  ],
  [
    [
      3278,
      3284
    ],
    "disallowed"
  ],
  [
    [
      3285,
      3286
    ],
    "valid"
  ],
  [
    [
      3287,
      3293
    ],
    "disallowed"
  ],
  [
    [
      3294,
      3294
    ],
    "valid"
  ],
  [
    [
      3295,
      3295
    ],
    "disallowed"
  ],
  [
    [
      3296,
      3297
    ],
    "valid"
  ],
  [
    [
      3298,
      3299
    ],
    "valid"
  ],
  [
    [
      3300,
      3301
    ],
    "disallowed"
  ],
  [
    [
      3302,
      3311
    ],
    "valid"
  ],
  [
    [
      3312,
      3312
    ],
    "disallowed"
  ],
  [
    [
      3313,
      3314
    ],
    "valid"
  ],
  [
    [
      3315,
      3328
    ],
    "disallowed"
  ],
  [
    [
      3329,
      3329
    ],
    "valid"
  ],
  [
    [
      3330,
      3331
    ],
    "valid"
  ],
  [
    [
      3332,
      3332
    ],
    "disallowed"
  ],
  [
    [
      3333,
      3340
    ],
    "valid"
  ],
  [
    [
      3341,
      3341
    ],
    "disallowed"
  ],
  [
    [
      3342,
      3344
    ],
    "valid"
  ],
  [
    [
      3345,
      3345
    ],
    "disallowed"
  ],
  [
    [
      3346,
      3368
    ],
    "valid"
  ],
  [
    [
      3369,
      3369
    ],
    "valid"
  ],
  [
    [
      3370,
      3385
    ],
    "valid"
  ],
  [
    [
      3386,
      3386
    ],
    "valid"
  ],
  [
    [
      3387,
      3388
    ],
    "disallowed"
  ],
  [
    [
      3389,
      3389
    ],
    "valid"
  ],
  [
    [
      3390,
      3395
    ],
    "valid"
  ],
  [
    [
      3396,
      3396
    ],
    "valid"
  ],
  [
    [
      3397,
      3397
    ],
    "disallowed"
  ],
  [
    [
      3398,
      3400
    ],
    "valid"
  ],
  [
    [
      3401,
      3401
    ],
    "disallowed"
  ],
  [
    [
      3402,
      3405
    ],
    "valid"
  ],
  [
    [
      3406,
      3406
    ],
    "valid"
  ],
  [
    [
      3407,
      3414
    ],
    "disallowed"
  ],
  [
    [
      3415,
      3415
    ],
    "valid"
  ],
  [
    [
      3416,
      3422
    ],
    "disallowed"
  ],
  [
    [
      3423,
      3423
    ],
    "valid"
  ],
  [
    [
      3424,
      3425
    ],
    "valid"
  ],
  [
    [
      3426,
      3427
    ],
    "valid"
  ],
  [
    [
      3428,
      3429
    ],
    "disallowed"
  ],
  [
    [
      3430,
      3439
    ],
    "valid"
  ],
  [
    [
      3440,
      3445
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3446,
      3448
    ],
    "disallowed"
  ],
  [
    [
      3449,
      3449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3450,
      3455
    ],
    "valid"
  ],
  [
    [
      3456,
      3457
    ],
    "disallowed"
  ],
  [
    [
      3458,
      3459
    ],
    "valid"
  ],
  [
    [
      3460,
      3460
    ],
    "disallowed"
  ],
  [
    [
      3461,
      3478
    ],
    "valid"
  ],
  [
    [
      3479,
      3481
    ],
    "disallowed"
  ],
  [
    [
      3482,
      3505
    ],
    "valid"
  ],
  [
    [
      3506,
      3506
    ],
    "disallowed"
  ],
  [
    [
      3507,
      3515
    ],
    "valid"
  ],
  [
    [
      3516,
      3516
    ],
    "disallowed"
  ],
  [
    [
      3517,
      3517
    ],
    "valid"
  ],
  [
    [
      3518,
      3519
    ],
    "disallowed"
  ],
  [
    [
      3520,
      3526
    ],
    "valid"
  ],
  [
    [
      3527,
      3529
    ],
    "disallowed"
  ],
  [
    [
      3530,
      3530
    ],
    "valid"
  ],
  [
    [
      3531,
      3534
    ],
    "disallowed"
  ],
  [
    [
      3535,
      3540
    ],
    "valid"
  ],
  [
    [
      3541,
      3541
    ],
    "disallowed"
  ],
  [
    [
      3542,
      3542
    ],
    "valid"
  ],
  [
    [
      3543,
      3543
    ],
    "disallowed"
  ],
  [
    [
      3544,
      3551
    ],
    "valid"
  ],
  [
    [
      3552,
      3557
    ],
    "disallowed"
  ],
  [
    [
      3558,
      3567
    ],
    "valid"
  ],
  [
    [
      3568,
      3569
    ],
    "disallowed"
  ],
  [
    [
      3570,
      3571
    ],
    "valid"
  ],
  [
    [
      3572,
      3572
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3573,
      3584
    ],
    "disallowed"
  ],
  [
    [
      3585,
      3634
    ],
    "valid"
  ],
  [
    [
      3635,
      3635
    ],
    "mapped",
    [
      3661,
      3634
    ]
  ],
  [
    [
      3636,
      3642
    ],
    "valid"
  ],
  [
    [
      3643,
      3646
    ],
    "disallowed"
  ],
  [
    [
      3647,
      3647
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3648,
      3662
    ],
    "valid"
  ],
  [
    [
      3663,
      3663
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3664,
      3673
    ],
    "valid"
  ],
  [
    [
      3674,
      3675
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3676,
      3712
    ],
    "disallowed"
  ],
  [
    [
      3713,
      3714
    ],
    "valid"
  ],
  [
    [
      3715,
      3715
    ],
    "disallowed"
  ],
  [
    [
      3716,
      3716
    ],
    "valid"
  ],
  [
    [
      3717,
      3718
    ],
    "disallowed"
  ],
  [
    [
      3719,
      3720
    ],
    "valid"
  ],
  [
    [
      3721,
      3721
    ],
    "disallowed"
  ],
  [
    [
      3722,
      3722
    ],
    "valid"
  ],
  [
    [
      3723,
      3724
    ],
    "disallowed"
  ],
  [
    [
      3725,
      3725
    ],
    "valid"
  ],
  [
    [
      3726,
      3731
    ],
    "disallowed"
  ],
  [
    [
      3732,
      3735
    ],
    "valid"
  ],
  [
    [
      3736,
      3736
    ],
    "disallowed"
  ],
  [
    [
      3737,
      3743
    ],
    "valid"
  ],
  [
    [
      3744,
      3744
    ],
    "disallowed"
  ],
  [
    [
      3745,
      3747
    ],
    "valid"
  ],
  [
    [
      3748,
      3748
    ],
    "disallowed"
  ],
  [
    [
      3749,
      3749
    ],
    "valid"
  ],
  [
    [
      3750,
      3750
    ],
    "disallowed"
  ],
  [
    [
      3751,
      3751
    ],
    "valid"
  ],
  [
    [
      3752,
      3753
    ],
    "disallowed"
  ],
  [
    [
      3754,
      3755
    ],
    "valid"
  ],
  [
    [
      3756,
      3756
    ],
    "disallowed"
  ],
  [
    [
      3757,
      3762
    ],
    "valid"
  ],
  [
    [
      3763,
      3763
    ],
    "mapped",
    [
      3789,
      3762
    ]
  ],
  [
    [
      3764,
      3769
    ],
    "valid"
  ],
  [
    [
      3770,
      3770
    ],
    "disallowed"
  ],
  [
    [
      3771,
      3773
    ],
    "valid"
  ],
  [
    [
      3774,
      3775
    ],
    "disallowed"
  ],
  [
    [
      3776,
      3780
    ],
    "valid"
  ],
  [
    [
      3781,
      3781
    ],
    "disallowed"
  ],
  [
    [
      3782,
      3782
    ],
    "valid"
  ],
  [
    [
      3783,
      3783
    ],
    "disallowed"
  ],
  [
    [
      3784,
      3789
    ],
    "valid"
  ],
  [
    [
      3790,
      3791
    ],
    "disallowed"
  ],
  [
    [
      3792,
      3801
    ],
    "valid"
  ],
  [
    [
      3802,
      3803
    ],
    "disallowed"
  ],
  [
    [
      3804,
      3804
    ],
    "mapped",
    [
      3755,
      3737
    ]
  ],
  [
    [
      3805,
      3805
    ],
    "mapped",
    [
      3755,
      3745
    ]
  ],
  [
    [
      3806,
      3807
    ],
    "valid"
  ],
  [
    [
      3808,
      3839
    ],
    "disallowed"
  ],
  [
    [
      3840,
      3840
    ],
    "valid"
  ],
  [
    [
      3841,
      3850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3851,
      3851
    ],
    "valid"
  ],
  [
    [
      3852,
      3852
    ],
    "mapped",
    [
      3851
    ]
  ],
  [
    [
      3853,
      3863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3864,
      3865
    ],
    "valid"
  ],
  [
    [
      3866,
      3871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3872,
      3881
    ],
    "valid"
  ],
  [
    [
      3882,
      3892
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3893,
      3893
    ],
    "valid"
  ],
  [
    [
      3894,
      3894
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3895,
      3895
    ],
    "valid"
  ],
  [
    [
      3896,
      3896
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3897,
      3897
    ],
    "valid"
  ],
  [
    [
      3898,
      3901
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3902,
      3906
    ],
    "valid"
  ],
  [
    [
      3907,
      3907
    ],
    "mapped",
    [
      3906,
      4023
    ]
  ],
  [
    [
      3908,
      3911
    ],
    "valid"
  ],
  [
    [
      3912,
      3912
    ],
    "disallowed"
  ],
  [
    [
      3913,
      3916
    ],
    "valid"
  ],
  [
    [
      3917,
      3917
    ],
    "mapped",
    [
      3916,
      4023
    ]
  ],
  [
    [
      3918,
      3921
    ],
    "valid"
  ],
  [
    [
      3922,
      3922
    ],
    "mapped",
    [
      3921,
      4023
    ]
  ],
  [
    [
      3923,
      3926
    ],
    "valid"
  ],
  [
    [
      3927,
      3927
    ],
    "mapped",
    [
      3926,
      4023
    ]
  ],
  [
    [
      3928,
      3931
    ],
    "valid"
  ],
  [
    [
      3932,
      3932
    ],
    "mapped",
    [
      3931,
      4023
    ]
  ],
  [
    [
      3933,
      3944
    ],
    "valid"
  ],
  [
    [
      3945,
      3945
    ],
    "mapped",
    [
      3904,
      4021
    ]
  ],
  [
    [
      3946,
      3946
    ],
    "valid"
  ],
  [
    [
      3947,
      3948
    ],
    "valid"
  ],
  [
    [
      3949,
      3952
    ],
    "disallowed"
  ],
  [
    [
      3953,
      3954
    ],
    "valid"
  ],
  [
    [
      3955,
      3955
    ],
    "mapped",
    [
      3953,
      3954
    ]
  ],
  [
    [
      3956,
      3956
    ],
    "valid"
  ],
  [
    [
      3957,
      3957
    ],
    "mapped",
    [
      3953,
      3956
    ]
  ],
  [
    [
      3958,
      3958
    ],
    "mapped",
    [
      4018,
      3968
    ]
  ],
  [
    [
      3959,
      3959
    ],
    "mapped",
    [
      4018,
      3953,
      3968
    ]
  ],
  [
    [
      3960,
      3960
    ],
    "mapped",
    [
      4019,
      3968
    ]
  ],
  [
    [
      3961,
      3961
    ],
    "mapped",
    [
      4019,
      3953,
      3968
    ]
  ],
  [
    [
      3962,
      3968
    ],
    "valid"
  ],
  [
    [
      3969,
      3969
    ],
    "mapped",
    [
      3953,
      3968
    ]
  ],
  [
    [
      3970,
      3972
    ],
    "valid"
  ],
  [
    [
      3973,
      3973
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3974,
      3979
    ],
    "valid"
  ],
  [
    [
      3980,
      3983
    ],
    "valid"
  ],
  [
    [
      3984,
      3986
    ],
    "valid"
  ],
  [
    [
      3987,
      3987
    ],
    "mapped",
    [
      3986,
      4023
    ]
  ],
  [
    [
      3988,
      3989
    ],
    "valid"
  ],
  [
    [
      3990,
      3990
    ],
    "valid"
  ],
  [
    [
      3991,
      3991
    ],
    "valid"
  ],
  [
    [
      3992,
      3992
    ],
    "disallowed"
  ],
  [
    [
      3993,
      3996
    ],
    "valid"
  ],
  [
    [
      3997,
      3997
    ],
    "mapped",
    [
      3996,
      4023
    ]
  ],
  [
    [
      3998,
      4001
    ],
    "valid"
  ],
  [
    [
      4002,
      4002
    ],
    "mapped",
    [
      4001,
      4023
    ]
  ],
  [
    [
      4003,
      4006
    ],
    "valid"
  ],
  [
    [
      4007,
      4007
    ],
    "mapped",
    [
      4006,
      4023
    ]
  ],
  [
    [
      4008,
      4011
    ],
    "valid"
  ],
  [
    [
      4012,
      4012
    ],
    "mapped",
    [
      4011,
      4023
    ]
  ],
  [
    [
      4013,
      4013
    ],
    "valid"
  ],
  [
    [
      4014,
      4016
    ],
    "valid"
  ],
  [
    [
      4017,
      4023
    ],
    "valid"
  ],
  [
    [
      4024,
      4024
    ],
    "valid"
  ],
  [
    [
      4025,
      4025
    ],
    "mapped",
    [
      3984,
      4021
    ]
  ],
  [
    [
      4026,
      4028
    ],
    "valid"
  ],
  [
    [
      4029,
      4029
    ],
    "disallowed"
  ],
  [
    [
      4030,
      4037
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4038,
      4038
    ],
    "valid"
  ],
  [
    [
      4039,
      4044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4045,
      4045
    ],
    "disallowed"
  ],
  [
    [
      4046,
      4046
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4047,
      4047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4048,
      4049
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4050,
      4052
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4053,
      4056
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4057,
      4058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4059,
      4095
    ],
    "disallowed"
  ],
  [
    [
      4096,
      4129
    ],
    "valid"
  ],
  [
    [
      4130,
      4130
    ],
    "valid"
  ],
  [
    [
      4131,
      4135
    ],
    "valid"
  ],
  [
    [
      4136,
      4136
    ],
    "valid"
  ],
  [
    [
      4137,
      4138
    ],
    "valid"
  ],
  [
    [
      4139,
      4139
    ],
    "valid"
  ],
  [
    [
      4140,
      4146
    ],
    "valid"
  ],
  [
    [
      4147,
      4149
    ],
    "valid"
  ],
  [
    [
      4150,
      4153
    ],
    "valid"
  ],
  [
    [
      4154,
      4159
    ],
    "valid"
  ],
  [
    [
      4160,
      4169
    ],
    "valid"
  ],
  [
    [
      4170,
      4175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4176,
      4185
    ],
    "valid"
  ],
  [
    [
      4186,
      4249
    ],
    "valid"
  ],
  [
    [
      4250,
      4253
    ],
    "valid"
  ],
  [
    [
      4254,
      4255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4256,
      4293
    ],
    "disallowed"
  ],
  [
    [
      4294,
      4294
    ],
    "disallowed"
  ],
  [
    [
      4295,
      4295
    ],
    "mapped",
    [
      11559
    ]
  ],
  [
    [
      4296,
      4300
    ],
    "disallowed"
  ],
  [
    [
      4301,
      4301
    ],
    "mapped",
    [
      11565
    ]
  ],
  [
    [
      4302,
      4303
    ],
    "disallowed"
  ],
  [
    [
      4304,
      4342
    ],
    "valid"
  ],
  [
    [
      4343,
      4344
    ],
    "valid"
  ],
  [
    [
      4345,
      4346
    ],
    "valid"
  ],
  [
    [
      4347,
      4347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4348,
      4348
    ],
    "mapped",
    [
      4316
    ]
  ],
  [
    [
      4349,
      4351
    ],
    "valid"
  ],
  [
    [
      4352,
      4441
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4442,
      4446
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4447,
      4448
    ],
    "disallowed"
  ],
  [
    [
      4449,
      4514
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4515,
      4519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4520,
      4601
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4602,
      4607
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4608,
      4614
    ],
    "valid"
  ],
  [
    [
      4615,
      4615
    ],
    "valid"
  ],
  [
    [
      4616,
      4678
    ],
    "valid"
  ],
  [
    [
      4679,
      4679
    ],
    "valid"
  ],
  [
    [
      4680,
      4680
    ],
    "valid"
  ],
  [
    [
      4681,
      4681
    ],
    "disallowed"
  ],
  [
    [
      4682,
      4685
    ],
    "valid"
  ],
  [
    [
      4686,
      4687
    ],
    "disallowed"
  ],
  [
    [
      4688,
      4694
    ],
    "valid"
  ],
  [
    [
      4695,
      4695
    ],
    "disallowed"
  ],
  [
    [
      4696,
      4696
    ],
    "valid"
  ],
  [
    [
      4697,
      4697
    ],
    "disallowed"
  ],
  [
    [
      4698,
      4701
    ],
    "valid"
  ],
  [
    [
      4702,
      4703
    ],
    "disallowed"
  ],
  [
    [
      4704,
      4742
    ],
    "valid"
  ],
  [
    [
      4743,
      4743
    ],
    "valid"
  ],
  [
    [
      4744,
      4744
    ],
    "valid"
  ],
  [
    [
      4745,
      4745
    ],
    "disallowed"
  ],
  [
    [
      4746,
      4749
    ],
    "valid"
  ],
  [
    [
      4750,
      4751
    ],
    "disallowed"
  ],
  [
    [
      4752,
      4782
    ],
    "valid"
  ],
  [
    [
      4783,
      4783
    ],
    "valid"
  ],
  [
    [
      4784,
      4784
    ],
    "valid"
  ],
  [
    [
      4785,
      4785
    ],
    "disallowed"
  ],
  [
    [
      4786,
      4789
    ],
    "valid"
  ],
  [
    [
      4790,
      4791
    ],
    "disallowed"
  ],
  [
    [
      4792,
      4798
    ],
    "valid"
  ],
  [
    [
      4799,
      4799
    ],
    "disallowed"
  ],
  [
    [
      4800,
      4800
    ],
    "valid"
  ],
  [
    [
      4801,
      4801
    ],
    "disallowed"
  ],
  [
    [
      4802,
      4805
    ],
    "valid"
  ],
  [
    [
      4806,
      4807
    ],
    "disallowed"
  ],
  [
    [
      4808,
      4814
    ],
    "valid"
  ],
  [
    [
      4815,
      4815
    ],
    "valid"
  ],
  [
    [
      4816,
      4822
    ],
    "valid"
  ],
  [
    [
      4823,
      4823
    ],
    "disallowed"
  ],
  [
    [
      4824,
      4846
    ],
    "valid"
  ],
  [
    [
      4847,
      4847
    ],
    "valid"
  ],
  [
    [
      4848,
      4878
    ],
    "valid"
  ],
  [
    [
      4879,
      4879
    ],
    "valid"
  ],
  [
    [
      4880,
      4880
    ],
    "valid"
  ],
  [
    [
      4881,
      4881
    ],
    "disallowed"
  ],
  [
    [
      4882,
      4885
    ],
    "valid"
  ],
  [
    [
      4886,
      4887
    ],
    "disallowed"
  ],
  [
    [
      4888,
      4894
    ],
    "valid"
  ],
  [
    [
      4895,
      4895
    ],
    "valid"
  ],
  [
    [
      4896,
      4934
    ],
    "valid"
  ],
  [
    [
      4935,
      4935
    ],
    "valid"
  ],
  [
    [
      4936,
      4954
    ],
    "valid"
  ],
  [
    [
      4955,
      4956
    ],
    "disallowed"
  ],
  [
    [
      4957,
      4958
    ],
    "valid"
  ],
  [
    [
      4959,
      4959
    ],
    "valid"
  ],
  [
    [
      4960,
      4960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4961,
      4988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4989,
      4991
    ],
    "disallowed"
  ],
  [
    [
      4992,
      5007
    ],
    "valid"
  ],
  [
    [
      5008,
      5017
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5018,
      5023
    ],
    "disallowed"
  ],
  [
    [
      5024,
      5108
    ],
    "valid"
  ],
  [
    [
      5109,
      5109
    ],
    "valid"
  ],
  [
    [
      5110,
      5111
    ],
    "disallowed"
  ],
  [
    [
      5112,
      5112
    ],
    "mapped",
    [
      5104
    ]
  ],
  [
    [
      5113,
      5113
    ],
    "mapped",
    [
      5105
    ]
  ],
  [
    [
      5114,
      5114
    ],
    "mapped",
    [
      5106
    ]
  ],
  [
    [
      5115,
      5115
    ],
    "mapped",
    [
      5107
    ]
  ],
  [
    [
      5116,
      5116
    ],
    "mapped",
    [
      5108
    ]
  ],
  [
    [
      5117,
      5117
    ],
    "mapped",
    [
      5109
    ]
  ],
  [
    [
      5118,
      5119
    ],
    "disallowed"
  ],
  [
    [
      5120,
      5120
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5121,
      5740
    ],
    "valid"
  ],
  [
    [
      5741,
      5742
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5743,
      5750
    ],
    "valid"
  ],
  [
    [
      5751,
      5759
    ],
    "valid"
  ],
  [
    [
      5760,
      5760
    ],
    "disallowed"
  ],
  [
    [
      5761,
      5786
    ],
    "valid"
  ],
  [
    [
      5787,
      5788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5789,
      5791
    ],
    "disallowed"
  ],
  [
    [
      5792,
      5866
    ],
    "valid"
  ],
  [
    [
      5867,
      5872
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5873,
      5880
    ],
    "valid"
  ],
  [
    [
      5881,
      5887
    ],
    "disallowed"
  ],
  [
    [
      5888,
      5900
    ],
    "valid"
  ],
  [
    [
      5901,
      5901
    ],
    "disallowed"
  ],
  [
    [
      5902,
      5908
    ],
    "valid"
  ],
  [
    [
      5909,
      5919
    ],
    "disallowed"
  ],
  [
    [
      5920,
      5940
    ],
    "valid"
  ],
  [
    [
      5941,
      5942
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5943,
      5951
    ],
    "disallowed"
  ],
  [
    [
      5952,
      5971
    ],
    "valid"
  ],
  [
    [
      5972,
      5983
    ],
    "disallowed"
  ],
  [
    [
      5984,
      5996
    ],
    "valid"
  ],
  [
    [
      5997,
      5997
    ],
    "disallowed"
  ],
  [
    [
      5998,
      6e3
    ],
    "valid"
  ],
  [
    [
      6001,
      6001
    ],
    "disallowed"
  ],
  [
    [
      6002,
      6003
    ],
    "valid"
  ],
  [
    [
      6004,
      6015
    ],
    "disallowed"
  ],
  [
    [
      6016,
      6067
    ],
    "valid"
  ],
  [
    [
      6068,
      6069
    ],
    "disallowed"
  ],
  [
    [
      6070,
      6099
    ],
    "valid"
  ],
  [
    [
      6100,
      6102
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6103,
      6103
    ],
    "valid"
  ],
  [
    [
      6104,
      6107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6108,
      6108
    ],
    "valid"
  ],
  [
    [
      6109,
      6109
    ],
    "valid"
  ],
  [
    [
      6110,
      6111
    ],
    "disallowed"
  ],
  [
    [
      6112,
      6121
    ],
    "valid"
  ],
  [
    [
      6122,
      6127
    ],
    "disallowed"
  ],
  [
    [
      6128,
      6137
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6138,
      6143
    ],
    "disallowed"
  ],
  [
    [
      6144,
      6149
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6150,
      6150
    ],
    "disallowed"
  ],
  [
    [
      6151,
      6154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6155,
      6157
    ],
    "ignored"
  ],
  [
    [
      6158,
      6158
    ],
    "disallowed"
  ],
  [
    [
      6159,
      6159
    ],
    "disallowed"
  ],
  [
    [
      6160,
      6169
    ],
    "valid"
  ],
  [
    [
      6170,
      6175
    ],
    "disallowed"
  ],
  [
    [
      6176,
      6263
    ],
    "valid"
  ],
  [
    [
      6264,
      6271
    ],
    "disallowed"
  ],
  [
    [
      6272,
      6313
    ],
    "valid"
  ],
  [
    [
      6314,
      6314
    ],
    "valid"
  ],
  [
    [
      6315,
      6319
    ],
    "disallowed"
  ],
  [
    [
      6320,
      6389
    ],
    "valid"
  ],
  [
    [
      6390,
      6399
    ],
    "disallowed"
  ],
  [
    [
      6400,
      6428
    ],
    "valid"
  ],
  [
    [
      6429,
      6430
    ],
    "valid"
  ],
  [
    [
      6431,
      6431
    ],
    "disallowed"
  ],
  [
    [
      6432,
      6443
    ],
    "valid"
  ],
  [
    [
      6444,
      6447
    ],
    "disallowed"
  ],
  [
    [
      6448,
      6459
    ],
    "valid"
  ],
  [
    [
      6460,
      6463
    ],
    "disallowed"
  ],
  [
    [
      6464,
      6464
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6465,
      6467
    ],
    "disallowed"
  ],
  [
    [
      6468,
      6469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6470,
      6509
    ],
    "valid"
  ],
  [
    [
      6510,
      6511
    ],
    "disallowed"
  ],
  [
    [
      6512,
      6516
    ],
    "valid"
  ],
  [
    [
      6517,
      6527
    ],
    "disallowed"
  ],
  [
    [
      6528,
      6569
    ],
    "valid"
  ],
  [
    [
      6570,
      6571
    ],
    "valid"
  ],
  [
    [
      6572,
      6575
    ],
    "disallowed"
  ],
  [
    [
      6576,
      6601
    ],
    "valid"
  ],
  [
    [
      6602,
      6607
    ],
    "disallowed"
  ],
  [
    [
      6608,
      6617
    ],
    "valid"
  ],
  [
    [
      6618,
      6618
    ],
    "valid",
    [],
    "XV8"
  ],
  [
    [
      6619,
      6621
    ],
    "disallowed"
  ],
  [
    [
      6622,
      6623
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6624,
      6655
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6656,
      6683
    ],
    "valid"
  ],
  [
    [
      6684,
      6685
    ],
    "disallowed"
  ],
  [
    [
      6686,
      6687
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6688,
      6750
    ],
    "valid"
  ],
  [
    [
      6751,
      6751
    ],
    "disallowed"
  ],
  [
    [
      6752,
      6780
    ],
    "valid"
  ],
  [
    [
      6781,
      6782
    ],
    "disallowed"
  ],
  [
    [
      6783,
      6793
    ],
    "valid"
  ],
  [
    [
      6794,
      6799
    ],
    "disallowed"
  ],
  [
    [
      6800,
      6809
    ],
    "valid"
  ],
  [
    [
      6810,
      6815
    ],
    "disallowed"
  ],
  [
    [
      6816,
      6822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6823,
      6823
    ],
    "valid"
  ],
  [
    [
      6824,
      6829
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6830,
      6831
    ],
    "disallowed"
  ],
  [
    [
      6832,
      6845
    ],
    "valid"
  ],
  [
    [
      6846,
      6846
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6847,
      6911
    ],
    "disallowed"
  ],
  [
    [
      6912,
      6987
    ],
    "valid"
  ],
  [
    [
      6988,
      6991
    ],
    "disallowed"
  ],
  [
    [
      6992,
      7001
    ],
    "valid"
  ],
  [
    [
      7002,
      7018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7019,
      7027
    ],
    "valid"
  ],
  [
    [
      7028,
      7036
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7037,
      7039
    ],
    "disallowed"
  ],
  [
    [
      7040,
      7082
    ],
    "valid"
  ],
  [
    [
      7083,
      7085
    ],
    "valid"
  ],
  [
    [
      7086,
      7097
    ],
    "valid"
  ],
  [
    [
      7098,
      7103
    ],
    "valid"
  ],
  [
    [
      7104,
      7155
    ],
    "valid"
  ],
  [
    [
      7156,
      7163
    ],
    "disallowed"
  ],
  [
    [
      7164,
      7167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7168,
      7223
    ],
    "valid"
  ],
  [
    [
      7224,
      7226
    ],
    "disallowed"
  ],
  [
    [
      7227,
      7231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7232,
      7241
    ],
    "valid"
  ],
  [
    [
      7242,
      7244
    ],
    "disallowed"
  ],
  [
    [
      7245,
      7293
    ],
    "valid"
  ],
  [
    [
      7294,
      7295
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7296,
      7359
    ],
    "disallowed"
  ],
  [
    [
      7360,
      7367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7368,
      7375
    ],
    "disallowed"
  ],
  [
    [
      7376,
      7378
    ],
    "valid"
  ],
  [
    [
      7379,
      7379
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7380,
      7410
    ],
    "valid"
  ],
  [
    [
      7411,
      7414
    ],
    "valid"
  ],
  [
    [
      7415,
      7415
    ],
    "disallowed"
  ],
  [
    [
      7416,
      7417
    ],
    "valid"
  ],
  [
    [
      7418,
      7423
    ],
    "disallowed"
  ],
  [
    [
      7424,
      7467
    ],
    "valid"
  ],
  [
    [
      7468,
      7468
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7469,
      7469
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      7470,
      7470
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7471,
      7471
    ],
    "valid"
  ],
  [
    [
      7472,
      7472
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7473,
      7473
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7474,
      7474
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      7475,
      7475
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7476,
      7476
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      7477,
      7477
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7478,
      7478
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      7479,
      7479
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7480,
      7480
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      7481,
      7481
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7482,
      7482
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      7483,
      7483
    ],
    "valid"
  ],
  [
    [
      7484,
      7484
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7485,
      7485
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      7486,
      7486
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7487,
      7487
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7488,
      7488
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7489,
      7489
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7490,
      7490
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      7491,
      7491
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7492,
      7492
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      7493,
      7493
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      7494,
      7494
    ],
    "mapped",
    [
      7426
    ]
  ],
  [
    [
      7495,
      7495
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7496,
      7496
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7497,
      7497
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7498,
      7498
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      7499,
      7499
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      7500,
      7500
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7501,
      7501
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7502,
      7502
    ],
    "valid"
  ],
  [
    [
      7503,
      7503
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7504,
      7504
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7505,
      7505
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      7506,
      7506
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7507,
      7507
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      7508,
      7508
    ],
    "mapped",
    [
      7446
    ]
  ],
  [
    [
      7509,
      7509
    ],
    "mapped",
    [
      7447
    ]
  ],
  [
    [
      7510,
      7510
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7511,
      7511
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7512,
      7512
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7513,
      7513
    ],
    "mapped",
    [
      7453
    ]
  ],
  [
    [
      7514,
      7514
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      7515,
      7515
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7516,
      7516
    ],
    "mapped",
    [
      7461
    ]
  ],
  [
    [
      7517,
      7517
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7518,
      7518
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7519,
      7519
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      7520,
      7520
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7521,
      7521
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7522,
      7522
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7523,
      7523
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7524,
      7524
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7525,
      7525
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7526,
      7526
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7527,
      7527
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7528,
      7528
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      7529,
      7529
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7530,
      7530
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7531,
      7531
    ],
    "valid"
  ],
  [
    [
      7532,
      7543
    ],
    "valid"
  ],
  [
    [
      7544,
      7544
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      7545,
      7578
    ],
    "valid"
  ],
  [
    [
      7579,
      7579
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      7580,
      7580
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      7581,
      7581
    ],
    "mapped",
    [
      597
    ]
  ],
  [
    [
      7582,
      7582
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      7583,
      7583
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7584,
      7584
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      7585,
      7585
    ],
    "mapped",
    [
      607
    ]
  ],
  [
    [
      7586,
      7586
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      7587,
      7587
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      7588,
      7588
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      7589,
      7589
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      7590,
      7590
    ],
    "mapped",
    [
      618
    ]
  ],
  [
    [
      7591,
      7591
    ],
    "mapped",
    [
      7547
    ]
  ],
  [
    [
      7592,
      7592
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      7593,
      7593
    ],
    "mapped",
    [
      621
    ]
  ],
  [
    [
      7594,
      7594
    ],
    "mapped",
    [
      7557
    ]
  ],
  [
    [
      7595,
      7595
    ],
    "mapped",
    [
      671
    ]
  ],
  [
    [
      7596,
      7596
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      7597,
      7597
    ],
    "mapped",
    [
      624
    ]
  ],
  [
    [
      7598,
      7598
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      7599,
      7599
    ],
    "mapped",
    [
      627
    ]
  ],
  [
    [
      7600,
      7600
    ],
    "mapped",
    [
      628
    ]
  ],
  [
    [
      7601,
      7601
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      7602,
      7602
    ],
    "mapped",
    [
      632
    ]
  ],
  [
    [
      7603,
      7603
    ],
    "mapped",
    [
      642
    ]
  ],
  [
    [
      7604,
      7604
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      7605,
      7605
    ],
    "mapped",
    [
      427
    ]
  ],
  [
    [
      7606,
      7606
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      7607,
      7607
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      7608,
      7608
    ],
    "mapped",
    [
      7452
    ]
  ],
  [
    [
      7609,
      7609
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      7610,
      7610
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      7611,
      7611
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      7612,
      7612
    ],
    "mapped",
    [
      656
    ]
  ],
  [
    [
      7613,
      7613
    ],
    "mapped",
    [
      657
    ]
  ],
  [
    [
      7614,
      7614
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      7615,
      7615
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      7616,
      7619
    ],
    "valid"
  ],
  [
    [
      7620,
      7626
    ],
    "valid"
  ],
  [
    [
      7627,
      7654
    ],
    "valid"
  ],
  [
    [
      7655,
      7669
    ],
    "valid"
  ],
  [
    [
      7670,
      7675
    ],
    "disallowed"
  ],
  [
    [
      7676,
      7676
    ],
    "valid"
  ],
  [
    [
      7677,
      7677
    ],
    "valid"
  ],
  [
    [
      7678,
      7679
    ],
    "valid"
  ],
  [
    [
      7680,
      7680
    ],
    "mapped",
    [
      7681
    ]
  ],
  [
    [
      7681,
      7681
    ],
    "valid"
  ],
  [
    [
      7682,
      7682
    ],
    "mapped",
    [
      7683
    ]
  ],
  [
    [
      7683,
      7683
    ],
    "valid"
  ],
  [
    [
      7684,
      7684
    ],
    "mapped",
    [
      7685
    ]
  ],
  [
    [
      7685,
      7685
    ],
    "valid"
  ],
  [
    [
      7686,
      7686
    ],
    "mapped",
    [
      7687
    ]
  ],
  [
    [
      7687,
      7687
    ],
    "valid"
  ],
  [
    [
      7688,
      7688
    ],
    "mapped",
    [
      7689
    ]
  ],
  [
    [
      7689,
      7689
    ],
    "valid"
  ],
  [
    [
      7690,
      7690
    ],
    "mapped",
    [
      7691
    ]
  ],
  [
    [
      7691,
      7691
    ],
    "valid"
  ],
  [
    [
      7692,
      7692
    ],
    "mapped",
    [
      7693
    ]
  ],
  [
    [
      7693,
      7693
    ],
    "valid"
  ],
  [
    [
      7694,
      7694
    ],
    "mapped",
    [
      7695
    ]
  ],
  [
    [
      7695,
      7695
    ],
    "valid"
  ],
  [
    [
      7696,
      7696
    ],
    "mapped",
    [
      7697
    ]
  ],
  [
    [
      7697,
      7697
    ],
    "valid"
  ],
  [
    [
      7698,
      7698
    ],
    "mapped",
    [
      7699
    ]
  ],
  [
    [
      7699,
      7699
    ],
    "valid"
  ],
  [
    [
      7700,
      7700
    ],
    "mapped",
    [
      7701
    ]
  ],
  [
    [
      7701,
      7701
    ],
    "valid"
  ],
  [
    [
      7702,
      7702
    ],
    "mapped",
    [
      7703
    ]
  ],
  [
    [
      7703,
      7703
    ],
    "valid"
  ],
  [
    [
      7704,
      7704
    ],
    "mapped",
    [
      7705
    ]
  ],
  [
    [
      7705,
      7705
    ],
    "valid"
  ],
  [
    [
      7706,
      7706
    ],
    "mapped",
    [
      7707
    ]
  ],
  [
    [
      7707,
      7707
    ],
    "valid"
  ],
  [
    [
      7708,
      7708
    ],
    "mapped",
    [
      7709
    ]
  ],
  [
    [
      7709,
      7709
    ],
    "valid"
  ],
  [
    [
      7710,
      7710
    ],
    "mapped",
    [
      7711
    ]
  ],
  [
    [
      7711,
      7711
    ],
    "valid"
  ],
  [
    [
      7712,
      7712
    ],
    "mapped",
    [
      7713
    ]
  ],
  [
    [
      7713,
      7713
    ],
    "valid"
  ],
  [
    [
      7714,
      7714
    ],
    "mapped",
    [
      7715
    ]
  ],
  [
    [
      7715,
      7715
    ],
    "valid"
  ],
  [
    [
      7716,
      7716
    ],
    "mapped",
    [
      7717
    ]
  ],
  [
    [
      7717,
      7717
    ],
    "valid"
  ],
  [
    [
      7718,
      7718
    ],
    "mapped",
    [
      7719
    ]
  ],
  [
    [
      7719,
      7719
    ],
    "valid"
  ],
  [
    [
      7720,
      7720
    ],
    "mapped",
    [
      7721
    ]
  ],
  [
    [
      7721,
      7721
    ],
    "valid"
  ],
  [
    [
      7722,
      7722
    ],
    "mapped",
    [
      7723
    ]
  ],
  [
    [
      7723,
      7723
    ],
    "valid"
  ],
  [
    [
      7724,
      7724
    ],
    "mapped",
    [
      7725
    ]
  ],
  [
    [
      7725,
      7725
    ],
    "valid"
  ],
  [
    [
      7726,
      7726
    ],
    "mapped",
    [
      7727
    ]
  ],
  [
    [
      7727,
      7727
    ],
    "valid"
  ],
  [
    [
      7728,
      7728
    ],
    "mapped",
    [
      7729
    ]
  ],
  [
    [
      7729,
      7729
    ],
    "valid"
  ],
  [
    [
      7730,
      7730
    ],
    "mapped",
    [
      7731
    ]
  ],
  [
    [
      7731,
      7731
    ],
    "valid"
  ],
  [
    [
      7732,
      7732
    ],
    "mapped",
    [
      7733
    ]
  ],
  [
    [
      7733,
      7733
    ],
    "valid"
  ],
  [
    [
      7734,
      7734
    ],
    "mapped",
    [
      7735
    ]
  ],
  [
    [
      7735,
      7735
    ],
    "valid"
  ],
  [
    [
      7736,
      7736
    ],
    "mapped",
    [
      7737
    ]
  ],
  [
    [
      7737,
      7737
    ],
    "valid"
  ],
  [
    [
      7738,
      7738
    ],
    "mapped",
    [
      7739
    ]
  ],
  [
    [
      7739,
      7739
    ],
    "valid"
  ],
  [
    [
      7740,
      7740
    ],
    "mapped",
    [
      7741
    ]
  ],
  [
    [
      7741,
      7741
    ],
    "valid"
  ],
  [
    [
      7742,
      7742
    ],
    "mapped",
    [
      7743
    ]
  ],
  [
    [
      7743,
      7743
    ],
    "valid"
  ],
  [
    [
      7744,
      7744
    ],
    "mapped",
    [
      7745
    ]
  ],
  [
    [
      7745,
      7745
    ],
    "valid"
  ],
  [
    [
      7746,
      7746
    ],
    "mapped",
    [
      7747
    ]
  ],
  [
    [
      7747,
      7747
    ],
    "valid"
  ],
  [
    [
      7748,
      7748
    ],
    "mapped",
    [
      7749
    ]
  ],
  [
    [
      7749,
      7749
    ],
    "valid"
  ],
  [
    [
      7750,
      7750
    ],
    "mapped",
    [
      7751
    ]
  ],
  [
    [
      7751,
      7751
    ],
    "valid"
  ],
  [
    [
      7752,
      7752
    ],
    "mapped",
    [
      7753
    ]
  ],
  [
    [
      7753,
      7753
    ],
    "valid"
  ],
  [
    [
      7754,
      7754
    ],
    "mapped",
    [
      7755
    ]
  ],
  [
    [
      7755,
      7755
    ],
    "valid"
  ],
  [
    [
      7756,
      7756
    ],
    "mapped",
    [
      7757
    ]
  ],
  [
    [
      7757,
      7757
    ],
    "valid"
  ],
  [
    [
      7758,
      7758
    ],
    "mapped",
    [
      7759
    ]
  ],
  [
    [
      7759,
      7759
    ],
    "valid"
  ],
  [
    [
      7760,
      7760
    ],
    "mapped",
    [
      7761
    ]
  ],
  [
    [
      7761,
      7761
    ],
    "valid"
  ],
  [
    [
      7762,
      7762
    ],
    "mapped",
    [
      7763
    ]
  ],
  [
    [
      7763,
      7763
    ],
    "valid"
  ],
  [
    [
      7764,
      7764
    ],
    "mapped",
    [
      7765
    ]
  ],
  [
    [
      7765,
      7765
    ],
    "valid"
  ],
  [
    [
      7766,
      7766
    ],
    "mapped",
    [
      7767
    ]
  ],
  [
    [
      7767,
      7767
    ],
    "valid"
  ],
  [
    [
      7768,
      7768
    ],
    "mapped",
    [
      7769
    ]
  ],
  [
    [
      7769,
      7769
    ],
    "valid"
  ],
  [
    [
      7770,
      7770
    ],
    "mapped",
    [
      7771
    ]
  ],
  [
    [
      7771,
      7771
    ],
    "valid"
  ],
  [
    [
      7772,
      7772
    ],
    "mapped",
    [
      7773
    ]
  ],
  [
    [
      7773,
      7773
    ],
    "valid"
  ],
  [
    [
      7774,
      7774
    ],
    "mapped",
    [
      7775
    ]
  ],
  [
    [
      7775,
      7775
    ],
    "valid"
  ],
  [
    [
      7776,
      7776
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7777,
      7777
    ],
    "valid"
  ],
  [
    [
      7778,
      7778
    ],
    "mapped",
    [
      7779
    ]
  ],
  [
    [
      7779,
      7779
    ],
    "valid"
  ],
  [
    [
      7780,
      7780
    ],
    "mapped",
    [
      7781
    ]
  ],
  [
    [
      7781,
      7781
    ],
    "valid"
  ],
  [
    [
      7782,
      7782
    ],
    "mapped",
    [
      7783
    ]
  ],
  [
    [
      7783,
      7783
    ],
    "valid"
  ],
  [
    [
      7784,
      7784
    ],
    "mapped",
    [
      7785
    ]
  ],
  [
    [
      7785,
      7785
    ],
    "valid"
  ],
  [
    [
      7786,
      7786
    ],
    "mapped",
    [
      7787
    ]
  ],
  [
    [
      7787,
      7787
    ],
    "valid"
  ],
  [
    [
      7788,
      7788
    ],
    "mapped",
    [
      7789
    ]
  ],
  [
    [
      7789,
      7789
    ],
    "valid"
  ],
  [
    [
      7790,
      7790
    ],
    "mapped",
    [
      7791
    ]
  ],
  [
    [
      7791,
      7791
    ],
    "valid"
  ],
  [
    [
      7792,
      7792
    ],
    "mapped",
    [
      7793
    ]
  ],
  [
    [
      7793,
      7793
    ],
    "valid"
  ],
  [
    [
      7794,
      7794
    ],
    "mapped",
    [
      7795
    ]
  ],
  [
    [
      7795,
      7795
    ],
    "valid"
  ],
  [
    [
      7796,
      7796
    ],
    "mapped",
    [
      7797
    ]
  ],
  [
    [
      7797,
      7797
    ],
    "valid"
  ],
  [
    [
      7798,
      7798
    ],
    "mapped",
    [
      7799
    ]
  ],
  [
    [
      7799,
      7799
    ],
    "valid"
  ],
  [
    [
      7800,
      7800
    ],
    "mapped",
    [
      7801
    ]
  ],
  [
    [
      7801,
      7801
    ],
    "valid"
  ],
  [
    [
      7802,
      7802
    ],
    "mapped",
    [
      7803
    ]
  ],
  [
    [
      7803,
      7803
    ],
    "valid"
  ],
  [
    [
      7804,
      7804
    ],
    "mapped",
    [
      7805
    ]
  ],
  [
    [
      7805,
      7805
    ],
    "valid"
  ],
  [
    [
      7806,
      7806
    ],
    "mapped",
    [
      7807
    ]
  ],
  [
    [
      7807,
      7807
    ],
    "valid"
  ],
  [
    [
      7808,
      7808
    ],
    "mapped",
    [
      7809
    ]
  ],
  [
    [
      7809,
      7809
    ],
    "valid"
  ],
  [
    [
      7810,
      7810
    ],
    "mapped",
    [
      7811
    ]
  ],
  [
    [
      7811,
      7811
    ],
    "valid"
  ],
  [
    [
      7812,
      7812
    ],
    "mapped",
    [
      7813
    ]
  ],
  [
    [
      7813,
      7813
    ],
    "valid"
  ],
  [
    [
      7814,
      7814
    ],
    "mapped",
    [
      7815
    ]
  ],
  [
    [
      7815,
      7815
    ],
    "valid"
  ],
  [
    [
      7816,
      7816
    ],
    "mapped",
    [
      7817
    ]
  ],
  [
    [
      7817,
      7817
    ],
    "valid"
  ],
  [
    [
      7818,
      7818
    ],
    "mapped",
    [
      7819
    ]
  ],
  [
    [
      7819,
      7819
    ],
    "valid"
  ],
  [
    [
      7820,
      7820
    ],
    "mapped",
    [
      7821
    ]
  ],
  [
    [
      7821,
      7821
    ],
    "valid"
  ],
  [
    [
      7822,
      7822
    ],
    "mapped",
    [
      7823
    ]
  ],
  [
    [
      7823,
      7823
    ],
    "valid"
  ],
  [
    [
      7824,
      7824
    ],
    "mapped",
    [
      7825
    ]
  ],
  [
    [
      7825,
      7825
    ],
    "valid"
  ],
  [
    [
      7826,
      7826
    ],
    "mapped",
    [
      7827
    ]
  ],
  [
    [
      7827,
      7827
    ],
    "valid"
  ],
  [
    [
      7828,
      7828
    ],
    "mapped",
    [
      7829
    ]
  ],
  [
    [
      7829,
      7833
    ],
    "valid"
  ],
  [
    [
      7834,
      7834
    ],
    "mapped",
    [
      97,
      702
    ]
  ],
  [
    [
      7835,
      7835
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7836,
      7837
    ],
    "valid"
  ],
  [
    [
      7838,
      7838
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      7839,
      7839
    ],
    "valid"
  ],
  [
    [
      7840,
      7840
    ],
    "mapped",
    [
      7841
    ]
  ],
  [
    [
      7841,
      7841
    ],
    "valid"
  ],
  [
    [
      7842,
      7842
    ],
    "mapped",
    [
      7843
    ]
  ],
  [
    [
      7843,
      7843
    ],
    "valid"
  ],
  [
    [
      7844,
      7844
    ],
    "mapped",
    [
      7845
    ]
  ],
  [
    [
      7845,
      7845
    ],
    "valid"
  ],
  [
    [
      7846,
      7846
    ],
    "mapped",
    [
      7847
    ]
  ],
  [
    [
      7847,
      7847
    ],
    "valid"
  ],
  [
    [
      7848,
      7848
    ],
    "mapped",
    [
      7849
    ]
  ],
  [
    [
      7849,
      7849
    ],
    "valid"
  ],
  [
    [
      7850,
      7850
    ],
    "mapped",
    [
      7851
    ]
  ],
  [
    [
      7851,
      7851
    ],
    "valid"
  ],
  [
    [
      7852,
      7852
    ],
    "mapped",
    [
      7853
    ]
  ],
  [
    [
      7853,
      7853
    ],
    "valid"
  ],
  [
    [
      7854,
      7854
    ],
    "mapped",
    [
      7855
    ]
  ],
  [
    [
      7855,
      7855
    ],
    "valid"
  ],
  [
    [
      7856,
      7856
    ],
    "mapped",
    [
      7857
    ]
  ],
  [
    [
      7857,
      7857
    ],
    "valid"
  ],
  [
    [
      7858,
      7858
    ],
    "mapped",
    [
      7859
    ]
  ],
  [
    [
      7859,
      7859
    ],
    "valid"
  ],
  [
    [
      7860,
      7860
    ],
    "mapped",
    [
      7861
    ]
  ],
  [
    [
      7861,
      7861
    ],
    "valid"
  ],
  [
    [
      7862,
      7862
    ],
    "mapped",
    [
      7863
    ]
  ],
  [
    [
      7863,
      7863
    ],
    "valid"
  ],
  [
    [
      7864,
      7864
    ],
    "mapped",
    [
      7865
    ]
  ],
  [
    [
      7865,
      7865
    ],
    "valid"
  ],
  [
    [
      7866,
      7866
    ],
    "mapped",
    [
      7867
    ]
  ],
  [
    [
      7867,
      7867
    ],
    "valid"
  ],
  [
    [
      7868,
      7868
    ],
    "mapped",
    [
      7869
    ]
  ],
  [
    [
      7869,
      7869
    ],
    "valid"
  ],
  [
    [
      7870,
      7870
    ],
    "mapped",
    [
      7871
    ]
  ],
  [
    [
      7871,
      7871
    ],
    "valid"
  ],
  [
    [
      7872,
      7872
    ],
    "mapped",
    [
      7873
    ]
  ],
  [
    [
      7873,
      7873
    ],
    "valid"
  ],
  [
    [
      7874,
      7874
    ],
    "mapped",
    [
      7875
    ]
  ],
  [
    [
      7875,
      7875
    ],
    "valid"
  ],
  [
    [
      7876,
      7876
    ],
    "mapped",
    [
      7877
    ]
  ],
  [
    [
      7877,
      7877
    ],
    "valid"
  ],
  [
    [
      7878,
      7878
    ],
    "mapped",
    [
      7879
    ]
  ],
  [
    [
      7879,
      7879
    ],
    "valid"
  ],
  [
    [
      7880,
      7880
    ],
    "mapped",
    [
      7881
    ]
  ],
  [
    [
      7881,
      7881
    ],
    "valid"
  ],
  [
    [
      7882,
      7882
    ],
    "mapped",
    [
      7883
    ]
  ],
  [
    [
      7883,
      7883
    ],
    "valid"
  ],
  [
    [
      7884,
      7884
    ],
    "mapped",
    [
      7885
    ]
  ],
  [
    [
      7885,
      7885
    ],
    "valid"
  ],
  [
    [
      7886,
      7886
    ],
    "mapped",
    [
      7887
    ]
  ],
  [
    [
      7887,
      7887
    ],
    "valid"
  ],
  [
    [
      7888,
      7888
    ],
    "mapped",
    [
      7889
    ]
  ],
  [
    [
      7889,
      7889
    ],
    "valid"
  ],
  [
    [
      7890,
      7890
    ],
    "mapped",
    [
      7891
    ]
  ],
  [
    [
      7891,
      7891
    ],
    "valid"
  ],
  [
    [
      7892,
      7892
    ],
    "mapped",
    [
      7893
    ]
  ],
  [
    [
      7893,
      7893
    ],
    "valid"
  ],
  [
    [
      7894,
      7894
    ],
    "mapped",
    [
      7895
    ]
  ],
  [
    [
      7895,
      7895
    ],
    "valid"
  ],
  [
    [
      7896,
      7896
    ],
    "mapped",
    [
      7897
    ]
  ],
  [
    [
      7897,
      7897
    ],
    "valid"
  ],
  [
    [
      7898,
      7898
    ],
    "mapped",
    [
      7899
    ]
  ],
  [
    [
      7899,
      7899
    ],
    "valid"
  ],
  [
    [
      7900,
      7900
    ],
    "mapped",
    [
      7901
    ]
  ],
  [
    [
      7901,
      7901
    ],
    "valid"
  ],
  [
    [
      7902,
      7902
    ],
    "mapped",
    [
      7903
    ]
  ],
  [
    [
      7903,
      7903
    ],
    "valid"
  ],
  [
    [
      7904,
      7904
    ],
    "mapped",
    [
      7905
    ]
  ],
  [
    [
      7905,
      7905
    ],
    "valid"
  ],
  [
    [
      7906,
      7906
    ],
    "mapped",
    [
      7907
    ]
  ],
  [
    [
      7907,
      7907
    ],
    "valid"
  ],
  [
    [
      7908,
      7908
    ],
    "mapped",
    [
      7909
    ]
  ],
  [
    [
      7909,
      7909
    ],
    "valid"
  ],
  [
    [
      7910,
      7910
    ],
    "mapped",
    [
      7911
    ]
  ],
  [
    [
      7911,
      7911
    ],
    "valid"
  ],
  [
    [
      7912,
      7912
    ],
    "mapped",
    [
      7913
    ]
  ],
  [
    [
      7913,
      7913
    ],
    "valid"
  ],
  [
    [
      7914,
      7914
    ],
    "mapped",
    [
      7915
    ]
  ],
  [
    [
      7915,
      7915
    ],
    "valid"
  ],
  [
    [
      7916,
      7916
    ],
    "mapped",
    [
      7917
    ]
  ],
  [
    [
      7917,
      7917
    ],
    "valid"
  ],
  [
    [
      7918,
      7918
    ],
    "mapped",
    [
      7919
    ]
  ],
  [
    [
      7919,
      7919
    ],
    "valid"
  ],
  [
    [
      7920,
      7920
    ],
    "mapped",
    [
      7921
    ]
  ],
  [
    [
      7921,
      7921
    ],
    "valid"
  ],
  [
    [
      7922,
      7922
    ],
    "mapped",
    [
      7923
    ]
  ],
  [
    [
      7923,
      7923
    ],
    "valid"
  ],
  [
    [
      7924,
      7924
    ],
    "mapped",
    [
      7925
    ]
  ],
  [
    [
      7925,
      7925
    ],
    "valid"
  ],
  [
    [
      7926,
      7926
    ],
    "mapped",
    [
      7927
    ]
  ],
  [
    [
      7927,
      7927
    ],
    "valid"
  ],
  [
    [
      7928,
      7928
    ],
    "mapped",
    [
      7929
    ]
  ],
  [
    [
      7929,
      7929
    ],
    "valid"
  ],
  [
    [
      7930,
      7930
    ],
    "mapped",
    [
      7931
    ]
  ],
  [
    [
      7931,
      7931
    ],
    "valid"
  ],
  [
    [
      7932,
      7932
    ],
    "mapped",
    [
      7933
    ]
  ],
  [
    [
      7933,
      7933
    ],
    "valid"
  ],
  [
    [
      7934,
      7934
    ],
    "mapped",
    [
      7935
    ]
  ],
  [
    [
      7935,
      7935
    ],
    "valid"
  ],
  [
    [
      7936,
      7943
    ],
    "valid"
  ],
  [
    [
      7944,
      7944
    ],
    "mapped",
    [
      7936
    ]
  ],
  [
    [
      7945,
      7945
    ],
    "mapped",
    [
      7937
    ]
  ],
  [
    [
      7946,
      7946
    ],
    "mapped",
    [
      7938
    ]
  ],
  [
    [
      7947,
      7947
    ],
    "mapped",
    [
      7939
    ]
  ],
  [
    [
      7948,
      7948
    ],
    "mapped",
    [
      7940
    ]
  ],
  [
    [
      7949,
      7949
    ],
    "mapped",
    [
      7941
    ]
  ],
  [
    [
      7950,
      7950
    ],
    "mapped",
    [
      7942
    ]
  ],
  [
    [
      7951,
      7951
    ],
    "mapped",
    [
      7943
    ]
  ],
  [
    [
      7952,
      7957
    ],
    "valid"
  ],
  [
    [
      7958,
      7959
    ],
    "disallowed"
  ],
  [
    [
      7960,
      7960
    ],
    "mapped",
    [
      7952
    ]
  ],
  [
    [
      7961,
      7961
    ],
    "mapped",
    [
      7953
    ]
  ],
  [
    [
      7962,
      7962
    ],
    "mapped",
    [
      7954
    ]
  ],
  [
    [
      7963,
      7963
    ],
    "mapped",
    [
      7955
    ]
  ],
  [
    [
      7964,
      7964
    ],
    "mapped",
    [
      7956
    ]
  ],
  [
    [
      7965,
      7965
    ],
    "mapped",
    [
      7957
    ]
  ],
  [
    [
      7966,
      7967
    ],
    "disallowed"
  ],
  [
    [
      7968,
      7975
    ],
    "valid"
  ],
  [
    [
      7976,
      7976
    ],
    "mapped",
    [
      7968
    ]
  ],
  [
    [
      7977,
      7977
    ],
    "mapped",
    [
      7969
    ]
  ],
  [
    [
      7978,
      7978
    ],
    "mapped",
    [
      7970
    ]
  ],
  [
    [
      7979,
      7979
    ],
    "mapped",
    [
      7971
    ]
  ],
  [
    [
      7980,
      7980
    ],
    "mapped",
    [
      7972
    ]
  ],
  [
    [
      7981,
      7981
    ],
    "mapped",
    [
      7973
    ]
  ],
  [
    [
      7982,
      7982
    ],
    "mapped",
    [
      7974
    ]
  ],
  [
    [
      7983,
      7983
    ],
    "mapped",
    [
      7975
    ]
  ],
  [
    [
      7984,
      7991
    ],
    "valid"
  ],
  [
    [
      7992,
      7992
    ],
    "mapped",
    [
      7984
    ]
  ],
  [
    [
      7993,
      7993
    ],
    "mapped",
    [
      7985
    ]
  ],
  [
    [
      7994,
      7994
    ],
    "mapped",
    [
      7986
    ]
  ],
  [
    [
      7995,
      7995
    ],
    "mapped",
    [
      7987
    ]
  ],
  [
    [
      7996,
      7996
    ],
    "mapped",
    [
      7988
    ]
  ],
  [
    [
      7997,
      7997
    ],
    "mapped",
    [
      7989
    ]
  ],
  [
    [
      7998,
      7998
    ],
    "mapped",
    [
      7990
    ]
  ],
  [
    [
      7999,
      7999
    ],
    "mapped",
    [
      7991
    ]
  ],
  [
    [
      8e3,
      8005
    ],
    "valid"
  ],
  [
    [
      8006,
      8007
    ],
    "disallowed"
  ],
  [
    [
      8008,
      8008
    ],
    "mapped",
    [
      8e3
    ]
  ],
  [
    [
      8009,
      8009
    ],
    "mapped",
    [
      8001
    ]
  ],
  [
    [
      8010,
      8010
    ],
    "mapped",
    [
      8002
    ]
  ],
  [
    [
      8011,
      8011
    ],
    "mapped",
    [
      8003
    ]
  ],
  [
    [
      8012,
      8012
    ],
    "mapped",
    [
      8004
    ]
  ],
  [
    [
      8013,
      8013
    ],
    "mapped",
    [
      8005
    ]
  ],
  [
    [
      8014,
      8015
    ],
    "disallowed"
  ],
  [
    [
      8016,
      8023
    ],
    "valid"
  ],
  [
    [
      8024,
      8024
    ],
    "disallowed"
  ],
  [
    [
      8025,
      8025
    ],
    "mapped",
    [
      8017
    ]
  ],
  [
    [
      8026,
      8026
    ],
    "disallowed"
  ],
  [
    [
      8027,
      8027
    ],
    "mapped",
    [
      8019
    ]
  ],
  [
    [
      8028,
      8028
    ],
    "disallowed"
  ],
  [
    [
      8029,
      8029
    ],
    "mapped",
    [
      8021
    ]
  ],
  [
    [
      8030,
      8030
    ],
    "disallowed"
  ],
  [
    [
      8031,
      8031
    ],
    "mapped",
    [
      8023
    ]
  ],
  [
    [
      8032,
      8039
    ],
    "valid"
  ],
  [
    [
      8040,
      8040
    ],
    "mapped",
    [
      8032
    ]
  ],
  [
    [
      8041,
      8041
    ],
    "mapped",
    [
      8033
    ]
  ],
  [
    [
      8042,
      8042
    ],
    "mapped",
    [
      8034
    ]
  ],
  [
    [
      8043,
      8043
    ],
    "mapped",
    [
      8035
    ]
  ],
  [
    [
      8044,
      8044
    ],
    "mapped",
    [
      8036
    ]
  ],
  [
    [
      8045,
      8045
    ],
    "mapped",
    [
      8037
    ]
  ],
  [
    [
      8046,
      8046
    ],
    "mapped",
    [
      8038
    ]
  ],
  [
    [
      8047,
      8047
    ],
    "mapped",
    [
      8039
    ]
  ],
  [
    [
      8048,
      8048
    ],
    "valid"
  ],
  [
    [
      8049,
      8049
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8050,
      8050
    ],
    "valid"
  ],
  [
    [
      8051,
      8051
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8052,
      8052
    ],
    "valid"
  ],
  [
    [
      8053,
      8053
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8054,
      8054
    ],
    "valid"
  ],
  [
    [
      8055,
      8055
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8056,
      8056
    ],
    "valid"
  ],
  [
    [
      8057,
      8057
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8058,
      8058
    ],
    "valid"
  ],
  [
    [
      8059,
      8059
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8060,
      8060
    ],
    "valid"
  ],
  [
    [
      8061,
      8061
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8062,
      8063
    ],
    "disallowed"
  ],
  [
    [
      8064,
      8064
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8065,
      8065
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8066,
      8066
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8067,
      8067
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8068,
      8068
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8069,
      8069
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8070,
      8070
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8071,
      8071
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8072,
      8072
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8073,
      8073
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8074,
      8074
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8075,
      8075
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8076,
      8076
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8077,
      8077
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8078,
      8078
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8079,
      8079
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8080,
      8080
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8081,
      8081
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8082,
      8082
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8083,
      8083
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8084,
      8084
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8085,
      8085
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8086,
      8086
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8087,
      8087
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8088,
      8088
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8089,
      8089
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8090,
      8090
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8091,
      8091
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8092,
      8092
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8093,
      8093
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8094,
      8094
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8095,
      8095
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8096,
      8096
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8097,
      8097
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8098,
      8098
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8099,
      8099
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8100,
      8100
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8101,
      8101
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8102,
      8102
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8103,
      8103
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8104,
      8104
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8105,
      8105
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8106,
      8106
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8107,
      8107
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8108,
      8108
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8109,
      8109
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8110,
      8110
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8111,
      8111
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8112,
      8113
    ],
    "valid"
  ],
  [
    [
      8114,
      8114
    ],
    "mapped",
    [
      8048,
      953
    ]
  ],
  [
    [
      8115,
      8115
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8116,
      8116
    ],
    "mapped",
    [
      940,
      953
    ]
  ],
  [
    [
      8117,
      8117
    ],
    "disallowed"
  ],
  [
    [
      8118,
      8118
    ],
    "valid"
  ],
  [
    [
      8119,
      8119
    ],
    "mapped",
    [
      8118,
      953
    ]
  ],
  [
    [
      8120,
      8120
    ],
    "mapped",
    [
      8112
    ]
  ],
  [
    [
      8121,
      8121
    ],
    "mapped",
    [
      8113
    ]
  ],
  [
    [
      8122,
      8122
    ],
    "mapped",
    [
      8048
    ]
  ],
  [
    [
      8123,
      8123
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8124,
      8124
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8125,
      8125
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8126,
      8126
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      8127,
      8127
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8128,
      8128
    ],
    "disallowed_STD3_mapped",
    [
      32,
      834
    ]
  ],
  [
    [
      8129,
      8129
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      834
    ]
  ],
  [
    [
      8130,
      8130
    ],
    "mapped",
    [
      8052,
      953
    ]
  ],
  [
    [
      8131,
      8131
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8132,
      8132
    ],
    "mapped",
    [
      942,
      953
    ]
  ],
  [
    [
      8133,
      8133
    ],
    "disallowed"
  ],
  [
    [
      8134,
      8134
    ],
    "valid"
  ],
  [
    [
      8135,
      8135
    ],
    "mapped",
    [
      8134,
      953
    ]
  ],
  [
    [
      8136,
      8136
    ],
    "mapped",
    [
      8050
    ]
  ],
  [
    [
      8137,
      8137
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8138,
      8138
    ],
    "mapped",
    [
      8052
    ]
  ],
  [
    [
      8139,
      8139
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8140,
      8140
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8141,
      8141
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      768
    ]
  ],
  [
    [
      8142,
      8142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      769
    ]
  ],
  [
    [
      8143,
      8143
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      834
    ]
  ],
  [
    [
      8144,
      8146
    ],
    "valid"
  ],
  [
    [
      8147,
      8147
    ],
    "mapped",
    [
      912
    ]
  ],
  [
    [
      8148,
      8149
    ],
    "disallowed"
  ],
  [
    [
      8150,
      8151
    ],
    "valid"
  ],
  [
    [
      8152,
      8152
    ],
    "mapped",
    [
      8144
    ]
  ],
  [
    [
      8153,
      8153
    ],
    "mapped",
    [
      8145
    ]
  ],
  [
    [
      8154,
      8154
    ],
    "mapped",
    [
      8054
    ]
  ],
  [
    [
      8155,
      8155
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8156,
      8156
    ],
    "disallowed"
  ],
  [
    [
      8157,
      8157
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      768
    ]
  ],
  [
    [
      8158,
      8158
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      769
    ]
  ],
  [
    [
      8159,
      8159
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      834
    ]
  ],
  [
    [
      8160,
      8162
    ],
    "valid"
  ],
  [
    [
      8163,
      8163
    ],
    "mapped",
    [
      944
    ]
  ],
  [
    [
      8164,
      8167
    ],
    "valid"
  ],
  [
    [
      8168,
      8168
    ],
    "mapped",
    [
      8160
    ]
  ],
  [
    [
      8169,
      8169
    ],
    "mapped",
    [
      8161
    ]
  ],
  [
    [
      8170,
      8170
    ],
    "mapped",
    [
      8058
    ]
  ],
  [
    [
      8171,
      8171
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8172,
      8172
    ],
    "mapped",
    [
      8165
    ]
  ],
  [
    [
      8173,
      8173
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      768
    ]
  ],
  [
    [
      8174,
      8174
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      8175,
      8175
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      8176,
      8177
    ],
    "disallowed"
  ],
  [
    [
      8178,
      8178
    ],
    "mapped",
    [
      8060,
      953
    ]
  ],
  [
    [
      8179,
      8179
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8180,
      8180
    ],
    "mapped",
    [
      974,
      953
    ]
  ],
  [
    [
      8181,
      8181
    ],
    "disallowed"
  ],
  [
    [
      8182,
      8182
    ],
    "valid"
  ],
  [
    [
      8183,
      8183
    ],
    "mapped",
    [
      8182,
      953
    ]
  ],
  [
    [
      8184,
      8184
    ],
    "mapped",
    [
      8056
    ]
  ],
  [
    [
      8185,
      8185
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8186,
      8186
    ],
    "mapped",
    [
      8060
    ]
  ],
  [
    [
      8187,
      8187
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8188,
      8188
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8189,
      8189
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      8190,
      8190
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788
    ]
  ],
  [
    [
      8191,
      8191
    ],
    "disallowed"
  ],
  [
    [
      8192,
      8202
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8203,
      8203
    ],
    "ignored"
  ],
  [
    [
      8204,
      8205
    ],
    "deviation",
    []
  ],
  [
    [
      8206,
      8207
    ],
    "disallowed"
  ],
  [
    [
      8208,
      8208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8209,
      8209
    ],
    "mapped",
    [
      8208
    ]
  ],
  [
    [
      8210,
      8214
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8215,
      8215
    ],
    "disallowed_STD3_mapped",
    [
      32,
      819
    ]
  ],
  [
    [
      8216,
      8227
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8228,
      8230
    ],
    "disallowed"
  ],
  [
    [
      8231,
      8231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8232,
      8238
    ],
    "disallowed"
  ],
  [
    [
      8239,
      8239
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8240,
      8242
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8243,
      8243
    ],
    "mapped",
    [
      8242,
      8242
    ]
  ],
  [
    [
      8244,
      8244
    ],
    "mapped",
    [
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8245,
      8245
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8246,
      8246
    ],
    "mapped",
    [
      8245,
      8245
    ]
  ],
  [
    [
      8247,
      8247
    ],
    "mapped",
    [
      8245,
      8245,
      8245
    ]
  ],
  [
    [
      8248,
      8251
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8252,
      8252
    ],
    "disallowed_STD3_mapped",
    [
      33,
      33
    ]
  ],
  [
    [
      8253,
      8253
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8254,
      8254
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      8255,
      8262
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8263,
      8263
    ],
    "disallowed_STD3_mapped",
    [
      63,
      63
    ]
  ],
  [
    [
      8264,
      8264
    ],
    "disallowed_STD3_mapped",
    [
      63,
      33
    ]
  ],
  [
    [
      8265,
      8265
    ],
    "disallowed_STD3_mapped",
    [
      33,
      63
    ]
  ],
  [
    [
      8266,
      8269
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8270,
      8274
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8275,
      8276
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8277,
      8278
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8279,
      8279
    ],
    "mapped",
    [
      8242,
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8280,
      8286
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8287,
      8287
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8288,
      8288
    ],
    "ignored"
  ],
  [
    [
      8289,
      8291
    ],
    "disallowed"
  ],
  [
    [
      8292,
      8292
    ],
    "ignored"
  ],
  [
    [
      8293,
      8293
    ],
    "disallowed"
  ],
  [
    [
      8294,
      8297
    ],
    "disallowed"
  ],
  [
    [
      8298,
      8303
    ],
    "disallowed"
  ],
  [
    [
      8304,
      8304
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8305,
      8305
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8306,
      8307
    ],
    "disallowed"
  ],
  [
    [
      8308,
      8308
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8309,
      8309
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8310,
      8310
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8311,
      8311
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8312,
      8312
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8313,
      8313
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8314,
      8314
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8315,
      8315
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8316,
      8316
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8317,
      8317
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8318,
      8318
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8319,
      8319
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8320,
      8320
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8321,
      8321
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      8322,
      8322
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      8323,
      8323
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      8324,
      8324
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8325,
      8325
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8326,
      8326
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8327,
      8327
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8328,
      8328
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8329,
      8329
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8330,
      8330
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8331,
      8331
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8332,
      8332
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8333,
      8333
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8334,
      8334
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8335,
      8335
    ],
    "disallowed"
  ],
  [
    [
      8336,
      8336
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      8337,
      8337
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8338,
      8338
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8339,
      8339
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8340,
      8340
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      8341,
      8341
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8342,
      8342
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8343,
      8343
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8344,
      8344
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8345,
      8345
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8346,
      8346
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8347,
      8347
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      8348,
      8348
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      8349,
      8351
    ],
    "disallowed"
  ],
  [
    [
      8352,
      8359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8360,
      8360
    ],
    "mapped",
    [
      114,
      115
    ]
  ],
  [
    [
      8361,
      8362
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8363,
      8363
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8364,
      8364
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8365,
      8367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8368,
      8369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8370,
      8373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8374,
      8376
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8377,
      8377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8378,
      8378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8379,
      8381
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8382,
      8382
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8383,
      8399
    ],
    "disallowed"
  ],
  [
    [
      8400,
      8417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8418,
      8419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8420,
      8426
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8427,
      8427
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8428,
      8431
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8432,
      8432
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8433,
      8447
    ],
    "disallowed"
  ],
  [
    [
      8448,
      8448
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      99
    ]
  ],
  [
    [
      8449,
      8449
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      115
    ]
  ],
  [
    [
      8450,
      8450
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8451,
      8451
    ],
    "mapped",
    [
      176,
      99
    ]
  ],
  [
    [
      8452,
      8452
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8453,
      8453
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      111
    ]
  ],
  [
    [
      8454,
      8454
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      117
    ]
  ],
  [
    [
      8455,
      8455
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      8456,
      8456
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8457,
      8457
    ],
    "mapped",
    [
      176,
      102
    ]
  ],
  [
    [
      8458,
      8458
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      8459,
      8462
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8463,
      8463
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      8464,
      8465
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8466,
      8467
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8468,
      8468
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8469,
      8469
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8470,
      8470
    ],
    "mapped",
    [
      110,
      111
    ]
  ],
  [
    [
      8471,
      8472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8473,
      8473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8474,
      8474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      8475,
      8477
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      8478,
      8479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8480,
      8480
    ],
    "mapped",
    [
      115,
      109
    ]
  ],
  [
    [
      8481,
      8481
    ],
    "mapped",
    [
      116,
      101,
      108
    ]
  ],
  [
    [
      8482,
      8482
    ],
    "mapped",
    [
      116,
      109
    ]
  ],
  [
    [
      8483,
      8483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8484,
      8484
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8485,
      8485
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8486,
      8486
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      8487,
      8487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8488,
      8488
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8489,
      8489
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8490,
      8490
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8491,
      8491
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      8492,
      8492
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      8493,
      8493
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8494,
      8494
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8495,
      8496
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8497,
      8497
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      8498,
      8498
    ],
    "disallowed"
  ],
  [
    [
      8499,
      8499
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8500,
      8500
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8501,
      8501
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      8502,
      8502
    ],
    "mapped",
    [
      1489
    ]
  ],
  [
    [
      8503,
      8503
    ],
    "mapped",
    [
      1490
    ]
  ],
  [
    [
      8504,
      8504
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      8505,
      8505
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8506,
      8506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8507,
      8507
    ],
    "mapped",
    [
      102,
      97,
      120
    ]
  ],
  [
    [
      8508,
      8508
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8509,
      8510
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      8511,
      8511
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8512,
      8512
    ],
    "mapped",
    [
      8721
    ]
  ],
  [
    [
      8513,
      8516
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8517,
      8518
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8519,
      8519
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8520,
      8520
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8521,
      8521
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      8522,
      8523
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8524,
      8524
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8525,
      8525
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8526,
      8526
    ],
    "valid"
  ],
  [
    [
      8527,
      8527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8528,
      8528
    ],
    "mapped",
    [
      49,
      8260,
      55
    ]
  ],
  [
    [
      8529,
      8529
    ],
    "mapped",
    [
      49,
      8260,
      57
    ]
  ],
  [
    [
      8530,
      8530
    ],
    "mapped",
    [
      49,
      8260,
      49,
      48
    ]
  ],
  [
    [
      8531,
      8531
    ],
    "mapped",
    [
      49,
      8260,
      51
    ]
  ],
  [
    [
      8532,
      8532
    ],
    "mapped",
    [
      50,
      8260,
      51
    ]
  ],
  [
    [
      8533,
      8533
    ],
    "mapped",
    [
      49,
      8260,
      53
    ]
  ],
  [
    [
      8534,
      8534
    ],
    "mapped",
    [
      50,
      8260,
      53
    ]
  ],
  [
    [
      8535,
      8535
    ],
    "mapped",
    [
      51,
      8260,
      53
    ]
  ],
  [
    [
      8536,
      8536
    ],
    "mapped",
    [
      52,
      8260,
      53
    ]
  ],
  [
    [
      8537,
      8537
    ],
    "mapped",
    [
      49,
      8260,
      54
    ]
  ],
  [
    [
      8538,
      8538
    ],
    "mapped",
    [
      53,
      8260,
      54
    ]
  ],
  [
    [
      8539,
      8539
    ],
    "mapped",
    [
      49,
      8260,
      56
    ]
  ],
  [
    [
      8540,
      8540
    ],
    "mapped",
    [
      51,
      8260,
      56
    ]
  ],
  [
    [
      8541,
      8541
    ],
    "mapped",
    [
      53,
      8260,
      56
    ]
  ],
  [
    [
      8542,
      8542
    ],
    "mapped",
    [
      55,
      8260,
      56
    ]
  ],
  [
    [
      8543,
      8543
    ],
    "mapped",
    [
      49,
      8260
    ]
  ],
  [
    [
      8544,
      8544
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8545,
      8545
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8546,
      8546
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8547,
      8547
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8548,
      8548
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8549,
      8549
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8550,
      8550
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8551,
      8551
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8552,
      8552
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8553,
      8553
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8554,
      8554
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8555,
      8555
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8556,
      8556
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8557,
      8557
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8558,
      8558
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8559,
      8559
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8560,
      8560
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8561,
      8561
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8562,
      8562
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8563,
      8563
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8564,
      8564
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8565,
      8565
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8566,
      8566
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8567,
      8567
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8568,
      8568
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8569,
      8569
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8570,
      8570
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8571,
      8571
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8572,
      8572
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8573,
      8573
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8574,
      8574
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8575,
      8575
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8576,
      8578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8579,
      8579
    ],
    "disallowed"
  ],
  [
    [
      8580,
      8580
    ],
    "valid"
  ],
  [
    [
      8581,
      8584
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8585,
      8585
    ],
    "mapped",
    [
      48,
      8260,
      51
    ]
  ],
  [
    [
      8586,
      8587
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8588,
      8591
    ],
    "disallowed"
  ],
  [
    [
      8592,
      8682
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8683,
      8691
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8692,
      8703
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8704,
      8747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8748,
      8748
    ],
    "mapped",
    [
      8747,
      8747
    ]
  ],
  [
    [
      8749,
      8749
    ],
    "mapped",
    [
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      8750,
      8750
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8751,
      8751
    ],
    "mapped",
    [
      8750,
      8750
    ]
  ],
  [
    [
      8752,
      8752
    ],
    "mapped",
    [
      8750,
      8750,
      8750
    ]
  ],
  [
    [
      8753,
      8799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8800,
      8800
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8801,
      8813
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8814,
      8815
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8816,
      8945
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8946,
      8959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8960,
      8960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8961,
      8961
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8962,
      9e3
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9001,
      9001
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      9002,
      9002
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      9003,
      9082
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9083,
      9083
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9084,
      9084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9085,
      9114
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9115,
      9166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9167,
      9168
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9169,
      9179
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9180,
      9191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9192,
      9192
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9193,
      9203
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9204,
      9210
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9211,
      9215
    ],
    "disallowed"
  ],
  [
    [
      9216,
      9252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9253,
      9254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9255,
      9279
    ],
    "disallowed"
  ],
  [
    [
      9280,
      9290
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9291,
      9311
    ],
    "disallowed"
  ],
  [
    [
      9312,
      9312
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      9313,
      9313
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      9314,
      9314
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      9315,
      9315
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      9316,
      9316
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      9317,
      9317
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      9318,
      9318
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      9319,
      9319
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      9320,
      9320
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      9321,
      9321
    ],
    "mapped",
    [
      49,
      48
    ]
  ],
  [
    [
      9322,
      9322
    ],
    "mapped",
    [
      49,
      49
    ]
  ],
  [
    [
      9323,
      9323
    ],
    "mapped",
    [
      49,
      50
    ]
  ],
  [
    [
      9324,
      9324
    ],
    "mapped",
    [
      49,
      51
    ]
  ],
  [
    [
      9325,
      9325
    ],
    "mapped",
    [
      49,
      52
    ]
  ],
  [
    [
      9326,
      9326
    ],
    "mapped",
    [
      49,
      53
    ]
  ],
  [
    [
      9327,
      9327
    ],
    "mapped",
    [
      49,
      54
    ]
  ],
  [
    [
      9328,
      9328
    ],
    "mapped",
    [
      49,
      55
    ]
  ],
  [
    [
      9329,
      9329
    ],
    "mapped",
    [
      49,
      56
    ]
  ],
  [
    [
      9330,
      9330
    ],
    "mapped",
    [
      49,
      57
    ]
  ],
  [
    [
      9331,
      9331
    ],
    "mapped",
    [
      50,
      48
    ]
  ],
  [
    [
      9332,
      9332
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      41
    ]
  ],
  [
    [
      9333,
      9333
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      41
    ]
  ],
  [
    [
      9334,
      9334
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51,
      41
    ]
  ],
  [
    [
      9335,
      9335
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52,
      41
    ]
  ],
  [
    [
      9336,
      9336
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53,
      41
    ]
  ],
  [
    [
      9337,
      9337
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54,
      41
    ]
  ],
  [
    [
      9338,
      9338
    ],
    "disallowed_STD3_mapped",
    [
      40,
      55,
      41
    ]
  ],
  [
    [
      9339,
      9339
    ],
    "disallowed_STD3_mapped",
    [
      40,
      56,
      41
    ]
  ],
  [
    [
      9340,
      9340
    ],
    "disallowed_STD3_mapped",
    [
      40,
      57,
      41
    ]
  ],
  [
    [
      9341,
      9341
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      48,
      41
    ]
  ],
  [
    [
      9342,
      9342
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      49,
      41
    ]
  ],
  [
    [
      9343,
      9343
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      50,
      41
    ]
  ],
  [
    [
      9344,
      9344
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      51,
      41
    ]
  ],
  [
    [
      9345,
      9345
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      52,
      41
    ]
  ],
  [
    [
      9346,
      9346
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      53,
      41
    ]
  ],
  [
    [
      9347,
      9347
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      54,
      41
    ]
  ],
  [
    [
      9348,
      9348
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      55,
      41
    ]
  ],
  [
    [
      9349,
      9349
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      56,
      41
    ]
  ],
  [
    [
      9350,
      9350
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      57,
      41
    ]
  ],
  [
    [
      9351,
      9351
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      48,
      41
    ]
  ],
  [
    [
      9352,
      9371
    ],
    "disallowed"
  ],
  [
    [
      9372,
      9372
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      9373,
      9373
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      9374,
      9374
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      9375,
      9375
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      9376,
      9376
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      9377,
      9377
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      9378,
      9378
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      9379,
      9379
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      9380,
      9380
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      9381,
      9381
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      9382,
      9382
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      9383,
      9383
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      9384,
      9384
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      9385,
      9385
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      9386,
      9386
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      9387,
      9387
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      9388,
      9388
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      9389,
      9389
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      9390,
      9390
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      9391,
      9391
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      9392,
      9392
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      9393,
      9393
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      9394,
      9394
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      9395,
      9395
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      9396,
      9396
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      9397,
      9397
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      9398,
      9398
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9399,
      9399
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9400,
      9400
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9401,
      9401
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9402,
      9402
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9403,
      9403
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9404,
      9404
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9405,
      9405
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9406,
      9406
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9407,
      9407
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9408,
      9408
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9409,
      9409
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9410,
      9410
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9411,
      9411
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9412,
      9412
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9413,
      9413
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9414,
      9414
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9415,
      9415
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9416,
      9416
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9417,
      9417
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9418,
      9418
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9419,
      9419
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9420,
      9420
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9421,
      9421
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9422,
      9422
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9423,
      9423
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9424,
      9424
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9425,
      9425
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9426,
      9426
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9427,
      9427
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9428,
      9428
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9429,
      9429
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9430,
      9430
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9431,
      9431
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9432,
      9432
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9433,
      9433
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9434,
      9434
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9435,
      9435
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9436,
      9436
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9437,
      9437
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9438,
      9438
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9439,
      9439
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9440,
      9440
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9441,
      9441
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9442,
      9442
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9443,
      9443
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9444,
      9444
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9445,
      9445
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9446,
      9446
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9447,
      9447
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9448,
      9448
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9449,
      9449
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9450,
      9450
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      9451,
      9470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9471,
      9471
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9472,
      9621
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9622,
      9631
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9632,
      9711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9712,
      9719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9720,
      9727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9728,
      9747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9748,
      9749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9750,
      9751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9752,
      9752
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9753,
      9753
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9754,
      9839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9840,
      9841
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9842,
      9853
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9854,
      9855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9856,
      9865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9866,
      9873
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9874,
      9884
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9885,
      9885
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9886,
      9887
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9888,
      9889
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9890,
      9905
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9906,
      9906
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9907,
      9916
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9917,
      9919
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9920,
      9923
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9924,
      9933
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9934,
      9934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9935,
      9953
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9954,
      9954
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9955,
      9955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9956,
      9959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9960,
      9983
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9984,
      9984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9985,
      9988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9989,
      9989
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9990,
      9993
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9994,
      9995
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9996,
      10023
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10024,
      10024
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10025,
      10059
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10060,
      10060
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10061,
      10061
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10062,
      10062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10063,
      10066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10067,
      10069
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10070,
      10070
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10071,
      10071
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10072,
      10078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10079,
      10080
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10081,
      10087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10088,
      10101
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10102,
      10132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10133,
      10135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10136,
      10159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10160,
      10160
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10161,
      10174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10175,
      10175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10176,
      10182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10183,
      10186
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10187,
      10187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10188,
      10188
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10189,
      10189
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10190,
      10191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10192,
      10219
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10220,
      10223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10224,
      10239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10240,
      10495
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10496,
      10763
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10764,
      10764
    ],
    "mapped",
    [
      8747,
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      10765,
      10867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10868,
      10868
    ],
    "disallowed_STD3_mapped",
    [
      58,
      58,
      61
    ]
  ],
  [
    [
      10869,
      10869
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61
    ]
  ],
  [
    [
      10870,
      10870
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61,
      61
    ]
  ],
  [
    [
      10871,
      10971
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10972,
      10972
    ],
    "mapped",
    [
      10973,
      824
    ]
  ],
  [
    [
      10973,
      11007
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11008,
      11021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11022,
      11027
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11028,
      11034
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11035,
      11039
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11040,
      11043
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11044,
      11084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11085,
      11087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11088,
      11092
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11093,
      11097
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11098,
      11123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11124,
      11125
    ],
    "disallowed"
  ],
  [
    [
      11126,
      11157
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11158,
      11159
    ],
    "disallowed"
  ],
  [
    [
      11160,
      11193
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11194,
      11196
    ],
    "disallowed"
  ],
  [
    [
      11197,
      11208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11209,
      11209
    ],
    "disallowed"
  ],
  [
    [
      11210,
      11217
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11218,
      11243
    ],
    "disallowed"
  ],
  [
    [
      11244,
      11247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11248,
      11263
    ],
    "disallowed"
  ],
  [
    [
      11264,
      11264
    ],
    "mapped",
    [
      11312
    ]
  ],
  [
    [
      11265,
      11265
    ],
    "mapped",
    [
      11313
    ]
  ],
  [
    [
      11266,
      11266
    ],
    "mapped",
    [
      11314
    ]
  ],
  [
    [
      11267,
      11267
    ],
    "mapped",
    [
      11315
    ]
  ],
  [
    [
      11268,
      11268
    ],
    "mapped",
    [
      11316
    ]
  ],
  [
    [
      11269,
      11269
    ],
    "mapped",
    [
      11317
    ]
  ],
  [
    [
      11270,
      11270
    ],
    "mapped",
    [
      11318
    ]
  ],
  [
    [
      11271,
      11271
    ],
    "mapped",
    [
      11319
    ]
  ],
  [
    [
      11272,
      11272
    ],
    "mapped",
    [
      11320
    ]
  ],
  [
    [
      11273,
      11273
    ],
    "mapped",
    [
      11321
    ]
  ],
  [
    [
      11274,
      11274
    ],
    "mapped",
    [
      11322
    ]
  ],
  [
    [
      11275,
      11275
    ],
    "mapped",
    [
      11323
    ]
  ],
  [
    [
      11276,
      11276
    ],
    "mapped",
    [
      11324
    ]
  ],
  [
    [
      11277,
      11277
    ],
    "mapped",
    [
      11325
    ]
  ],
  [
    [
      11278,
      11278
    ],
    "mapped",
    [
      11326
    ]
  ],
  [
    [
      11279,
      11279
    ],
    "mapped",
    [
      11327
    ]
  ],
  [
    [
      11280,
      11280
    ],
    "mapped",
    [
      11328
    ]
  ],
  [
    [
      11281,
      11281
    ],
    "mapped",
    [
      11329
    ]
  ],
  [
    [
      11282,
      11282
    ],
    "mapped",
    [
      11330
    ]
  ],
  [
    [
      11283,
      11283
    ],
    "mapped",
    [
      11331
    ]
  ],
  [
    [
      11284,
      11284
    ],
    "mapped",
    [
      11332
    ]
  ],
  [
    [
      11285,
      11285
    ],
    "mapped",
    [
      11333
    ]
  ],
  [
    [
      11286,
      11286
    ],
    "mapped",
    [
      11334
    ]
  ],
  [
    [
      11287,
      11287
    ],
    "mapped",
    [
      11335
    ]
  ],
  [
    [
      11288,
      11288
    ],
    "mapped",
    [
      11336
    ]
  ],
  [
    [
      11289,
      11289
    ],
    "mapped",
    [
      11337
    ]
  ],
  [
    [
      11290,
      11290
    ],
    "mapped",
    [
      11338
    ]
  ],
  [
    [
      11291,
      11291
    ],
    "mapped",
    [
      11339
    ]
  ],
  [
    [
      11292,
      11292
    ],
    "mapped",
    [
      11340
    ]
  ],
  [
    [
      11293,
      11293
    ],
    "mapped",
    [
      11341
    ]
  ],
  [
    [
      11294,
      11294
    ],
    "mapped",
    [
      11342
    ]
  ],
  [
    [
      11295,
      11295
    ],
    "mapped",
    [
      11343
    ]
  ],
  [
    [
      11296,
      11296
    ],
    "mapped",
    [
      11344
    ]
  ],
  [
    [
      11297,
      11297
    ],
    "mapped",
    [
      11345
    ]
  ],
  [
    [
      11298,
      11298
    ],
    "mapped",
    [
      11346
    ]
  ],
  [
    [
      11299,
      11299
    ],
    "mapped",
    [
      11347
    ]
  ],
  [
    [
      11300,
      11300
    ],
    "mapped",
    [
      11348
    ]
  ],
  [
    [
      11301,
      11301
    ],
    "mapped",
    [
      11349
    ]
  ],
  [
    [
      11302,
      11302
    ],
    "mapped",
    [
      11350
    ]
  ],
  [
    [
      11303,
      11303
    ],
    "mapped",
    [
      11351
    ]
  ],
  [
    [
      11304,
      11304
    ],
    "mapped",
    [
      11352
    ]
  ],
  [
    [
      11305,
      11305
    ],
    "mapped",
    [
      11353
    ]
  ],
  [
    [
      11306,
      11306
    ],
    "mapped",
    [
      11354
    ]
  ],
  [
    [
      11307,
      11307
    ],
    "mapped",
    [
      11355
    ]
  ],
  [
    [
      11308,
      11308
    ],
    "mapped",
    [
      11356
    ]
  ],
  [
    [
      11309,
      11309
    ],
    "mapped",
    [
      11357
    ]
  ],
  [
    [
      11310,
      11310
    ],
    "mapped",
    [
      11358
    ]
  ],
  [
    [
      11311,
      11311
    ],
    "disallowed"
  ],
  [
    [
      11312,
      11358
    ],
    "valid"
  ],
  [
    [
      11359,
      11359
    ],
    "disallowed"
  ],
  [
    [
      11360,
      11360
    ],
    "mapped",
    [
      11361
    ]
  ],
  [
    [
      11361,
      11361
    ],
    "valid"
  ],
  [
    [
      11362,
      11362
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      11363,
      11363
    ],
    "mapped",
    [
      7549
    ]
  ],
  [
    [
      11364,
      11364
    ],
    "mapped",
    [
      637
    ]
  ],
  [
    [
      11365,
      11366
    ],
    "valid"
  ],
  [
    [
      11367,
      11367
    ],
    "mapped",
    [
      11368
    ]
  ],
  [
    [
      11368,
      11368
    ],
    "valid"
  ],
  [
    [
      11369,
      11369
    ],
    "mapped",
    [
      11370
    ]
  ],
  [
    [
      11370,
      11370
    ],
    "valid"
  ],
  [
    [
      11371,
      11371
    ],
    "mapped",
    [
      11372
    ]
  ],
  [
    [
      11372,
      11372
    ],
    "valid"
  ],
  [
    [
      11373,
      11373
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      11374,
      11374
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      11375,
      11375
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      11376,
      11376
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      11377,
      11377
    ],
    "valid"
  ],
  [
    [
      11378,
      11378
    ],
    "mapped",
    [
      11379
    ]
  ],
  [
    [
      11379,
      11379
    ],
    "valid"
  ],
  [
    [
      11380,
      11380
    ],
    "valid"
  ],
  [
    [
      11381,
      11381
    ],
    "mapped",
    [
      11382
    ]
  ],
  [
    [
      11382,
      11383
    ],
    "valid"
  ],
  [
    [
      11384,
      11387
    ],
    "valid"
  ],
  [
    [
      11388,
      11388
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      11389,
      11389
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      11390,
      11390
    ],
    "mapped",
    [
      575
    ]
  ],
  [
    [
      11391,
      11391
    ],
    "mapped",
    [
      576
    ]
  ],
  [
    [
      11392,
      11392
    ],
    "mapped",
    [
      11393
    ]
  ],
  [
    [
      11393,
      11393
    ],
    "valid"
  ],
  [
    [
      11394,
      11394
    ],
    "mapped",
    [
      11395
    ]
  ],
  [
    [
      11395,
      11395
    ],
    "valid"
  ],
  [
    [
      11396,
      11396
    ],
    "mapped",
    [
      11397
    ]
  ],
  [
    [
      11397,
      11397
    ],
    "valid"
  ],
  [
    [
      11398,
      11398
    ],
    "mapped",
    [
      11399
    ]
  ],
  [
    [
      11399,
      11399
    ],
    "valid"
  ],
  [
    [
      11400,
      11400
    ],
    "mapped",
    [
      11401
    ]
  ],
  [
    [
      11401,
      11401
    ],
    "valid"
  ],
  [
    [
      11402,
      11402
    ],
    "mapped",
    [
      11403
    ]
  ],
  [
    [
      11403,
      11403
    ],
    "valid"
  ],
  [
    [
      11404,
      11404
    ],
    "mapped",
    [
      11405
    ]
  ],
  [
    [
      11405,
      11405
    ],
    "valid"
  ],
  [
    [
      11406,
      11406
    ],
    "mapped",
    [
      11407
    ]
  ],
  [
    [
      11407,
      11407
    ],
    "valid"
  ],
  [
    [
      11408,
      11408
    ],
    "mapped",
    [
      11409
    ]
  ],
  [
    [
      11409,
      11409
    ],
    "valid"
  ],
  [
    [
      11410,
      11410
    ],
    "mapped",
    [
      11411
    ]
  ],
  [
    [
      11411,
      11411
    ],
    "valid"
  ],
  [
    [
      11412,
      11412
    ],
    "mapped",
    [
      11413
    ]
  ],
  [
    [
      11413,
      11413
    ],
    "valid"
  ],
  [
    [
      11414,
      11414
    ],
    "mapped",
    [
      11415
    ]
  ],
  [
    [
      11415,
      11415
    ],
    "valid"
  ],
  [
    [
      11416,
      11416
    ],
    "mapped",
    [
      11417
    ]
  ],
  [
    [
      11417,
      11417
    ],
    "valid"
  ],
  [
    [
      11418,
      11418
    ],
    "mapped",
    [
      11419
    ]
  ],
  [
    [
      11419,
      11419
    ],
    "valid"
  ],
  [
    [
      11420,
      11420
    ],
    "mapped",
    [
      11421
    ]
  ],
  [
    [
      11421,
      11421
    ],
    "valid"
  ],
  [
    [
      11422,
      11422
    ],
    "mapped",
    [
      11423
    ]
  ],
  [
    [
      11423,
      11423
    ],
    "valid"
  ],
  [
    [
      11424,
      11424
    ],
    "mapped",
    [
      11425
    ]
  ],
  [
    [
      11425,
      11425
    ],
    "valid"
  ],
  [
    [
      11426,
      11426
    ],
    "mapped",
    [
      11427
    ]
  ],
  [
    [
      11427,
      11427
    ],
    "valid"
  ],
  [
    [
      11428,
      11428
    ],
    "mapped",
    [
      11429
    ]
  ],
  [
    [
      11429,
      11429
    ],
    "valid"
  ],
  [
    [
      11430,
      11430
    ],
    "mapped",
    [
      11431
    ]
  ],
  [
    [
      11431,
      11431
    ],
    "valid"
  ],
  [
    [
      11432,
      11432
    ],
    "mapped",
    [
      11433
    ]
  ],
  [
    [
      11433,
      11433
    ],
    "valid"
  ],
  [
    [
      11434,
      11434
    ],
    "mapped",
    [
      11435
    ]
  ],
  [
    [
      11435,
      11435
    ],
    "valid"
  ],
  [
    [
      11436,
      11436
    ],
    "mapped",
    [
      11437
    ]
  ],
  [
    [
      11437,
      11437
    ],
    "valid"
  ],
  [
    [
      11438,
      11438
    ],
    "mapped",
    [
      11439
    ]
  ],
  [
    [
      11439,
      11439
    ],
    "valid"
  ],
  [
    [
      11440,
      11440
    ],
    "mapped",
    [
      11441
    ]
  ],
  [
    [
      11441,
      11441
    ],
    "valid"
  ],
  [
    [
      11442,
      11442
    ],
    "mapped",
    [
      11443
    ]
  ],
  [
    [
      11443,
      11443
    ],
    "valid"
  ],
  [
    [
      11444,
      11444
    ],
    "mapped",
    [
      11445
    ]
  ],
  [
    [
      11445,
      11445
    ],
    "valid"
  ],
  [
    [
      11446,
      11446
    ],
    "mapped",
    [
      11447
    ]
  ],
  [
    [
      11447,
      11447
    ],
    "valid"
  ],
  [
    [
      11448,
      11448
    ],
    "mapped",
    [
      11449
    ]
  ],
  [
    [
      11449,
      11449
    ],
    "valid"
  ],
  [
    [
      11450,
      11450
    ],
    "mapped",
    [
      11451
    ]
  ],
  [
    [
      11451,
      11451
    ],
    "valid"
  ],
  [
    [
      11452,
      11452
    ],
    "mapped",
    [
      11453
    ]
  ],
  [
    [
      11453,
      11453
    ],
    "valid"
  ],
  [
    [
      11454,
      11454
    ],
    "mapped",
    [
      11455
    ]
  ],
  [
    [
      11455,
      11455
    ],
    "valid"
  ],
  [
    [
      11456,
      11456
    ],
    "mapped",
    [
      11457
    ]
  ],
  [
    [
      11457,
      11457
    ],
    "valid"
  ],
  [
    [
      11458,
      11458
    ],
    "mapped",
    [
      11459
    ]
  ],
  [
    [
      11459,
      11459
    ],
    "valid"
  ],
  [
    [
      11460,
      11460
    ],
    "mapped",
    [
      11461
    ]
  ],
  [
    [
      11461,
      11461
    ],
    "valid"
  ],
  [
    [
      11462,
      11462
    ],
    "mapped",
    [
      11463
    ]
  ],
  [
    [
      11463,
      11463
    ],
    "valid"
  ],
  [
    [
      11464,
      11464
    ],
    "mapped",
    [
      11465
    ]
  ],
  [
    [
      11465,
      11465
    ],
    "valid"
  ],
  [
    [
      11466,
      11466
    ],
    "mapped",
    [
      11467
    ]
  ],
  [
    [
      11467,
      11467
    ],
    "valid"
  ],
  [
    [
      11468,
      11468
    ],
    "mapped",
    [
      11469
    ]
  ],
  [
    [
      11469,
      11469
    ],
    "valid"
  ],
  [
    [
      11470,
      11470
    ],
    "mapped",
    [
      11471
    ]
  ],
  [
    [
      11471,
      11471
    ],
    "valid"
  ],
  [
    [
      11472,
      11472
    ],
    "mapped",
    [
      11473
    ]
  ],
  [
    [
      11473,
      11473
    ],
    "valid"
  ],
  [
    [
      11474,
      11474
    ],
    "mapped",
    [
      11475
    ]
  ],
  [
    [
      11475,
      11475
    ],
    "valid"
  ],
  [
    [
      11476,
      11476
    ],
    "mapped",
    [
      11477
    ]
  ],
  [
    [
      11477,
      11477
    ],
    "valid"
  ],
  [
    [
      11478,
      11478
    ],
    "mapped",
    [
      11479
    ]
  ],
  [
    [
      11479,
      11479
    ],
    "valid"
  ],
  [
    [
      11480,
      11480
    ],
    "mapped",
    [
      11481
    ]
  ],
  [
    [
      11481,
      11481
    ],
    "valid"
  ],
  [
    [
      11482,
      11482
    ],
    "mapped",
    [
      11483
    ]
  ],
  [
    [
      11483,
      11483
    ],
    "valid"
  ],
  [
    [
      11484,
      11484
    ],
    "mapped",
    [
      11485
    ]
  ],
  [
    [
      11485,
      11485
    ],
    "valid"
  ],
  [
    [
      11486,
      11486
    ],
    "mapped",
    [
      11487
    ]
  ],
  [
    [
      11487,
      11487
    ],
    "valid"
  ],
  [
    [
      11488,
      11488
    ],
    "mapped",
    [
      11489
    ]
  ],
  [
    [
      11489,
      11489
    ],
    "valid"
  ],
  [
    [
      11490,
      11490
    ],
    "mapped",
    [
      11491
    ]
  ],
  [
    [
      11491,
      11492
    ],
    "valid"
  ],
  [
    [
      11493,
      11498
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11499,
      11499
    ],
    "mapped",
    [
      11500
    ]
  ],
  [
    [
      11500,
      11500
    ],
    "valid"
  ],
  [
    [
      11501,
      11501
    ],
    "mapped",
    [
      11502
    ]
  ],
  [
    [
      11502,
      11505
    ],
    "valid"
  ],
  [
    [
      11506,
      11506
    ],
    "mapped",
    [
      11507
    ]
  ],
  [
    [
      11507,
      11507
    ],
    "valid"
  ],
  [
    [
      11508,
      11512
    ],
    "disallowed"
  ],
  [
    [
      11513,
      11519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11520,
      11557
    ],
    "valid"
  ],
  [
    [
      11558,
      11558
    ],
    "disallowed"
  ],
  [
    [
      11559,
      11559
    ],
    "valid"
  ],
  [
    [
      11560,
      11564
    ],
    "disallowed"
  ],
  [
    [
      11565,
      11565
    ],
    "valid"
  ],
  [
    [
      11566,
      11567
    ],
    "disallowed"
  ],
  [
    [
      11568,
      11621
    ],
    "valid"
  ],
  [
    [
      11622,
      11623
    ],
    "valid"
  ],
  [
    [
      11624,
      11630
    ],
    "disallowed"
  ],
  [
    [
      11631,
      11631
    ],
    "mapped",
    [
      11617
    ]
  ],
  [
    [
      11632,
      11632
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11633,
      11646
    ],
    "disallowed"
  ],
  [
    [
      11647,
      11647
    ],
    "valid"
  ],
  [
    [
      11648,
      11670
    ],
    "valid"
  ],
  [
    [
      11671,
      11679
    ],
    "disallowed"
  ],
  [
    [
      11680,
      11686
    ],
    "valid"
  ],
  [
    [
      11687,
      11687
    ],
    "disallowed"
  ],
  [
    [
      11688,
      11694
    ],
    "valid"
  ],
  [
    [
      11695,
      11695
    ],
    "disallowed"
  ],
  [
    [
      11696,
      11702
    ],
    "valid"
  ],
  [
    [
      11703,
      11703
    ],
    "disallowed"
  ],
  [
    [
      11704,
      11710
    ],
    "valid"
  ],
  [
    [
      11711,
      11711
    ],
    "disallowed"
  ],
  [
    [
      11712,
      11718
    ],
    "valid"
  ],
  [
    [
      11719,
      11719
    ],
    "disallowed"
  ],
  [
    [
      11720,
      11726
    ],
    "valid"
  ],
  [
    [
      11727,
      11727
    ],
    "disallowed"
  ],
  [
    [
      11728,
      11734
    ],
    "valid"
  ],
  [
    [
      11735,
      11735
    ],
    "disallowed"
  ],
  [
    [
      11736,
      11742
    ],
    "valid"
  ],
  [
    [
      11743,
      11743
    ],
    "disallowed"
  ],
  [
    [
      11744,
      11775
    ],
    "valid"
  ],
  [
    [
      11776,
      11799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11800,
      11803
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11804,
      11805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11806,
      11822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11823,
      11823
    ],
    "valid"
  ],
  [
    [
      11824,
      11824
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11825,
      11825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11826,
      11835
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11836,
      11842
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11843,
      11903
    ],
    "disallowed"
  ],
  [
    [
      11904,
      11929
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11930,
      11930
    ],
    "disallowed"
  ],
  [
    [
      11931,
      11934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11935,
      11935
    ],
    "mapped",
    [
      27597
    ]
  ],
  [
    [
      11936,
      12018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12019,
      12019
    ],
    "mapped",
    [
      40863
    ]
  ],
  [
    [
      12020,
      12031
    ],
    "disallowed"
  ],
  [
    [
      12032,
      12032
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12033,
      12033
    ],
    "mapped",
    [
      20008
    ]
  ],
  [
    [
      12034,
      12034
    ],
    "mapped",
    [
      20022
    ]
  ],
  [
    [
      12035,
      12035
    ],
    "mapped",
    [
      20031
    ]
  ],
  [
    [
      12036,
      12036
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12037,
      12037
    ],
    "mapped",
    [
      20101
    ]
  ],
  [
    [
      12038,
      12038
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12039,
      12039
    ],
    "mapped",
    [
      20128
    ]
  ],
  [
    [
      12040,
      12040
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12041,
      12041
    ],
    "mapped",
    [
      20799
    ]
  ],
  [
    [
      12042,
      12042
    ],
    "mapped",
    [
      20837
    ]
  ],
  [
    [
      12043,
      12043
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12044,
      12044
    ],
    "mapped",
    [
      20866
    ]
  ],
  [
    [
      12045,
      12045
    ],
    "mapped",
    [
      20886
    ]
  ],
  [
    [
      12046,
      12046
    ],
    "mapped",
    [
      20907
    ]
  ],
  [
    [
      12047,
      12047
    ],
    "mapped",
    [
      20960
    ]
  ],
  [
    [
      12048,
      12048
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      12049,
      12049
    ],
    "mapped",
    [
      20992
    ]
  ],
  [
    [
      12050,
      12050
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      12051,
      12051
    ],
    "mapped",
    [
      21241
    ]
  ],
  [
    [
      12052,
      12052
    ],
    "mapped",
    [
      21269
    ]
  ],
  [
    [
      12053,
      12053
    ],
    "mapped",
    [
      21274
    ]
  ],
  [
    [
      12054,
      12054
    ],
    "mapped",
    [
      21304
    ]
  ],
  [
    [
      12055,
      12055
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12056,
      12056
    ],
    "mapped",
    [
      21340
    ]
  ],
  [
    [
      12057,
      12057
    ],
    "mapped",
    [
      21353
    ]
  ],
  [
    [
      12058,
      12058
    ],
    "mapped",
    [
      21378
    ]
  ],
  [
    [
      12059,
      12059
    ],
    "mapped",
    [
      21430
    ]
  ],
  [
    [
      12060,
      12060
    ],
    "mapped",
    [
      21448
    ]
  ],
  [
    [
      12061,
      12061
    ],
    "mapped",
    [
      21475
    ]
  ],
  [
    [
      12062,
      12062
    ],
    "mapped",
    [
      22231
    ]
  ],
  [
    [
      12063,
      12063
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12064,
      12064
    ],
    "mapped",
    [
      22763
    ]
  ],
  [
    [
      12065,
      12065
    ],
    "mapped",
    [
      22786
    ]
  ],
  [
    [
      12066,
      12066
    ],
    "mapped",
    [
      22794
    ]
  ],
  [
    [
      12067,
      12067
    ],
    "mapped",
    [
      22805
    ]
  ],
  [
    [
      12068,
      12068
    ],
    "mapped",
    [
      22823
    ]
  ],
  [
    [
      12069,
      12069
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12070,
      12070
    ],
    "mapped",
    [
      23376
    ]
  ],
  [
    [
      12071,
      12071
    ],
    "mapped",
    [
      23424
    ]
  ],
  [
    [
      12072,
      12072
    ],
    "mapped",
    [
      23544
    ]
  ],
  [
    [
      12073,
      12073
    ],
    "mapped",
    [
      23567
    ]
  ],
  [
    [
      12074,
      12074
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      12075,
      12075
    ],
    "mapped",
    [
      23608
    ]
  ],
  [
    [
      12076,
      12076
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      12077,
      12077
    ],
    "mapped",
    [
      23665
    ]
  ],
  [
    [
      12078,
      12078
    ],
    "mapped",
    [
      24027
    ]
  ],
  [
    [
      12079,
      12079
    ],
    "mapped",
    [
      24037
    ]
  ],
  [
    [
      12080,
      12080
    ],
    "mapped",
    [
      24049
    ]
  ],
  [
    [
      12081,
      12081
    ],
    "mapped",
    [
      24062
    ]
  ],
  [
    [
      12082,
      12082
    ],
    "mapped",
    [
      24178
    ]
  ],
  [
    [
      12083,
      12083
    ],
    "mapped",
    [
      24186
    ]
  ],
  [
    [
      12084,
      12084
    ],
    "mapped",
    [
      24191
    ]
  ],
  [
    [
      12085,
      12085
    ],
    "mapped",
    [
      24308
    ]
  ],
  [
    [
      12086,
      12086
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      12087,
      12087
    ],
    "mapped",
    [
      24331
    ]
  ],
  [
    [
      12088,
      12088
    ],
    "mapped",
    [
      24339
    ]
  ],
  [
    [
      12089,
      12089
    ],
    "mapped",
    [
      24400
    ]
  ],
  [
    [
      12090,
      12090
    ],
    "mapped",
    [
      24417
    ]
  ],
  [
    [
      12091,
      12091
    ],
    "mapped",
    [
      24435
    ]
  ],
  [
    [
      12092,
      12092
    ],
    "mapped",
    [
      24515
    ]
  ],
  [
    [
      12093,
      12093
    ],
    "mapped",
    [
      25096
    ]
  ],
  [
    [
      12094,
      12094
    ],
    "mapped",
    [
      25142
    ]
  ],
  [
    [
      12095,
      12095
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      12096,
      12096
    ],
    "mapped",
    [
      25903
    ]
  ],
  [
    [
      12097,
      12097
    ],
    "mapped",
    [
      25908
    ]
  ],
  [
    [
      12098,
      12098
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12099,
      12099
    ],
    "mapped",
    [
      26007
    ]
  ],
  [
    [
      12100,
      12100
    ],
    "mapped",
    [
      26020
    ]
  ],
  [
    [
      12101,
      12101
    ],
    "mapped",
    [
      26041
    ]
  ],
  [
    [
      12102,
      12102
    ],
    "mapped",
    [
      26080
    ]
  ],
  [
    [
      12103,
      12103
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12104,
      12104
    ],
    "mapped",
    [
      26352
    ]
  ],
  [
    [
      12105,
      12105
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12106,
      12106
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12107,
      12107
    ],
    "mapped",
    [
      27424
    ]
  ],
  [
    [
      12108,
      12108
    ],
    "mapped",
    [
      27490
    ]
  ],
  [
    [
      12109,
      12109
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      12110,
      12110
    ],
    "mapped",
    [
      27571
    ]
  ],
  [
    [
      12111,
      12111
    ],
    "mapped",
    [
      27595
    ]
  ],
  [
    [
      12112,
      12112
    ],
    "mapped",
    [
      27604
    ]
  ],
  [
    [
      12113,
      12113
    ],
    "mapped",
    [
      27611
    ]
  ],
  [
    [
      12114,
      12114
    ],
    "mapped",
    [
      27663
    ]
  ],
  [
    [
      12115,
      12115
    ],
    "mapped",
    [
      27668
    ]
  ],
  [
    [
      12116,
      12116
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12117,
      12117
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12118,
      12118
    ],
    "mapped",
    [
      29226
    ]
  ],
  [
    [
      12119,
      12119
    ],
    "mapped",
    [
      29238
    ]
  ],
  [
    [
      12120,
      12120
    ],
    "mapped",
    [
      29243
    ]
  ],
  [
    [
      12121,
      12121
    ],
    "mapped",
    [
      29247
    ]
  ],
  [
    [
      12122,
      12122
    ],
    "mapped",
    [
      29255
    ]
  ],
  [
    [
      12123,
      12123
    ],
    "mapped",
    [
      29273
    ]
  ],
  [
    [
      12124,
      12124
    ],
    "mapped",
    [
      29275
    ]
  ],
  [
    [
      12125,
      12125
    ],
    "mapped",
    [
      29356
    ]
  ],
  [
    [
      12126,
      12126
    ],
    "mapped",
    [
      29572
    ]
  ],
  [
    [
      12127,
      12127
    ],
    "mapped",
    [
      29577
    ]
  ],
  [
    [
      12128,
      12128
    ],
    "mapped",
    [
      29916
    ]
  ],
  [
    [
      12129,
      12129
    ],
    "mapped",
    [
      29926
    ]
  ],
  [
    [
      12130,
      12130
    ],
    "mapped",
    [
      29976
    ]
  ],
  [
    [
      12131,
      12131
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      12132,
      12132
    ],
    "mapped",
    [
      29992
    ]
  ],
  [
    [
      12133,
      12133
    ],
    "mapped",
    [
      3e4
    ]
  ],
  [
    [
      12134,
      12134
    ],
    "mapped",
    [
      30091
    ]
  ],
  [
    [
      12135,
      12135
    ],
    "mapped",
    [
      30098
    ]
  ],
  [
    [
      12136,
      12136
    ],
    "mapped",
    [
      30326
    ]
  ],
  [
    [
      12137,
      12137
    ],
    "mapped",
    [
      30333
    ]
  ],
  [
    [
      12138,
      12138
    ],
    "mapped",
    [
      30382
    ]
  ],
  [
    [
      12139,
      12139
    ],
    "mapped",
    [
      30399
    ]
  ],
  [
    [
      12140,
      12140
    ],
    "mapped",
    [
      30446
    ]
  ],
  [
    [
      12141,
      12141
    ],
    "mapped",
    [
      30683
    ]
  ],
  [
    [
      12142,
      12142
    ],
    "mapped",
    [
      30690
    ]
  ],
  [
    [
      12143,
      12143
    ],
    "mapped",
    [
      30707
    ]
  ],
  [
    [
      12144,
      12144
    ],
    "mapped",
    [
      31034
    ]
  ],
  [
    [
      12145,
      12145
    ],
    "mapped",
    [
      31160
    ]
  ],
  [
    [
      12146,
      12146
    ],
    "mapped",
    [
      31166
    ]
  ],
  [
    [
      12147,
      12147
    ],
    "mapped",
    [
      31348
    ]
  ],
  [
    [
      12148,
      12148
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      12149,
      12149
    ],
    "mapped",
    [
      31481
    ]
  ],
  [
    [
      12150,
      12150
    ],
    "mapped",
    [
      31859
    ]
  ],
  [
    [
      12151,
      12151
    ],
    "mapped",
    [
      31992
    ]
  ],
  [
    [
      12152,
      12152
    ],
    "mapped",
    [
      32566
    ]
  ],
  [
    [
      12153,
      12153
    ],
    "mapped",
    [
      32593
    ]
  ],
  [
    [
      12154,
      12154
    ],
    "mapped",
    [
      32650
    ]
  ],
  [
    [
      12155,
      12155
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      12156,
      12156
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      12157,
      12157
    ],
    "mapped",
    [
      32780
    ]
  ],
  [
    [
      12158,
      12158
    ],
    "mapped",
    [
      32786
    ]
  ],
  [
    [
      12159,
      12159
    ],
    "mapped",
    [
      32819
    ]
  ],
  [
    [
      12160,
      12160
    ],
    "mapped",
    [
      32895
    ]
  ],
  [
    [
      12161,
      12161
    ],
    "mapped",
    [
      32905
    ]
  ],
  [
    [
      12162,
      12162
    ],
    "mapped",
    [
      33251
    ]
  ],
  [
    [
      12163,
      12163
    ],
    "mapped",
    [
      33258
    ]
  ],
  [
    [
      12164,
      12164
    ],
    "mapped",
    [
      33267
    ]
  ],
  [
    [
      12165,
      12165
    ],
    "mapped",
    [
      33276
    ]
  ],
  [
    [
      12166,
      12166
    ],
    "mapped",
    [
      33292
    ]
  ],
  [
    [
      12167,
      12167
    ],
    "mapped",
    [
      33307
    ]
  ],
  [
    [
      12168,
      12168
    ],
    "mapped",
    [
      33311
    ]
  ],
  [
    [
      12169,
      12169
    ],
    "mapped",
    [
      33390
    ]
  ],
  [
    [
      12170,
      12170
    ],
    "mapped",
    [
      33394
    ]
  ],
  [
    [
      12171,
      12171
    ],
    "mapped",
    [
      33400
    ]
  ],
  [
    [
      12172,
      12172
    ],
    "mapped",
    [
      34381
    ]
  ],
  [
    [
      12173,
      12173
    ],
    "mapped",
    [
      34411
    ]
  ],
  [
    [
      12174,
      12174
    ],
    "mapped",
    [
      34880
    ]
  ],
  [
    [
      12175,
      12175
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      12176,
      12176
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      12177,
      12177
    ],
    "mapped",
    [
      35198
    ]
  ],
  [
    [
      12178,
      12178
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      12179,
      12179
    ],
    "mapped",
    [
      35282
    ]
  ],
  [
    [
      12180,
      12180
    ],
    "mapped",
    [
      35328
    ]
  ],
  [
    [
      12181,
      12181
    ],
    "mapped",
    [
      35895
    ]
  ],
  [
    [
      12182,
      12182
    ],
    "mapped",
    [
      35910
    ]
  ],
  [
    [
      12183,
      12183
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      12184,
      12184
    ],
    "mapped",
    [
      35960
    ]
  ],
  [
    [
      12185,
      12185
    ],
    "mapped",
    [
      35997
    ]
  ],
  [
    [
      12186,
      12186
    ],
    "mapped",
    [
      36196
    ]
  ],
  [
    [
      12187,
      12187
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      12188,
      12188
    ],
    "mapped",
    [
      36275
    ]
  ],
  [
    [
      12189,
      12189
    ],
    "mapped",
    [
      36523
    ]
  ],
  [
    [
      12190,
      12190
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      12191,
      12191
    ],
    "mapped",
    [
      36763
    ]
  ],
  [
    [
      12192,
      12192
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      12193,
      12193
    ],
    "mapped",
    [
      36789
    ]
  ],
  [
    [
      12194,
      12194
    ],
    "mapped",
    [
      37009
    ]
  ],
  [
    [
      12195,
      12195
    ],
    "mapped",
    [
      37193
    ]
  ],
  [
    [
      12196,
      12196
    ],
    "mapped",
    [
      37318
    ]
  ],
  [
    [
      12197,
      12197
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      12198,
      12198
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12199,
      12199
    ],
    "mapped",
    [
      38263
    ]
  ],
  [
    [
      12200,
      12200
    ],
    "mapped",
    [
      38272
    ]
  ],
  [
    [
      12201,
      12201
    ],
    "mapped",
    [
      38428
    ]
  ],
  [
    [
      12202,
      12202
    ],
    "mapped",
    [
      38582
    ]
  ],
  [
    [
      12203,
      12203
    ],
    "mapped",
    [
      38585
    ]
  ],
  [
    [
      12204,
      12204
    ],
    "mapped",
    [
      38632
    ]
  ],
  [
    [
      12205,
      12205
    ],
    "mapped",
    [
      38737
    ]
  ],
  [
    [
      12206,
      12206
    ],
    "mapped",
    [
      38750
    ]
  ],
  [
    [
      12207,
      12207
    ],
    "mapped",
    [
      38754
    ]
  ],
  [
    [
      12208,
      12208
    ],
    "mapped",
    [
      38761
    ]
  ],
  [
    [
      12209,
      12209
    ],
    "mapped",
    [
      38859
    ]
  ],
  [
    [
      12210,
      12210
    ],
    "mapped",
    [
      38893
    ]
  ],
  [
    [
      12211,
      12211
    ],
    "mapped",
    [
      38899
    ]
  ],
  [
    [
      12212,
      12212
    ],
    "mapped",
    [
      38913
    ]
  ],
  [
    [
      12213,
      12213
    ],
    "mapped",
    [
      39080
    ]
  ],
  [
    [
      12214,
      12214
    ],
    "mapped",
    [
      39131
    ]
  ],
  [
    [
      12215,
      12215
    ],
    "mapped",
    [
      39135
    ]
  ],
  [
    [
      12216,
      12216
    ],
    "mapped",
    [
      39318
    ]
  ],
  [
    [
      12217,
      12217
    ],
    "mapped",
    [
      39321
    ]
  ],
  [
    [
      12218,
      12218
    ],
    "mapped",
    [
      39340
    ]
  ],
  [
    [
      12219,
      12219
    ],
    "mapped",
    [
      39592
    ]
  ],
  [
    [
      12220,
      12220
    ],
    "mapped",
    [
      39640
    ]
  ],
  [
    [
      12221,
      12221
    ],
    "mapped",
    [
      39647
    ]
  ],
  [
    [
      12222,
      12222
    ],
    "mapped",
    [
      39717
    ]
  ],
  [
    [
      12223,
      12223
    ],
    "mapped",
    [
      39727
    ]
  ],
  [
    [
      12224,
      12224
    ],
    "mapped",
    [
      39730
    ]
  ],
  [
    [
      12225,
      12225
    ],
    "mapped",
    [
      39740
    ]
  ],
  [
    [
      12226,
      12226
    ],
    "mapped",
    [
      39770
    ]
  ],
  [
    [
      12227,
      12227
    ],
    "mapped",
    [
      40165
    ]
  ],
  [
    [
      12228,
      12228
    ],
    "mapped",
    [
      40565
    ]
  ],
  [
    [
      12229,
      12229
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      12230,
      12230
    ],
    "mapped",
    [
      40613
    ]
  ],
  [
    [
      12231,
      12231
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      12232,
      12232
    ],
    "mapped",
    [
      40643
    ]
  ],
  [
    [
      12233,
      12233
    ],
    "mapped",
    [
      40653
    ]
  ],
  [
    [
      12234,
      12234
    ],
    "mapped",
    [
      40657
    ]
  ],
  [
    [
      12235,
      12235
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      12236,
      12236
    ],
    "mapped",
    [
      40701
    ]
  ],
  [
    [
      12237,
      12237
    ],
    "mapped",
    [
      40718
    ]
  ],
  [
    [
      12238,
      12238
    ],
    "mapped",
    [
      40723
    ]
  ],
  [
    [
      12239,
      12239
    ],
    "mapped",
    [
      40736
    ]
  ],
  [
    [
      12240,
      12240
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      12241,
      12241
    ],
    "mapped",
    [
      40778
    ]
  ],
  [
    [
      12242,
      12242
    ],
    "mapped",
    [
      40786
    ]
  ],
  [
    [
      12243,
      12243
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      12244,
      12244
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      12245,
      12245
    ],
    "mapped",
    [
      40864
    ]
  ],
  [
    [
      12246,
      12271
    ],
    "disallowed"
  ],
  [
    [
      12272,
      12283
    ],
    "disallowed"
  ],
  [
    [
      12284,
      12287
    ],
    "disallowed"
  ],
  [
    [
      12288,
      12288
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      12289,
      12289
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12290,
      12290
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      12291,
      12292
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12293,
      12295
    ],
    "valid"
  ],
  [
    [
      12296,
      12329
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12330,
      12333
    ],
    "valid"
  ],
  [
    [
      12334,
      12341
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12342,
      12342
    ],
    "mapped",
    [
      12306
    ]
  ],
  [
    [
      12343,
      12343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12344,
      12344
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12345,
      12345
    ],
    "mapped",
    [
      21316
    ]
  ],
  [
    [
      12346,
      12346
    ],
    "mapped",
    [
      21317
    ]
  ],
  [
    [
      12347,
      12347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12348,
      12348
    ],
    "valid"
  ],
  [
    [
      12349,
      12349
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12350,
      12350
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12351,
      12351
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12352,
      12352
    ],
    "disallowed"
  ],
  [
    [
      12353,
      12436
    ],
    "valid"
  ],
  [
    [
      12437,
      12438
    ],
    "valid"
  ],
  [
    [
      12439,
      12440
    ],
    "disallowed"
  ],
  [
    [
      12441,
      12442
    ],
    "valid"
  ],
  [
    [
      12443,
      12443
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12441
    ]
  ],
  [
    [
      12444,
      12444
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12442
    ]
  ],
  [
    [
      12445,
      12446
    ],
    "valid"
  ],
  [
    [
      12447,
      12447
    ],
    "mapped",
    [
      12424,
      12426
    ]
  ],
  [
    [
      12448,
      12448
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12449,
      12542
    ],
    "valid"
  ],
  [
    [
      12543,
      12543
    ],
    "mapped",
    [
      12467,
      12488
    ]
  ],
  [
    [
      12544,
      12548
    ],
    "disallowed"
  ],
  [
    [
      12549,
      12588
    ],
    "valid"
  ],
  [
    [
      12589,
      12589
    ],
    "valid"
  ],
  [
    [
      12590,
      12592
    ],
    "disallowed"
  ],
  [
    [
      12593,
      12593
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12594,
      12594
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      12595,
      12595
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      12596,
      12596
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12597,
      12597
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      12598,
      12598
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      12599,
      12599
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12600,
      12600
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      12601,
      12601
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12602,
      12602
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      12603,
      12603
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      12604,
      12604
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      12605,
      12605
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      12606,
      12606
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      12607,
      12607
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      12608,
      12608
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      12609,
      12609
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12610,
      12610
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12611,
      12611
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      12612,
      12612
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      12613,
      12613
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12614,
      12614
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      12615,
      12615
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12616,
      12616
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12617,
      12617
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      12618,
      12618
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12619,
      12619
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12620,
      12620
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12621,
      12621
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12622,
      12622
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12623,
      12623
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      12624,
      12624
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      12625,
      12625
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      12626,
      12626
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      12627,
      12627
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      12628,
      12628
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      12629,
      12629
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      12630,
      12630
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      12631,
      12631
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      12632,
      12632
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      12633,
      12633
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      12634,
      12634
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      12635,
      12635
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      12636,
      12636
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      12637,
      12637
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      12638,
      12638
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      12639,
      12639
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      12640,
      12640
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      12641,
      12641
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      12642,
      12642
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      12643,
      12643
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      12644,
      12644
    ],
    "disallowed"
  ],
  [
    [
      12645,
      12645
    ],
    "mapped",
    [
      4372
    ]
  ],
  [
    [
      12646,
      12646
    ],
    "mapped",
    [
      4373
    ]
  ],
  [
    [
      12647,
      12647
    ],
    "mapped",
    [
      4551
    ]
  ],
  [
    [
      12648,
      12648
    ],
    "mapped",
    [
      4552
    ]
  ],
  [
    [
      12649,
      12649
    ],
    "mapped",
    [
      4556
    ]
  ],
  [
    [
      12650,
      12650
    ],
    "mapped",
    [
      4558
    ]
  ],
  [
    [
      12651,
      12651
    ],
    "mapped",
    [
      4563
    ]
  ],
  [
    [
      12652,
      12652
    ],
    "mapped",
    [
      4567
    ]
  ],
  [
    [
      12653,
      12653
    ],
    "mapped",
    [
      4569
    ]
  ],
  [
    [
      12654,
      12654
    ],
    "mapped",
    [
      4380
    ]
  ],
  [
    [
      12655,
      12655
    ],
    "mapped",
    [
      4573
    ]
  ],
  [
    [
      12656,
      12656
    ],
    "mapped",
    [
      4575
    ]
  ],
  [
    [
      12657,
      12657
    ],
    "mapped",
    [
      4381
    ]
  ],
  [
    [
      12658,
      12658
    ],
    "mapped",
    [
      4382
    ]
  ],
  [
    [
      12659,
      12659
    ],
    "mapped",
    [
      4384
    ]
  ],
  [
    [
      12660,
      12660
    ],
    "mapped",
    [
      4386
    ]
  ],
  [
    [
      12661,
      12661
    ],
    "mapped",
    [
      4387
    ]
  ],
  [
    [
      12662,
      12662
    ],
    "mapped",
    [
      4391
    ]
  ],
  [
    [
      12663,
      12663
    ],
    "mapped",
    [
      4393
    ]
  ],
  [
    [
      12664,
      12664
    ],
    "mapped",
    [
      4395
    ]
  ],
  [
    [
      12665,
      12665
    ],
    "mapped",
    [
      4396
    ]
  ],
  [
    [
      12666,
      12666
    ],
    "mapped",
    [
      4397
    ]
  ],
  [
    [
      12667,
      12667
    ],
    "mapped",
    [
      4398
    ]
  ],
  [
    [
      12668,
      12668
    ],
    "mapped",
    [
      4399
    ]
  ],
  [
    [
      12669,
      12669
    ],
    "mapped",
    [
      4402
    ]
  ],
  [
    [
      12670,
      12670
    ],
    "mapped",
    [
      4406
    ]
  ],
  [
    [
      12671,
      12671
    ],
    "mapped",
    [
      4416
    ]
  ],
  [
    [
      12672,
      12672
    ],
    "mapped",
    [
      4423
    ]
  ],
  [
    [
      12673,
      12673
    ],
    "mapped",
    [
      4428
    ]
  ],
  [
    [
      12674,
      12674
    ],
    "mapped",
    [
      4593
    ]
  ],
  [
    [
      12675,
      12675
    ],
    "mapped",
    [
      4594
    ]
  ],
  [
    [
      12676,
      12676
    ],
    "mapped",
    [
      4439
    ]
  ],
  [
    [
      12677,
      12677
    ],
    "mapped",
    [
      4440
    ]
  ],
  [
    [
      12678,
      12678
    ],
    "mapped",
    [
      4441
    ]
  ],
  [
    [
      12679,
      12679
    ],
    "mapped",
    [
      4484
    ]
  ],
  [
    [
      12680,
      12680
    ],
    "mapped",
    [
      4485
    ]
  ],
  [
    [
      12681,
      12681
    ],
    "mapped",
    [
      4488
    ]
  ],
  [
    [
      12682,
      12682
    ],
    "mapped",
    [
      4497
    ]
  ],
  [
    [
      12683,
      12683
    ],
    "mapped",
    [
      4498
    ]
  ],
  [
    [
      12684,
      12684
    ],
    "mapped",
    [
      4500
    ]
  ],
  [
    [
      12685,
      12685
    ],
    "mapped",
    [
      4510
    ]
  ],
  [
    [
      12686,
      12686
    ],
    "mapped",
    [
      4513
    ]
  ],
  [
    [
      12687,
      12687
    ],
    "disallowed"
  ],
  [
    [
      12688,
      12689
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12690,
      12690
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12691,
      12691
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12692,
      12692
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12693,
      12693
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12694,
      12694
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12695,
      12695
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12696,
      12696
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12697,
      12697
    ],
    "mapped",
    [
      30002
    ]
  ],
  [
    [
      12698,
      12698
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12699,
      12699
    ],
    "mapped",
    [
      19993
    ]
  ],
  [
    [
      12700,
      12700
    ],
    "mapped",
    [
      19969
    ]
  ],
  [
    [
      12701,
      12701
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      12702,
      12702
    ],
    "mapped",
    [
      22320
    ]
  ],
  [
    [
      12703,
      12703
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12704,
      12727
    ],
    "valid"
  ],
  [
    [
      12728,
      12730
    ],
    "valid"
  ],
  [
    [
      12731,
      12735
    ],
    "disallowed"
  ],
  [
    [
      12736,
      12751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12752,
      12771
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12772,
      12783
    ],
    "disallowed"
  ],
  [
    [
      12784,
      12799
    ],
    "valid"
  ],
  [
    [
      12800,
      12800
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4352,
      41
    ]
  ],
  [
    [
      12801,
      12801
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4354,
      41
    ]
  ],
  [
    [
      12802,
      12802
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4355,
      41
    ]
  ],
  [
    [
      12803,
      12803
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4357,
      41
    ]
  ],
  [
    [
      12804,
      12804
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4358,
      41
    ]
  ],
  [
    [
      12805,
      12805
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4359,
      41
    ]
  ],
  [
    [
      12806,
      12806
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4361,
      41
    ]
  ],
  [
    [
      12807,
      12807
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4363,
      41
    ]
  ],
  [
    [
      12808,
      12808
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4364,
      41
    ]
  ],
  [
    [
      12809,
      12809
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4366,
      41
    ]
  ],
  [
    [
      12810,
      12810
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4367,
      41
    ]
  ],
  [
    [
      12811,
      12811
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4368,
      41
    ]
  ],
  [
    [
      12812,
      12812
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4369,
      41
    ]
  ],
  [
    [
      12813,
      12813
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4370,
      41
    ]
  ],
  [
    [
      12814,
      12814
    ],
    "disallowed_STD3_mapped",
    [
      40,
      44032,
      41
    ]
  ],
  [
    [
      12815,
      12815
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45208,
      41
    ]
  ],
  [
    [
      12816,
      12816
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45796,
      41
    ]
  ],
  [
    [
      12817,
      12817
    ],
    "disallowed_STD3_mapped",
    [
      40,
      46972,
      41
    ]
  ],
  [
    [
      12818,
      12818
    ],
    "disallowed_STD3_mapped",
    [
      40,
      47560,
      41
    ]
  ],
  [
    [
      12819,
      12819
    ],
    "disallowed_STD3_mapped",
    [
      40,
      48148,
      41
    ]
  ],
  [
    [
      12820,
      12820
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49324,
      41
    ]
  ],
  [
    [
      12821,
      12821
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50500,
      41
    ]
  ],
  [
    [
      12822,
      12822
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51088,
      41
    ]
  ],
  [
    [
      12823,
      12823
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52264,
      41
    ]
  ],
  [
    [
      12824,
      12824
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52852,
      41
    ]
  ],
  [
    [
      12825,
      12825
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53440,
      41
    ]
  ],
  [
    [
      12826,
      12826
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54028,
      41
    ]
  ],
  [
    [
      12827,
      12827
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54616,
      41
    ]
  ],
  [
    [
      12828,
      12828
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51452,
      41
    ]
  ],
  [
    [
      12829,
      12829
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      51204,
      41
    ]
  ],
  [
    [
      12830,
      12830
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      54980,
      41
    ]
  ],
  [
    [
      12831,
      12831
    ],
    "disallowed"
  ],
  [
    [
      12832,
      12832
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19968,
      41
    ]
  ],
  [
    [
      12833,
      12833
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20108,
      41
    ]
  ],
  [
    [
      12834,
      12834
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19977,
      41
    ]
  ],
  [
    [
      12835,
      12835
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22235,
      41
    ]
  ],
  [
    [
      12836,
      12836
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20116,
      41
    ]
  ],
  [
    [
      12837,
      12837
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20845,
      41
    ]
  ],
  [
    [
      12838,
      12838
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19971,
      41
    ]
  ],
  [
    [
      12839,
      12839
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20843,
      41
    ]
  ],
  [
    [
      12840,
      12840
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20061,
      41
    ]
  ],
  [
    [
      12841,
      12841
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21313,
      41
    ]
  ],
  [
    [
      12842,
      12842
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26376,
      41
    ]
  ],
  [
    [
      12843,
      12843
    ],
    "disallowed_STD3_mapped",
    [
      40,
      28779,
      41
    ]
  ],
  [
    [
      12844,
      12844
    ],
    "disallowed_STD3_mapped",
    [
      40,
      27700,
      41
    ]
  ],
  [
    [
      12845,
      12845
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26408,
      41
    ]
  ],
  [
    [
      12846,
      12846
    ],
    "disallowed_STD3_mapped",
    [
      40,
      37329,
      41
    ]
  ],
  [
    [
      12847,
      12847
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22303,
      41
    ]
  ],
  [
    [
      12848,
      12848
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26085,
      41
    ]
  ],
  [
    [
      12849,
      12849
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26666,
      41
    ]
  ],
  [
    [
      12850,
      12850
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26377,
      41
    ]
  ],
  [
    [
      12851,
      12851
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31038,
      41
    ]
  ],
  [
    [
      12852,
      12852
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21517,
      41
    ]
  ],
  [
    [
      12853,
      12853
    ],
    "disallowed_STD3_mapped",
    [
      40,
      29305,
      41
    ]
  ],
  [
    [
      12854,
      12854
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36001,
      41
    ]
  ],
  [
    [
      12855,
      12855
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31069,
      41
    ]
  ],
  [
    [
      12856,
      12856
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21172,
      41
    ]
  ],
  [
    [
      12857,
      12857
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20195,
      41
    ]
  ],
  [
    [
      12858,
      12858
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21628,
      41
    ]
  ],
  [
    [
      12859,
      12859
    ],
    "disallowed_STD3_mapped",
    [
      40,
      23398,
      41
    ]
  ],
  [
    [
      12860,
      12860
    ],
    "disallowed_STD3_mapped",
    [
      40,
      30435,
      41
    ]
  ],
  [
    [
      12861,
      12861
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20225,
      41
    ]
  ],
  [
    [
      12862,
      12862
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36039,
      41
    ]
  ],
  [
    [
      12863,
      12863
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21332,
      41
    ]
  ],
  [
    [
      12864,
      12864
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31085,
      41
    ]
  ],
  [
    [
      12865,
      12865
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20241,
      41
    ]
  ],
  [
    [
      12866,
      12866
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33258,
      41
    ]
  ],
  [
    [
      12867,
      12867
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33267,
      41
    ]
  ],
  [
    [
      12868,
      12868
    ],
    "mapped",
    [
      21839
    ]
  ],
  [
    [
      12869,
      12869
    ],
    "mapped",
    [
      24188
    ]
  ],
  [
    [
      12870,
      12870
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12871,
      12871
    ],
    "mapped",
    [
      31631
    ]
  ],
  [
    [
      12872,
      12879
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12880,
      12880
    ],
    "mapped",
    [
      112,
      116,
      101
    ]
  ],
  [
    [
      12881,
      12881
    ],
    "mapped",
    [
      50,
      49
    ]
  ],
  [
    [
      12882,
      12882
    ],
    "mapped",
    [
      50,
      50
    ]
  ],
  [
    [
      12883,
      12883
    ],
    "mapped",
    [
      50,
      51
    ]
  ],
  [
    [
      12884,
      12884
    ],
    "mapped",
    [
      50,
      52
    ]
  ],
  [
    [
      12885,
      12885
    ],
    "mapped",
    [
      50,
      53
    ]
  ],
  [
    [
      12886,
      12886
    ],
    "mapped",
    [
      50,
      54
    ]
  ],
  [
    [
      12887,
      12887
    ],
    "mapped",
    [
      50,
      55
    ]
  ],
  [
    [
      12888,
      12888
    ],
    "mapped",
    [
      50,
      56
    ]
  ],
  [
    [
      12889,
      12889
    ],
    "mapped",
    [
      50,
      57
    ]
  ],
  [
    [
      12890,
      12890
    ],
    "mapped",
    [
      51,
      48
    ]
  ],
  [
    [
      12891,
      12891
    ],
    "mapped",
    [
      51,
      49
    ]
  ],
  [
    [
      12892,
      12892
    ],
    "mapped",
    [
      51,
      50
    ]
  ],
  [
    [
      12893,
      12893
    ],
    "mapped",
    [
      51,
      51
    ]
  ],
  [
    [
      12894,
      12894
    ],
    "mapped",
    [
      51,
      52
    ]
  ],
  [
    [
      12895,
      12895
    ],
    "mapped",
    [
      51,
      53
    ]
  ],
  [
    [
      12896,
      12896
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12897,
      12897
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12898,
      12898
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12899,
      12899
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12900,
      12900
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12901,
      12901
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12902,
      12902
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12903,
      12903
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12904,
      12904
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12905,
      12905
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12906,
      12906
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12907,
      12907
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12908,
      12908
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12909,
      12909
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12910,
      12910
    ],
    "mapped",
    [
      44032
    ]
  ],
  [
    [
      12911,
      12911
    ],
    "mapped",
    [
      45208
    ]
  ],
  [
    [
      12912,
      12912
    ],
    "mapped",
    [
      45796
    ]
  ],
  [
    [
      12913,
      12913
    ],
    "mapped",
    [
      46972
    ]
  ],
  [
    [
      12914,
      12914
    ],
    "mapped",
    [
      47560
    ]
  ],
  [
    [
      12915,
      12915
    ],
    "mapped",
    [
      48148
    ]
  ],
  [
    [
      12916,
      12916
    ],
    "mapped",
    [
      49324
    ]
  ],
  [
    [
      12917,
      12917
    ],
    "mapped",
    [
      50500
    ]
  ],
  [
    [
      12918,
      12918
    ],
    "mapped",
    [
      51088
    ]
  ],
  [
    [
      12919,
      12919
    ],
    "mapped",
    [
      52264
    ]
  ],
  [
    [
      12920,
      12920
    ],
    "mapped",
    [
      52852
    ]
  ],
  [
    [
      12921,
      12921
    ],
    "mapped",
    [
      53440
    ]
  ],
  [
    [
      12922,
      12922
    ],
    "mapped",
    [
      54028
    ]
  ],
  [
    [
      12923,
      12923
    ],
    "mapped",
    [
      54616
    ]
  ],
  [
    [
      12924,
      12924
    ],
    "mapped",
    [
      52280,
      44256
    ]
  ],
  [
    [
      12925,
      12925
    ],
    "mapped",
    [
      51452,
      51032
    ]
  ],
  [
    [
      12926,
      12926
    ],
    "mapped",
    [
      50864
    ]
  ],
  [
    [
      12927,
      12927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12928,
      12928
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12929,
      12929
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12930,
      12930
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12931,
      12931
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12932,
      12932
    ],
    "mapped",
    [
      20116
    ]
  ],
  [
    [
      12933,
      12933
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      12934,
      12934
    ],
    "mapped",
    [
      19971
    ]
  ],
  [
    [
      12935,
      12935
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12936,
      12936
    ],
    "mapped",
    [
      20061
    ]
  ],
  [
    [
      12937,
      12937
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12938,
      12938
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12939,
      12939
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12940,
      12940
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12941,
      12941
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12942,
      12942
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12943,
      12943
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12944,
      12944
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12945,
      12945
    ],
    "mapped",
    [
      26666
    ]
  ],
  [
    [
      12946,
      12946
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      12947,
      12947
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      12948,
      12948
    ],
    "mapped",
    [
      21517
    ]
  ],
  [
    [
      12949,
      12949
    ],
    "mapped",
    [
      29305
    ]
  ],
  [
    [
      12950,
      12950
    ],
    "mapped",
    [
      36001
    ]
  ],
  [
    [
      12951,
      12951
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      12952,
      12952
    ],
    "mapped",
    [
      21172
    ]
  ],
  [
    [
      12953,
      12953
    ],
    "mapped",
    [
      31192
    ]
  ],
  [
    [
      12954,
      12954
    ],
    "mapped",
    [
      30007
    ]
  ],
  [
    [
      12955,
      12955
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12956,
      12956
    ],
    "mapped",
    [
      36969
    ]
  ],
  [
    [
      12957,
      12957
    ],
    "mapped",
    [
      20778
    ]
  ],
  [
    [
      12958,
      12958
    ],
    "mapped",
    [
      21360
    ]
  ],
  [
    [
      12959,
      12959
    ],
    "mapped",
    [
      27880
    ]
  ],
  [
    [
      12960,
      12960
    ],
    "mapped",
    [
      38917
    ]
  ],
  [
    [
      12961,
      12961
    ],
    "mapped",
    [
      20241
    ]
  ],
  [
    [
      12962,
      12962
    ],
    "mapped",
    [
      20889
    ]
  ],
  [
    [
      12963,
      12963
    ],
    "mapped",
    [
      27491
    ]
  ],
  [
    [
      12964,
      12964
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12965,
      12965
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12966,
      12966
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12967,
      12967
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      12968,
      12968
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      12969,
      12969
    ],
    "mapped",
    [
      21307
    ]
  ],
  [
    [
      12970,
      12970
    ],
    "mapped",
    [
      23447
    ]
  ],
  [
    [
      12971,
      12971
    ],
    "mapped",
    [
      23398
    ]
  ],
  [
    [
      12972,
      12972
    ],
    "mapped",
    [
      30435
    ]
  ],
  [
    [
      12973,
      12973
    ],
    "mapped",
    [
      20225
    ]
  ],
  [
    [
      12974,
      12974
    ],
    "mapped",
    [
      36039
    ]
  ],
  [
    [
      12975,
      12975
    ],
    "mapped",
    [
      21332
    ]
  ],
  [
    [
      12976,
      12976
    ],
    "mapped",
    [
      22812
    ]
  ],
  [
    [
      12977,
      12977
    ],
    "mapped",
    [
      51,
      54
    ]
  ],
  [
    [
      12978,
      12978
    ],
    "mapped",
    [
      51,
      55
    ]
  ],
  [
    [
      12979,
      12979
    ],
    "mapped",
    [
      51,
      56
    ]
  ],
  [
    [
      12980,
      12980
    ],
    "mapped",
    [
      51,
      57
    ]
  ],
  [
    [
      12981,
      12981
    ],
    "mapped",
    [
      52,
      48
    ]
  ],
  [
    [
      12982,
      12982
    ],
    "mapped",
    [
      52,
      49
    ]
  ],
  [
    [
      12983,
      12983
    ],
    "mapped",
    [
      52,
      50
    ]
  ],
  [
    [
      12984,
      12984
    ],
    "mapped",
    [
      52,
      51
    ]
  ],
  [
    [
      12985,
      12985
    ],
    "mapped",
    [
      52,
      52
    ]
  ],
  [
    [
      12986,
      12986
    ],
    "mapped",
    [
      52,
      53
    ]
  ],
  [
    [
      12987,
      12987
    ],
    "mapped",
    [
      52,
      54
    ]
  ],
  [
    [
      12988,
      12988
    ],
    "mapped",
    [
      52,
      55
    ]
  ],
  [
    [
      12989,
      12989
    ],
    "mapped",
    [
      52,
      56
    ]
  ],
  [
    [
      12990,
      12990
    ],
    "mapped",
    [
      52,
      57
    ]
  ],
  [
    [
      12991,
      12991
    ],
    "mapped",
    [
      53,
      48
    ]
  ],
  [
    [
      12992,
      12992
    ],
    "mapped",
    [
      49,
      26376
    ]
  ],
  [
    [
      12993,
      12993
    ],
    "mapped",
    [
      50,
      26376
    ]
  ],
  [
    [
      12994,
      12994
    ],
    "mapped",
    [
      51,
      26376
    ]
  ],
  [
    [
      12995,
      12995
    ],
    "mapped",
    [
      52,
      26376
    ]
  ],
  [
    [
      12996,
      12996
    ],
    "mapped",
    [
      53,
      26376
    ]
  ],
  [
    [
      12997,
      12997
    ],
    "mapped",
    [
      54,
      26376
    ]
  ],
  [
    [
      12998,
      12998
    ],
    "mapped",
    [
      55,
      26376
    ]
  ],
  [
    [
      12999,
      12999
    ],
    "mapped",
    [
      56,
      26376
    ]
  ],
  [
    [
      13e3,
      13e3
    ],
    "mapped",
    [
      57,
      26376
    ]
  ],
  [
    [
      13001,
      13001
    ],
    "mapped",
    [
      49,
      48,
      26376
    ]
  ],
  [
    [
      13002,
      13002
    ],
    "mapped",
    [
      49,
      49,
      26376
    ]
  ],
  [
    [
      13003,
      13003
    ],
    "mapped",
    [
      49,
      50,
      26376
    ]
  ],
  [
    [
      13004,
      13004
    ],
    "mapped",
    [
      104,
      103
    ]
  ],
  [
    [
      13005,
      13005
    ],
    "mapped",
    [
      101,
      114,
      103
    ]
  ],
  [
    [
      13006,
      13006
    ],
    "mapped",
    [
      101,
      118
    ]
  ],
  [
    [
      13007,
      13007
    ],
    "mapped",
    [
      108,
      116,
      100
    ]
  ],
  [
    [
      13008,
      13008
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      13009,
      13009
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      13010,
      13010
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      13011,
      13011
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      13012,
      13012
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      13013,
      13013
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      13014,
      13014
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      13015,
      13015
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      13016,
      13016
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      13017,
      13017
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      13018,
      13018
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      13019,
      13019
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      13020,
      13020
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      13021,
      13021
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      13022,
      13022
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      13023,
      13023
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      13024,
      13024
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      13025,
      13025
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      13026,
      13026
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      13027,
      13027
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      13028,
      13028
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      13029,
      13029
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      13030,
      13030
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      13031,
      13031
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      13032,
      13032
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      13033,
      13033
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      13034,
      13034
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      13035,
      13035
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      13036,
      13036
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      13037,
      13037
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      13038,
      13038
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      13039,
      13039
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      13040,
      13040
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      13041,
      13041
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      13042,
      13042
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      13043,
      13043
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      13044,
      13044
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      13045,
      13045
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      13046,
      13046
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      13047,
      13047
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      13048,
      13048
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      13049,
      13049
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      13050,
      13050
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      13051,
      13051
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      13052,
      13052
    ],
    "mapped",
    [
      12528
    ]
  ],
  [
    [
      13053,
      13053
    ],
    "mapped",
    [
      12529
    ]
  ],
  [
    [
      13054,
      13054
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      13055,
      13055
    ],
    "disallowed"
  ],
  [
    [
      13056,
      13056
    ],
    "mapped",
    [
      12450,
      12497,
      12540,
      12488
    ]
  ],
  [
    [
      13057,
      13057
    ],
    "mapped",
    [
      12450,
      12523,
      12501,
      12449
    ]
  ],
  [
    [
      13058,
      13058
    ],
    "mapped",
    [
      12450,
      12531,
      12506,
      12450
    ]
  ],
  [
    [
      13059,
      13059
    ],
    "mapped",
    [
      12450,
      12540,
      12523
    ]
  ],
  [
    [
      13060,
      13060
    ],
    "mapped",
    [
      12452,
      12491,
      12531,
      12464
    ]
  ],
  [
    [
      13061,
      13061
    ],
    "mapped",
    [
      12452,
      12531,
      12481
    ]
  ],
  [
    [
      13062,
      13062
    ],
    "mapped",
    [
      12454,
      12457,
      12531
    ]
  ],
  [
    [
      13063,
      13063
    ],
    "mapped",
    [
      12456,
      12473,
      12463,
      12540,
      12489
    ]
  ],
  [
    [
      13064,
      13064
    ],
    "mapped",
    [
      12456,
      12540,
      12459,
      12540
    ]
  ],
  [
    [
      13065,
      13065
    ],
    "mapped",
    [
      12458,
      12531,
      12473
    ]
  ],
  [
    [
      13066,
      13066
    ],
    "mapped",
    [
      12458,
      12540,
      12512
    ]
  ],
  [
    [
      13067,
      13067
    ],
    "mapped",
    [
      12459,
      12452,
      12522
    ]
  ],
  [
    [
      13068,
      13068
    ],
    "mapped",
    [
      12459,
      12521,
      12483,
      12488
    ]
  ],
  [
    [
      13069,
      13069
    ],
    "mapped",
    [
      12459,
      12525,
      12522,
      12540
    ]
  ],
  [
    [
      13070,
      13070
    ],
    "mapped",
    [
      12460,
      12525,
      12531
    ]
  ],
  [
    [
      13071,
      13071
    ],
    "mapped",
    [
      12460,
      12531,
      12510
    ]
  ],
  [
    [
      13072,
      13072
    ],
    "mapped",
    [
      12462,
      12460
    ]
  ],
  [
    [
      13073,
      13073
    ],
    "mapped",
    [
      12462,
      12491,
      12540
    ]
  ],
  [
    [
      13074,
      13074
    ],
    "mapped",
    [
      12461,
      12517,
      12522,
      12540
    ]
  ],
  [
    [
      13075,
      13075
    ],
    "mapped",
    [
      12462,
      12523,
      12480,
      12540
    ]
  ],
  [
    [
      13076,
      13076
    ],
    "mapped",
    [
      12461,
      12525
    ]
  ],
  [
    [
      13077,
      13077
    ],
    "mapped",
    [
      12461,
      12525,
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13078,
      13078
    ],
    "mapped",
    [
      12461,
      12525,
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13079,
      13079
    ],
    "mapped",
    [
      12461,
      12525,
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13080,
      13080
    ],
    "mapped",
    [
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13081,
      13081
    ],
    "mapped",
    [
      12464,
      12521,
      12512,
      12488,
      12531
    ]
  ],
  [
    [
      13082,
      13082
    ],
    "mapped",
    [
      12463,
      12523,
      12476,
      12452,
      12525
    ]
  ],
  [
    [
      13083,
      13083
    ],
    "mapped",
    [
      12463,
      12525,
      12540,
      12493
    ]
  ],
  [
    [
      13084,
      13084
    ],
    "mapped",
    [
      12465,
      12540,
      12473
    ]
  ],
  [
    [
      13085,
      13085
    ],
    "mapped",
    [
      12467,
      12523,
      12490
    ]
  ],
  [
    [
      13086,
      13086
    ],
    "mapped",
    [
      12467,
      12540,
      12509
    ]
  ],
  [
    [
      13087,
      13087
    ],
    "mapped",
    [
      12469,
      12452,
      12463,
      12523
    ]
  ],
  [
    [
      13088,
      13088
    ],
    "mapped",
    [
      12469,
      12531,
      12481,
      12540,
      12512
    ]
  ],
  [
    [
      13089,
      13089
    ],
    "mapped",
    [
      12471,
      12522,
      12531,
      12464
    ]
  ],
  [
    [
      13090,
      13090
    ],
    "mapped",
    [
      12475,
      12531,
      12481
    ]
  ],
  [
    [
      13091,
      13091
    ],
    "mapped",
    [
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13092,
      13092
    ],
    "mapped",
    [
      12480,
      12540,
      12473
    ]
  ],
  [
    [
      13093,
      13093
    ],
    "mapped",
    [
      12487,
      12471
    ]
  ],
  [
    [
      13094,
      13094
    ],
    "mapped",
    [
      12489,
      12523
    ]
  ],
  [
    [
      13095,
      13095
    ],
    "mapped",
    [
      12488,
      12531
    ]
  ],
  [
    [
      13096,
      13096
    ],
    "mapped",
    [
      12490,
      12494
    ]
  ],
  [
    [
      13097,
      13097
    ],
    "mapped",
    [
      12494,
      12483,
      12488
    ]
  ],
  [
    [
      13098,
      13098
    ],
    "mapped",
    [
      12495,
      12452,
      12484
    ]
  ],
  [
    [
      13099,
      13099
    ],
    "mapped",
    [
      12497,
      12540,
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13100,
      13100
    ],
    "mapped",
    [
      12497,
      12540,
      12484
    ]
  ],
  [
    [
      13101,
      13101
    ],
    "mapped",
    [
      12496,
      12540,
      12524,
      12523
    ]
  ],
  [
    [
      13102,
      13102
    ],
    "mapped",
    [
      12500,
      12450,
      12473,
      12488,
      12523
    ]
  ],
  [
    [
      13103,
      13103
    ],
    "mapped",
    [
      12500,
      12463,
      12523
    ]
  ],
  [
    [
      13104,
      13104
    ],
    "mapped",
    [
      12500,
      12467
    ]
  ],
  [
    [
      13105,
      13105
    ],
    "mapped",
    [
      12499,
      12523
    ]
  ],
  [
    [
      13106,
      13106
    ],
    "mapped",
    [
      12501,
      12449,
      12521,
      12483,
      12489
    ]
  ],
  [
    [
      13107,
      13107
    ],
    "mapped",
    [
      12501,
      12451,
      12540,
      12488
    ]
  ],
  [
    [
      13108,
      13108
    ],
    "mapped",
    [
      12502,
      12483,
      12471,
      12455,
      12523
    ]
  ],
  [
    [
      13109,
      13109
    ],
    "mapped",
    [
      12501,
      12521,
      12531
    ]
  ],
  [
    [
      13110,
      13110
    ],
    "mapped",
    [
      12504,
      12463,
      12479,
      12540,
      12523
    ]
  ],
  [
    [
      13111,
      13111
    ],
    "mapped",
    [
      12506,
      12477
    ]
  ],
  [
    [
      13112,
      13112
    ],
    "mapped",
    [
      12506,
      12491,
      12498
    ]
  ],
  [
    [
      13113,
      13113
    ],
    "mapped",
    [
      12504,
      12523,
      12484
    ]
  ],
  [
    [
      13114,
      13114
    ],
    "mapped",
    [
      12506,
      12531,
      12473
    ]
  ],
  [
    [
      13115,
      13115
    ],
    "mapped",
    [
      12506,
      12540,
      12472
    ]
  ],
  [
    [
      13116,
      13116
    ],
    "mapped",
    [
      12505,
      12540,
      12479
    ]
  ],
  [
    [
      13117,
      13117
    ],
    "mapped",
    [
      12509,
      12452,
      12531,
      12488
    ]
  ],
  [
    [
      13118,
      13118
    ],
    "mapped",
    [
      12508,
      12523,
      12488
    ]
  ],
  [
    [
      13119,
      13119
    ],
    "mapped",
    [
      12507,
      12531
    ]
  ],
  [
    [
      13120,
      13120
    ],
    "mapped",
    [
      12509,
      12531,
      12489
    ]
  ],
  [
    [
      13121,
      13121
    ],
    "mapped",
    [
      12507,
      12540,
      12523
    ]
  ],
  [
    [
      13122,
      13122
    ],
    "mapped",
    [
      12507,
      12540,
      12531
    ]
  ],
  [
    [
      13123,
      13123
    ],
    "mapped",
    [
      12510,
      12452,
      12463,
      12525
    ]
  ],
  [
    [
      13124,
      13124
    ],
    "mapped",
    [
      12510,
      12452,
      12523
    ]
  ],
  [
    [
      13125,
      13125
    ],
    "mapped",
    [
      12510,
      12483,
      12495
    ]
  ],
  [
    [
      13126,
      13126
    ],
    "mapped",
    [
      12510,
      12523,
      12463
    ]
  ],
  [
    [
      13127,
      13127
    ],
    "mapped",
    [
      12510,
      12531,
      12471,
      12519,
      12531
    ]
  ],
  [
    [
      13128,
      13128
    ],
    "mapped",
    [
      12511,
      12463,
      12525,
      12531
    ]
  ],
  [
    [
      13129,
      13129
    ],
    "mapped",
    [
      12511,
      12522
    ]
  ],
  [
    [
      13130,
      13130
    ],
    "mapped",
    [
      12511,
      12522,
      12496,
      12540,
      12523
    ]
  ],
  [
    [
      13131,
      13131
    ],
    "mapped",
    [
      12513,
      12460
    ]
  ],
  [
    [
      13132,
      13132
    ],
    "mapped",
    [
      12513,
      12460,
      12488,
      12531
    ]
  ],
  [
    [
      13133,
      13133
    ],
    "mapped",
    [
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13134,
      13134
    ],
    "mapped",
    [
      12516,
      12540,
      12489
    ]
  ],
  [
    [
      13135,
      13135
    ],
    "mapped",
    [
      12516,
      12540,
      12523
    ]
  ],
  [
    [
      13136,
      13136
    ],
    "mapped",
    [
      12518,
      12450,
      12531
    ]
  ],
  [
    [
      13137,
      13137
    ],
    "mapped",
    [
      12522,
      12483,
      12488,
      12523
    ]
  ],
  [
    [
      13138,
      13138
    ],
    "mapped",
    [
      12522,
      12521
    ]
  ],
  [
    [
      13139,
      13139
    ],
    "mapped",
    [
      12523,
      12500,
      12540
    ]
  ],
  [
    [
      13140,
      13140
    ],
    "mapped",
    [
      12523,
      12540,
      12502,
      12523
    ]
  ],
  [
    [
      13141,
      13141
    ],
    "mapped",
    [
      12524,
      12512
    ]
  ],
  [
    [
      13142,
      13142
    ],
    "mapped",
    [
      12524,
      12531,
      12488,
      12466,
      12531
    ]
  ],
  [
    [
      13143,
      13143
    ],
    "mapped",
    [
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13144,
      13144
    ],
    "mapped",
    [
      48,
      28857
    ]
  ],
  [
    [
      13145,
      13145
    ],
    "mapped",
    [
      49,
      28857
    ]
  ],
  [
    [
      13146,
      13146
    ],
    "mapped",
    [
      50,
      28857
    ]
  ],
  [
    [
      13147,
      13147
    ],
    "mapped",
    [
      51,
      28857
    ]
  ],
  [
    [
      13148,
      13148
    ],
    "mapped",
    [
      52,
      28857
    ]
  ],
  [
    [
      13149,
      13149
    ],
    "mapped",
    [
      53,
      28857
    ]
  ],
  [
    [
      13150,
      13150
    ],
    "mapped",
    [
      54,
      28857
    ]
  ],
  [
    [
      13151,
      13151
    ],
    "mapped",
    [
      55,
      28857
    ]
  ],
  [
    [
      13152,
      13152
    ],
    "mapped",
    [
      56,
      28857
    ]
  ],
  [
    [
      13153,
      13153
    ],
    "mapped",
    [
      57,
      28857
    ]
  ],
  [
    [
      13154,
      13154
    ],
    "mapped",
    [
      49,
      48,
      28857
    ]
  ],
  [
    [
      13155,
      13155
    ],
    "mapped",
    [
      49,
      49,
      28857
    ]
  ],
  [
    [
      13156,
      13156
    ],
    "mapped",
    [
      49,
      50,
      28857
    ]
  ],
  [
    [
      13157,
      13157
    ],
    "mapped",
    [
      49,
      51,
      28857
    ]
  ],
  [
    [
      13158,
      13158
    ],
    "mapped",
    [
      49,
      52,
      28857
    ]
  ],
  [
    [
      13159,
      13159
    ],
    "mapped",
    [
      49,
      53,
      28857
    ]
  ],
  [
    [
      13160,
      13160
    ],
    "mapped",
    [
      49,
      54,
      28857
    ]
  ],
  [
    [
      13161,
      13161
    ],
    "mapped",
    [
      49,
      55,
      28857
    ]
  ],
  [
    [
      13162,
      13162
    ],
    "mapped",
    [
      49,
      56,
      28857
    ]
  ],
  [
    [
      13163,
      13163
    ],
    "mapped",
    [
      49,
      57,
      28857
    ]
  ],
  [
    [
      13164,
      13164
    ],
    "mapped",
    [
      50,
      48,
      28857
    ]
  ],
  [
    [
      13165,
      13165
    ],
    "mapped",
    [
      50,
      49,
      28857
    ]
  ],
  [
    [
      13166,
      13166
    ],
    "mapped",
    [
      50,
      50,
      28857
    ]
  ],
  [
    [
      13167,
      13167
    ],
    "mapped",
    [
      50,
      51,
      28857
    ]
  ],
  [
    [
      13168,
      13168
    ],
    "mapped",
    [
      50,
      52,
      28857
    ]
  ],
  [
    [
      13169,
      13169
    ],
    "mapped",
    [
      104,
      112,
      97
    ]
  ],
  [
    [
      13170,
      13170
    ],
    "mapped",
    [
      100,
      97
    ]
  ],
  [
    [
      13171,
      13171
    ],
    "mapped",
    [
      97,
      117
    ]
  ],
  [
    [
      13172,
      13172
    ],
    "mapped",
    [
      98,
      97,
      114
    ]
  ],
  [
    [
      13173,
      13173
    ],
    "mapped",
    [
      111,
      118
    ]
  ],
  [
    [
      13174,
      13174
    ],
    "mapped",
    [
      112,
      99
    ]
  ],
  [
    [
      13175,
      13175
    ],
    "mapped",
    [
      100,
      109
    ]
  ],
  [
    [
      13176,
      13176
    ],
    "mapped",
    [
      100,
      109,
      50
    ]
  ],
  [
    [
      13177,
      13177
    ],
    "mapped",
    [
      100,
      109,
      51
    ]
  ],
  [
    [
      13178,
      13178
    ],
    "mapped",
    [
      105,
      117
    ]
  ],
  [
    [
      13179,
      13179
    ],
    "mapped",
    [
      24179,
      25104
    ]
  ],
  [
    [
      13180,
      13180
    ],
    "mapped",
    [
      26157,
      21644
    ]
  ],
  [
    [
      13181,
      13181
    ],
    "mapped",
    [
      22823,
      27491
    ]
  ],
  [
    [
      13182,
      13182
    ],
    "mapped",
    [
      26126,
      27835
    ]
  ],
  [
    [
      13183,
      13183
    ],
    "mapped",
    [
      26666,
      24335,
      20250,
      31038
    ]
  ],
  [
    [
      13184,
      13184
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13185,
      13185
    ],
    "mapped",
    [
      110,
      97
    ]
  ],
  [
    [
      13186,
      13186
    ],
    "mapped",
    [
      956,
      97
    ]
  ],
  [
    [
      13187,
      13187
    ],
    "mapped",
    [
      109,
      97
    ]
  ],
  [
    [
      13188,
      13188
    ],
    "mapped",
    [
      107,
      97
    ]
  ],
  [
    [
      13189,
      13189
    ],
    "mapped",
    [
      107,
      98
    ]
  ],
  [
    [
      13190,
      13190
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13191,
      13191
    ],
    "mapped",
    [
      103,
      98
    ]
  ],
  [
    [
      13192,
      13192
    ],
    "mapped",
    [
      99,
      97,
      108
    ]
  ],
  [
    [
      13193,
      13193
    ],
    "mapped",
    [
      107,
      99,
      97,
      108
    ]
  ],
  [
    [
      13194,
      13194
    ],
    "mapped",
    [
      112,
      102
    ]
  ],
  [
    [
      13195,
      13195
    ],
    "mapped",
    [
      110,
      102
    ]
  ],
  [
    [
      13196,
      13196
    ],
    "mapped",
    [
      956,
      102
    ]
  ],
  [
    [
      13197,
      13197
    ],
    "mapped",
    [
      956,
      103
    ]
  ],
  [
    [
      13198,
      13198
    ],
    "mapped",
    [
      109,
      103
    ]
  ],
  [
    [
      13199,
      13199
    ],
    "mapped",
    [
      107,
      103
    ]
  ],
  [
    [
      13200,
      13200
    ],
    "mapped",
    [
      104,
      122
    ]
  ],
  [
    [
      13201,
      13201
    ],
    "mapped",
    [
      107,
      104,
      122
    ]
  ],
  [
    [
      13202,
      13202
    ],
    "mapped",
    [
      109,
      104,
      122
    ]
  ],
  [
    [
      13203,
      13203
    ],
    "mapped",
    [
      103,
      104,
      122
    ]
  ],
  [
    [
      13204,
      13204
    ],
    "mapped",
    [
      116,
      104,
      122
    ]
  ],
  [
    [
      13205,
      13205
    ],
    "mapped",
    [
      956,
      108
    ]
  ],
  [
    [
      13206,
      13206
    ],
    "mapped",
    [
      109,
      108
    ]
  ],
  [
    [
      13207,
      13207
    ],
    "mapped",
    [
      100,
      108
    ]
  ],
  [
    [
      13208,
      13208
    ],
    "mapped",
    [
      107,
      108
    ]
  ],
  [
    [
      13209,
      13209
    ],
    "mapped",
    [
      102,
      109
    ]
  ],
  [
    [
      13210,
      13210
    ],
    "mapped",
    [
      110,
      109
    ]
  ],
  [
    [
      13211,
      13211
    ],
    "mapped",
    [
      956,
      109
    ]
  ],
  [
    [
      13212,
      13212
    ],
    "mapped",
    [
      109,
      109
    ]
  ],
  [
    [
      13213,
      13213
    ],
    "mapped",
    [
      99,
      109
    ]
  ],
  [
    [
      13214,
      13214
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13215,
      13215
    ],
    "mapped",
    [
      109,
      109,
      50
    ]
  ],
  [
    [
      13216,
      13216
    ],
    "mapped",
    [
      99,
      109,
      50
    ]
  ],
  [
    [
      13217,
      13217
    ],
    "mapped",
    [
      109,
      50
    ]
  ],
  [
    [
      13218,
      13218
    ],
    "mapped",
    [
      107,
      109,
      50
    ]
  ],
  [
    [
      13219,
      13219
    ],
    "mapped",
    [
      109,
      109,
      51
    ]
  ],
  [
    [
      13220,
      13220
    ],
    "mapped",
    [
      99,
      109,
      51
    ]
  ],
  [
    [
      13221,
      13221
    ],
    "mapped",
    [
      109,
      51
    ]
  ],
  [
    [
      13222,
      13222
    ],
    "mapped",
    [
      107,
      109,
      51
    ]
  ],
  [
    [
      13223,
      13223
    ],
    "mapped",
    [
      109,
      8725,
      115
    ]
  ],
  [
    [
      13224,
      13224
    ],
    "mapped",
    [
      109,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13225,
      13225
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13226,
      13226
    ],
    "mapped",
    [
      107,
      112,
      97
    ]
  ],
  [
    [
      13227,
      13227
    ],
    "mapped",
    [
      109,
      112,
      97
    ]
  ],
  [
    [
      13228,
      13228
    ],
    "mapped",
    [
      103,
      112,
      97
    ]
  ],
  [
    [
      13229,
      13229
    ],
    "mapped",
    [
      114,
      97,
      100
    ]
  ],
  [
    [
      13230,
      13230
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115
    ]
  ],
  [
    [
      13231,
      13231
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13232,
      13232
    ],
    "mapped",
    [
      112,
      115
    ]
  ],
  [
    [
      13233,
      13233
    ],
    "mapped",
    [
      110,
      115
    ]
  ],
  [
    [
      13234,
      13234
    ],
    "mapped",
    [
      956,
      115
    ]
  ],
  [
    [
      13235,
      13235
    ],
    "mapped",
    [
      109,
      115
    ]
  ],
  [
    [
      13236,
      13236
    ],
    "mapped",
    [
      112,
      118
    ]
  ],
  [
    [
      13237,
      13237
    ],
    "mapped",
    [
      110,
      118
    ]
  ],
  [
    [
      13238,
      13238
    ],
    "mapped",
    [
      956,
      118
    ]
  ],
  [
    [
      13239,
      13239
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13240,
      13240
    ],
    "mapped",
    [
      107,
      118
    ]
  ],
  [
    [
      13241,
      13241
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13242,
      13242
    ],
    "mapped",
    [
      112,
      119
    ]
  ],
  [
    [
      13243,
      13243
    ],
    "mapped",
    [
      110,
      119
    ]
  ],
  [
    [
      13244,
      13244
    ],
    "mapped",
    [
      956,
      119
    ]
  ],
  [
    [
      13245,
      13245
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13246,
      13246
    ],
    "mapped",
    [
      107,
      119
    ]
  ],
  [
    [
      13247,
      13247
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13248,
      13248
    ],
    "mapped",
    [
      107,
      969
    ]
  ],
  [
    [
      13249,
      13249
    ],
    "mapped",
    [
      109,
      969
    ]
  ],
  [
    [
      13250,
      13250
    ],
    "disallowed"
  ],
  [
    [
      13251,
      13251
    ],
    "mapped",
    [
      98,
      113
    ]
  ],
  [
    [
      13252,
      13252
    ],
    "mapped",
    [
      99,
      99
    ]
  ],
  [
    [
      13253,
      13253
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      13254,
      13254
    ],
    "mapped",
    [
      99,
      8725,
      107,
      103
    ]
  ],
  [
    [
      13255,
      13255
    ],
    "disallowed"
  ],
  [
    [
      13256,
      13256
    ],
    "mapped",
    [
      100,
      98
    ]
  ],
  [
    [
      13257,
      13257
    ],
    "mapped",
    [
      103,
      121
    ]
  ],
  [
    [
      13258,
      13258
    ],
    "mapped",
    [
      104,
      97
    ]
  ],
  [
    [
      13259,
      13259
    ],
    "mapped",
    [
      104,
      112
    ]
  ],
  [
    [
      13260,
      13260
    ],
    "mapped",
    [
      105,
      110
    ]
  ],
  [
    [
      13261,
      13261
    ],
    "mapped",
    [
      107,
      107
    ]
  ],
  [
    [
      13262,
      13262
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13263,
      13263
    ],
    "mapped",
    [
      107,
      116
    ]
  ],
  [
    [
      13264,
      13264
    ],
    "mapped",
    [
      108,
      109
    ]
  ],
  [
    [
      13265,
      13265
    ],
    "mapped",
    [
      108,
      110
    ]
  ],
  [
    [
      13266,
      13266
    ],
    "mapped",
    [
      108,
      111,
      103
    ]
  ],
  [
    [
      13267,
      13267
    ],
    "mapped",
    [
      108,
      120
    ]
  ],
  [
    [
      13268,
      13268
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13269,
      13269
    ],
    "mapped",
    [
      109,
      105,
      108
    ]
  ],
  [
    [
      13270,
      13270
    ],
    "mapped",
    [
      109,
      111,
      108
    ]
  ],
  [
    [
      13271,
      13271
    ],
    "mapped",
    [
      112,
      104
    ]
  ],
  [
    [
      13272,
      13272
    ],
    "disallowed"
  ],
  [
    [
      13273,
      13273
    ],
    "mapped",
    [
      112,
      112,
      109
    ]
  ],
  [
    [
      13274,
      13274
    ],
    "mapped",
    [
      112,
      114
    ]
  ],
  [
    [
      13275,
      13275
    ],
    "mapped",
    [
      115,
      114
    ]
  ],
  [
    [
      13276,
      13276
    ],
    "mapped",
    [
      115,
      118
    ]
  ],
  [
    [
      13277,
      13277
    ],
    "mapped",
    [
      119,
      98
    ]
  ],
  [
    [
      13278,
      13278
    ],
    "mapped",
    [
      118,
      8725,
      109
    ]
  ],
  [
    [
      13279,
      13279
    ],
    "mapped",
    [
      97,
      8725,
      109
    ]
  ],
  [
    [
      13280,
      13280
    ],
    "mapped",
    [
      49,
      26085
    ]
  ],
  [
    [
      13281,
      13281
    ],
    "mapped",
    [
      50,
      26085
    ]
  ],
  [
    [
      13282,
      13282
    ],
    "mapped",
    [
      51,
      26085
    ]
  ],
  [
    [
      13283,
      13283
    ],
    "mapped",
    [
      52,
      26085
    ]
  ],
  [
    [
      13284,
      13284
    ],
    "mapped",
    [
      53,
      26085
    ]
  ],
  [
    [
      13285,
      13285
    ],
    "mapped",
    [
      54,
      26085
    ]
  ],
  [
    [
      13286,
      13286
    ],
    "mapped",
    [
      55,
      26085
    ]
  ],
  [
    [
      13287,
      13287
    ],
    "mapped",
    [
      56,
      26085
    ]
  ],
  [
    [
      13288,
      13288
    ],
    "mapped",
    [
      57,
      26085
    ]
  ],
  [
    [
      13289,
      13289
    ],
    "mapped",
    [
      49,
      48,
      26085
    ]
  ],
  [
    [
      13290,
      13290
    ],
    "mapped",
    [
      49,
      49,
      26085
    ]
  ],
  [
    [
      13291,
      13291
    ],
    "mapped",
    [
      49,
      50,
      26085
    ]
  ],
  [
    [
      13292,
      13292
    ],
    "mapped",
    [
      49,
      51,
      26085
    ]
  ],
  [
    [
      13293,
      13293
    ],
    "mapped",
    [
      49,
      52,
      26085
    ]
  ],
  [
    [
      13294,
      13294
    ],
    "mapped",
    [
      49,
      53,
      26085
    ]
  ],
  [
    [
      13295,
      13295
    ],
    "mapped",
    [
      49,
      54,
      26085
    ]
  ],
  [
    [
      13296,
      13296
    ],
    "mapped",
    [
      49,
      55,
      26085
    ]
  ],
  [
    [
      13297,
      13297
    ],
    "mapped",
    [
      49,
      56,
      26085
    ]
  ],
  [
    [
      13298,
      13298
    ],
    "mapped",
    [
      49,
      57,
      26085
    ]
  ],
  [
    [
      13299,
      13299
    ],
    "mapped",
    [
      50,
      48,
      26085
    ]
  ],
  [
    [
      13300,
      13300
    ],
    "mapped",
    [
      50,
      49,
      26085
    ]
  ],
  [
    [
      13301,
      13301
    ],
    "mapped",
    [
      50,
      50,
      26085
    ]
  ],
  [
    [
      13302,
      13302
    ],
    "mapped",
    [
      50,
      51,
      26085
    ]
  ],
  [
    [
      13303,
      13303
    ],
    "mapped",
    [
      50,
      52,
      26085
    ]
  ],
  [
    [
      13304,
      13304
    ],
    "mapped",
    [
      50,
      53,
      26085
    ]
  ],
  [
    [
      13305,
      13305
    ],
    "mapped",
    [
      50,
      54,
      26085
    ]
  ],
  [
    [
      13306,
      13306
    ],
    "mapped",
    [
      50,
      55,
      26085
    ]
  ],
  [
    [
      13307,
      13307
    ],
    "mapped",
    [
      50,
      56,
      26085
    ]
  ],
  [
    [
      13308,
      13308
    ],
    "mapped",
    [
      50,
      57,
      26085
    ]
  ],
  [
    [
      13309,
      13309
    ],
    "mapped",
    [
      51,
      48,
      26085
    ]
  ],
  [
    [
      13310,
      13310
    ],
    "mapped",
    [
      51,
      49,
      26085
    ]
  ],
  [
    [
      13311,
      13311
    ],
    "mapped",
    [
      103,
      97,
      108
    ]
  ],
  [
    [
      13312,
      19893
    ],
    "valid"
  ],
  [
    [
      19894,
      19903
    ],
    "disallowed"
  ],
  [
    [
      19904,
      19967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      19968,
      40869
    ],
    "valid"
  ],
  [
    [
      40870,
      40891
    ],
    "valid"
  ],
  [
    [
      40892,
      40899
    ],
    "valid"
  ],
  [
    [
      40900,
      40907
    ],
    "valid"
  ],
  [
    [
      40908,
      40908
    ],
    "valid"
  ],
  [
    [
      40909,
      40917
    ],
    "valid"
  ],
  [
    [
      40918,
      40959
    ],
    "disallowed"
  ],
  [
    [
      40960,
      42124
    ],
    "valid"
  ],
  [
    [
      42125,
      42127
    ],
    "disallowed"
  ],
  [
    [
      42128,
      42145
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42146,
      42147
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42148,
      42163
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42164,
      42164
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42165,
      42176
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42177,
      42177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42178,
      42180
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42181,
      42181
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42182,
      42182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42183,
      42191
    ],
    "disallowed"
  ],
  [
    [
      42192,
      42237
    ],
    "valid"
  ],
  [
    [
      42238,
      42239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42240,
      42508
    ],
    "valid"
  ],
  [
    [
      42509,
      42511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42512,
      42539
    ],
    "valid"
  ],
  [
    [
      42540,
      42559
    ],
    "disallowed"
  ],
  [
    [
      42560,
      42560
    ],
    "mapped",
    [
      42561
    ]
  ],
  [
    [
      42561,
      42561
    ],
    "valid"
  ],
  [
    [
      42562,
      42562
    ],
    "mapped",
    [
      42563
    ]
  ],
  [
    [
      42563,
      42563
    ],
    "valid"
  ],
  [
    [
      42564,
      42564
    ],
    "mapped",
    [
      42565
    ]
  ],
  [
    [
      42565,
      42565
    ],
    "valid"
  ],
  [
    [
      42566,
      42566
    ],
    "mapped",
    [
      42567
    ]
  ],
  [
    [
      42567,
      42567
    ],
    "valid"
  ],
  [
    [
      42568,
      42568
    ],
    "mapped",
    [
      42569
    ]
  ],
  [
    [
      42569,
      42569
    ],
    "valid"
  ],
  [
    [
      42570,
      42570
    ],
    "mapped",
    [
      42571
    ]
  ],
  [
    [
      42571,
      42571
    ],
    "valid"
  ],
  [
    [
      42572,
      42572
    ],
    "mapped",
    [
      42573
    ]
  ],
  [
    [
      42573,
      42573
    ],
    "valid"
  ],
  [
    [
      42574,
      42574
    ],
    "mapped",
    [
      42575
    ]
  ],
  [
    [
      42575,
      42575
    ],
    "valid"
  ],
  [
    [
      42576,
      42576
    ],
    "mapped",
    [
      42577
    ]
  ],
  [
    [
      42577,
      42577
    ],
    "valid"
  ],
  [
    [
      42578,
      42578
    ],
    "mapped",
    [
      42579
    ]
  ],
  [
    [
      42579,
      42579
    ],
    "valid"
  ],
  [
    [
      42580,
      42580
    ],
    "mapped",
    [
      42581
    ]
  ],
  [
    [
      42581,
      42581
    ],
    "valid"
  ],
  [
    [
      42582,
      42582
    ],
    "mapped",
    [
      42583
    ]
  ],
  [
    [
      42583,
      42583
    ],
    "valid"
  ],
  [
    [
      42584,
      42584
    ],
    "mapped",
    [
      42585
    ]
  ],
  [
    [
      42585,
      42585
    ],
    "valid"
  ],
  [
    [
      42586,
      42586
    ],
    "mapped",
    [
      42587
    ]
  ],
  [
    [
      42587,
      42587
    ],
    "valid"
  ],
  [
    [
      42588,
      42588
    ],
    "mapped",
    [
      42589
    ]
  ],
  [
    [
      42589,
      42589
    ],
    "valid"
  ],
  [
    [
      42590,
      42590
    ],
    "mapped",
    [
      42591
    ]
  ],
  [
    [
      42591,
      42591
    ],
    "valid"
  ],
  [
    [
      42592,
      42592
    ],
    "mapped",
    [
      42593
    ]
  ],
  [
    [
      42593,
      42593
    ],
    "valid"
  ],
  [
    [
      42594,
      42594
    ],
    "mapped",
    [
      42595
    ]
  ],
  [
    [
      42595,
      42595
    ],
    "valid"
  ],
  [
    [
      42596,
      42596
    ],
    "mapped",
    [
      42597
    ]
  ],
  [
    [
      42597,
      42597
    ],
    "valid"
  ],
  [
    [
      42598,
      42598
    ],
    "mapped",
    [
      42599
    ]
  ],
  [
    [
      42599,
      42599
    ],
    "valid"
  ],
  [
    [
      42600,
      42600
    ],
    "mapped",
    [
      42601
    ]
  ],
  [
    [
      42601,
      42601
    ],
    "valid"
  ],
  [
    [
      42602,
      42602
    ],
    "mapped",
    [
      42603
    ]
  ],
  [
    [
      42603,
      42603
    ],
    "valid"
  ],
  [
    [
      42604,
      42604
    ],
    "mapped",
    [
      42605
    ]
  ],
  [
    [
      42605,
      42607
    ],
    "valid"
  ],
  [
    [
      42608,
      42611
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42612,
      42619
    ],
    "valid"
  ],
  [
    [
      42620,
      42621
    ],
    "valid"
  ],
  [
    [
      42622,
      42622
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42623,
      42623
    ],
    "valid"
  ],
  [
    [
      42624,
      42624
    ],
    "mapped",
    [
      42625
    ]
  ],
  [
    [
      42625,
      42625
    ],
    "valid"
  ],
  [
    [
      42626,
      42626
    ],
    "mapped",
    [
      42627
    ]
  ],
  [
    [
      42627,
      42627
    ],
    "valid"
  ],
  [
    [
      42628,
      42628
    ],
    "mapped",
    [
      42629
    ]
  ],
  [
    [
      42629,
      42629
    ],
    "valid"
  ],
  [
    [
      42630,
      42630
    ],
    "mapped",
    [
      42631
    ]
  ],
  [
    [
      42631,
      42631
    ],
    "valid"
  ],
  [
    [
      42632,
      42632
    ],
    "mapped",
    [
      42633
    ]
  ],
  [
    [
      42633,
      42633
    ],
    "valid"
  ],
  [
    [
      42634,
      42634
    ],
    "mapped",
    [
      42635
    ]
  ],
  [
    [
      42635,
      42635
    ],
    "valid"
  ],
  [
    [
      42636,
      42636
    ],
    "mapped",
    [
      42637
    ]
  ],
  [
    [
      42637,
      42637
    ],
    "valid"
  ],
  [
    [
      42638,
      42638
    ],
    "mapped",
    [
      42639
    ]
  ],
  [
    [
      42639,
      42639
    ],
    "valid"
  ],
  [
    [
      42640,
      42640
    ],
    "mapped",
    [
      42641
    ]
  ],
  [
    [
      42641,
      42641
    ],
    "valid"
  ],
  [
    [
      42642,
      42642
    ],
    "mapped",
    [
      42643
    ]
  ],
  [
    [
      42643,
      42643
    ],
    "valid"
  ],
  [
    [
      42644,
      42644
    ],
    "mapped",
    [
      42645
    ]
  ],
  [
    [
      42645,
      42645
    ],
    "valid"
  ],
  [
    [
      42646,
      42646
    ],
    "mapped",
    [
      42647
    ]
  ],
  [
    [
      42647,
      42647
    ],
    "valid"
  ],
  [
    [
      42648,
      42648
    ],
    "mapped",
    [
      42649
    ]
  ],
  [
    [
      42649,
      42649
    ],
    "valid"
  ],
  [
    [
      42650,
      42650
    ],
    "mapped",
    [
      42651
    ]
  ],
  [
    [
      42651,
      42651
    ],
    "valid"
  ],
  [
    [
      42652,
      42652
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      42653,
      42653
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      42654,
      42654
    ],
    "valid"
  ],
  [
    [
      42655,
      42655
    ],
    "valid"
  ],
  [
    [
      42656,
      42725
    ],
    "valid"
  ],
  [
    [
      42726,
      42735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42736,
      42737
    ],
    "valid"
  ],
  [
    [
      42738,
      42743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42744,
      42751
    ],
    "disallowed"
  ],
  [
    [
      42752,
      42774
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42775,
      42778
    ],
    "valid"
  ],
  [
    [
      42779,
      42783
    ],
    "valid"
  ],
  [
    [
      42784,
      42785
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42786,
      42786
    ],
    "mapped",
    [
      42787
    ]
  ],
  [
    [
      42787,
      42787
    ],
    "valid"
  ],
  [
    [
      42788,
      42788
    ],
    "mapped",
    [
      42789
    ]
  ],
  [
    [
      42789,
      42789
    ],
    "valid"
  ],
  [
    [
      42790,
      42790
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      42791,
      42791
    ],
    "valid"
  ],
  [
    [
      42792,
      42792
    ],
    "mapped",
    [
      42793
    ]
  ],
  [
    [
      42793,
      42793
    ],
    "valid"
  ],
  [
    [
      42794,
      42794
    ],
    "mapped",
    [
      42795
    ]
  ],
  [
    [
      42795,
      42795
    ],
    "valid"
  ],
  [
    [
      42796,
      42796
    ],
    "mapped",
    [
      42797
    ]
  ],
  [
    [
      42797,
      42797
    ],
    "valid"
  ],
  [
    [
      42798,
      42798
    ],
    "mapped",
    [
      42799
    ]
  ],
  [
    [
      42799,
      42801
    ],
    "valid"
  ],
  [
    [
      42802,
      42802
    ],
    "mapped",
    [
      42803
    ]
  ],
  [
    [
      42803,
      42803
    ],
    "valid"
  ],
  [
    [
      42804,
      42804
    ],
    "mapped",
    [
      42805
    ]
  ],
  [
    [
      42805,
      42805
    ],
    "valid"
  ],
  [
    [
      42806,
      42806
    ],
    "mapped",
    [
      42807
    ]
  ],
  [
    [
      42807,
      42807
    ],
    "valid"
  ],
  [
    [
      42808,
      42808
    ],
    "mapped",
    [
      42809
    ]
  ],
  [
    [
      42809,
      42809
    ],
    "valid"
  ],
  [
    [
      42810,
      42810
    ],
    "mapped",
    [
      42811
    ]
  ],
  [
    [
      42811,
      42811
    ],
    "valid"
  ],
  [
    [
      42812,
      42812
    ],
    "mapped",
    [
      42813
    ]
  ],
  [
    [
      42813,
      42813
    ],
    "valid"
  ],
  [
    [
      42814,
      42814
    ],
    "mapped",
    [
      42815
    ]
  ],
  [
    [
      42815,
      42815
    ],
    "valid"
  ],
  [
    [
      42816,
      42816
    ],
    "mapped",
    [
      42817
    ]
  ],
  [
    [
      42817,
      42817
    ],
    "valid"
  ],
  [
    [
      42818,
      42818
    ],
    "mapped",
    [
      42819
    ]
  ],
  [
    [
      42819,
      42819
    ],
    "valid"
  ],
  [
    [
      42820,
      42820
    ],
    "mapped",
    [
      42821
    ]
  ],
  [
    [
      42821,
      42821
    ],
    "valid"
  ],
  [
    [
      42822,
      42822
    ],
    "mapped",
    [
      42823
    ]
  ],
  [
    [
      42823,
      42823
    ],
    "valid"
  ],
  [
    [
      42824,
      42824
    ],
    "mapped",
    [
      42825
    ]
  ],
  [
    [
      42825,
      42825
    ],
    "valid"
  ],
  [
    [
      42826,
      42826
    ],
    "mapped",
    [
      42827
    ]
  ],
  [
    [
      42827,
      42827
    ],
    "valid"
  ],
  [
    [
      42828,
      42828
    ],
    "mapped",
    [
      42829
    ]
  ],
  [
    [
      42829,
      42829
    ],
    "valid"
  ],
  [
    [
      42830,
      42830
    ],
    "mapped",
    [
      42831
    ]
  ],
  [
    [
      42831,
      42831
    ],
    "valid"
  ],
  [
    [
      42832,
      42832
    ],
    "mapped",
    [
      42833
    ]
  ],
  [
    [
      42833,
      42833
    ],
    "valid"
  ],
  [
    [
      42834,
      42834
    ],
    "mapped",
    [
      42835
    ]
  ],
  [
    [
      42835,
      42835
    ],
    "valid"
  ],
  [
    [
      42836,
      42836
    ],
    "mapped",
    [
      42837
    ]
  ],
  [
    [
      42837,
      42837
    ],
    "valid"
  ],
  [
    [
      42838,
      42838
    ],
    "mapped",
    [
      42839
    ]
  ],
  [
    [
      42839,
      42839
    ],
    "valid"
  ],
  [
    [
      42840,
      42840
    ],
    "mapped",
    [
      42841
    ]
  ],
  [
    [
      42841,
      42841
    ],
    "valid"
  ],
  [
    [
      42842,
      42842
    ],
    "mapped",
    [
      42843
    ]
  ],
  [
    [
      42843,
      42843
    ],
    "valid"
  ],
  [
    [
      42844,
      42844
    ],
    "mapped",
    [
      42845
    ]
  ],
  [
    [
      42845,
      42845
    ],
    "valid"
  ],
  [
    [
      42846,
      42846
    ],
    "mapped",
    [
      42847
    ]
  ],
  [
    [
      42847,
      42847
    ],
    "valid"
  ],
  [
    [
      42848,
      42848
    ],
    "mapped",
    [
      42849
    ]
  ],
  [
    [
      42849,
      42849
    ],
    "valid"
  ],
  [
    [
      42850,
      42850
    ],
    "mapped",
    [
      42851
    ]
  ],
  [
    [
      42851,
      42851
    ],
    "valid"
  ],
  [
    [
      42852,
      42852
    ],
    "mapped",
    [
      42853
    ]
  ],
  [
    [
      42853,
      42853
    ],
    "valid"
  ],
  [
    [
      42854,
      42854
    ],
    "mapped",
    [
      42855
    ]
  ],
  [
    [
      42855,
      42855
    ],
    "valid"
  ],
  [
    [
      42856,
      42856
    ],
    "mapped",
    [
      42857
    ]
  ],
  [
    [
      42857,
      42857
    ],
    "valid"
  ],
  [
    [
      42858,
      42858
    ],
    "mapped",
    [
      42859
    ]
  ],
  [
    [
      42859,
      42859
    ],
    "valid"
  ],
  [
    [
      42860,
      42860
    ],
    "mapped",
    [
      42861
    ]
  ],
  [
    [
      42861,
      42861
    ],
    "valid"
  ],
  [
    [
      42862,
      42862
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42863,
      42863
    ],
    "valid"
  ],
  [
    [
      42864,
      42864
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42865,
      42872
    ],
    "valid"
  ],
  [
    [
      42873,
      42873
    ],
    "mapped",
    [
      42874
    ]
  ],
  [
    [
      42874,
      42874
    ],
    "valid"
  ],
  [
    [
      42875,
      42875
    ],
    "mapped",
    [
      42876
    ]
  ],
  [
    [
      42876,
      42876
    ],
    "valid"
  ],
  [
    [
      42877,
      42877
    ],
    "mapped",
    [
      7545
    ]
  ],
  [
    [
      42878,
      42878
    ],
    "mapped",
    [
      42879
    ]
  ],
  [
    [
      42879,
      42879
    ],
    "valid"
  ],
  [
    [
      42880,
      42880
    ],
    "mapped",
    [
      42881
    ]
  ],
  [
    [
      42881,
      42881
    ],
    "valid"
  ],
  [
    [
      42882,
      42882
    ],
    "mapped",
    [
      42883
    ]
  ],
  [
    [
      42883,
      42883
    ],
    "valid"
  ],
  [
    [
      42884,
      42884
    ],
    "mapped",
    [
      42885
    ]
  ],
  [
    [
      42885,
      42885
    ],
    "valid"
  ],
  [
    [
      42886,
      42886
    ],
    "mapped",
    [
      42887
    ]
  ],
  [
    [
      42887,
      42888
    ],
    "valid"
  ],
  [
    [
      42889,
      42890
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42891,
      42891
    ],
    "mapped",
    [
      42892
    ]
  ],
  [
    [
      42892,
      42892
    ],
    "valid"
  ],
  [
    [
      42893,
      42893
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      42894,
      42894
    ],
    "valid"
  ],
  [
    [
      42895,
      42895
    ],
    "valid"
  ],
  [
    [
      42896,
      42896
    ],
    "mapped",
    [
      42897
    ]
  ],
  [
    [
      42897,
      42897
    ],
    "valid"
  ],
  [
    [
      42898,
      42898
    ],
    "mapped",
    [
      42899
    ]
  ],
  [
    [
      42899,
      42899
    ],
    "valid"
  ],
  [
    [
      42900,
      42901
    ],
    "valid"
  ],
  [
    [
      42902,
      42902
    ],
    "mapped",
    [
      42903
    ]
  ],
  [
    [
      42903,
      42903
    ],
    "valid"
  ],
  [
    [
      42904,
      42904
    ],
    "mapped",
    [
      42905
    ]
  ],
  [
    [
      42905,
      42905
    ],
    "valid"
  ],
  [
    [
      42906,
      42906
    ],
    "mapped",
    [
      42907
    ]
  ],
  [
    [
      42907,
      42907
    ],
    "valid"
  ],
  [
    [
      42908,
      42908
    ],
    "mapped",
    [
      42909
    ]
  ],
  [
    [
      42909,
      42909
    ],
    "valid"
  ],
  [
    [
      42910,
      42910
    ],
    "mapped",
    [
      42911
    ]
  ],
  [
    [
      42911,
      42911
    ],
    "valid"
  ],
  [
    [
      42912,
      42912
    ],
    "mapped",
    [
      42913
    ]
  ],
  [
    [
      42913,
      42913
    ],
    "valid"
  ],
  [
    [
      42914,
      42914
    ],
    "mapped",
    [
      42915
    ]
  ],
  [
    [
      42915,
      42915
    ],
    "valid"
  ],
  [
    [
      42916,
      42916
    ],
    "mapped",
    [
      42917
    ]
  ],
  [
    [
      42917,
      42917
    ],
    "valid"
  ],
  [
    [
      42918,
      42918
    ],
    "mapped",
    [
      42919
    ]
  ],
  [
    [
      42919,
      42919
    ],
    "valid"
  ],
  [
    [
      42920,
      42920
    ],
    "mapped",
    [
      42921
    ]
  ],
  [
    [
      42921,
      42921
    ],
    "valid"
  ],
  [
    [
      42922,
      42922
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      42923,
      42923
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      42924,
      42924
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      42925,
      42925
    ],
    "mapped",
    [
      620
    ]
  ],
  [
    [
      42926,
      42927
    ],
    "disallowed"
  ],
  [
    [
      42928,
      42928
    ],
    "mapped",
    [
      670
    ]
  ],
  [
    [
      42929,
      42929
    ],
    "mapped",
    [
      647
    ]
  ],
  [
    [
      42930,
      42930
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      42931,
      42931
    ],
    "mapped",
    [
      43859
    ]
  ],
  [
    [
      42932,
      42932
    ],
    "mapped",
    [
      42933
    ]
  ],
  [
    [
      42933,
      42933
    ],
    "valid"
  ],
  [
    [
      42934,
      42934
    ],
    "mapped",
    [
      42935
    ]
  ],
  [
    [
      42935,
      42935
    ],
    "valid"
  ],
  [
    [
      42936,
      42998
    ],
    "disallowed"
  ],
  [
    [
      42999,
      42999
    ],
    "valid"
  ],
  [
    [
      43e3,
      43e3
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      43001,
      43001
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      43002,
      43002
    ],
    "valid"
  ],
  [
    [
      43003,
      43007
    ],
    "valid"
  ],
  [
    [
      43008,
      43047
    ],
    "valid"
  ],
  [
    [
      43048,
      43051
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43052,
      43055
    ],
    "disallowed"
  ],
  [
    [
      43056,
      43065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43066,
      43071
    ],
    "disallowed"
  ],
  [
    [
      43072,
      43123
    ],
    "valid"
  ],
  [
    [
      43124,
      43127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43128,
      43135
    ],
    "disallowed"
  ],
  [
    [
      43136,
      43204
    ],
    "valid"
  ],
  [
    [
      43205,
      43213
    ],
    "disallowed"
  ],
  [
    [
      43214,
      43215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43216,
      43225
    ],
    "valid"
  ],
  [
    [
      43226,
      43231
    ],
    "disallowed"
  ],
  [
    [
      43232,
      43255
    ],
    "valid"
  ],
  [
    [
      43256,
      43258
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43259,
      43259
    ],
    "valid"
  ],
  [
    [
      43260,
      43260
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43261,
      43261
    ],
    "valid"
  ],
  [
    [
      43262,
      43263
    ],
    "disallowed"
  ],
  [
    [
      43264,
      43309
    ],
    "valid"
  ],
  [
    [
      43310,
      43311
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43312,
      43347
    ],
    "valid"
  ],
  [
    [
      43348,
      43358
    ],
    "disallowed"
  ],
  [
    [
      43359,
      43359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43360,
      43388
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43389,
      43391
    ],
    "disallowed"
  ],
  [
    [
      43392,
      43456
    ],
    "valid"
  ],
  [
    [
      43457,
      43469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43470,
      43470
    ],
    "disallowed"
  ],
  [
    [
      43471,
      43481
    ],
    "valid"
  ],
  [
    [
      43482,
      43485
    ],
    "disallowed"
  ],
  [
    [
      43486,
      43487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43488,
      43518
    ],
    "valid"
  ],
  [
    [
      43519,
      43519
    ],
    "disallowed"
  ],
  [
    [
      43520,
      43574
    ],
    "valid"
  ],
  [
    [
      43575,
      43583
    ],
    "disallowed"
  ],
  [
    [
      43584,
      43597
    ],
    "valid"
  ],
  [
    [
      43598,
      43599
    ],
    "disallowed"
  ],
  [
    [
      43600,
      43609
    ],
    "valid"
  ],
  [
    [
      43610,
      43611
    ],
    "disallowed"
  ],
  [
    [
      43612,
      43615
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43616,
      43638
    ],
    "valid"
  ],
  [
    [
      43639,
      43641
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43642,
      43643
    ],
    "valid"
  ],
  [
    [
      43644,
      43647
    ],
    "valid"
  ],
  [
    [
      43648,
      43714
    ],
    "valid"
  ],
  [
    [
      43715,
      43738
    ],
    "disallowed"
  ],
  [
    [
      43739,
      43741
    ],
    "valid"
  ],
  [
    [
      43742,
      43743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43744,
      43759
    ],
    "valid"
  ],
  [
    [
      43760,
      43761
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43762,
      43766
    ],
    "valid"
  ],
  [
    [
      43767,
      43776
    ],
    "disallowed"
  ],
  [
    [
      43777,
      43782
    ],
    "valid"
  ],
  [
    [
      43783,
      43784
    ],
    "disallowed"
  ],
  [
    [
      43785,
      43790
    ],
    "valid"
  ],
  [
    [
      43791,
      43792
    ],
    "disallowed"
  ],
  [
    [
      43793,
      43798
    ],
    "valid"
  ],
  [
    [
      43799,
      43807
    ],
    "disallowed"
  ],
  [
    [
      43808,
      43814
    ],
    "valid"
  ],
  [
    [
      43815,
      43815
    ],
    "disallowed"
  ],
  [
    [
      43816,
      43822
    ],
    "valid"
  ],
  [
    [
      43823,
      43823
    ],
    "disallowed"
  ],
  [
    [
      43824,
      43866
    ],
    "valid"
  ],
  [
    [
      43867,
      43867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43868,
      43868
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      43869,
      43869
    ],
    "mapped",
    [
      43831
    ]
  ],
  [
    [
      43870,
      43870
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      43871,
      43871
    ],
    "mapped",
    [
      43858
    ]
  ],
  [
    [
      43872,
      43875
    ],
    "valid"
  ],
  [
    [
      43876,
      43877
    ],
    "valid"
  ],
  [
    [
      43878,
      43887
    ],
    "disallowed"
  ],
  [
    [
      43888,
      43888
    ],
    "mapped",
    [
      5024
    ]
  ],
  [
    [
      43889,
      43889
    ],
    "mapped",
    [
      5025
    ]
  ],
  [
    [
      43890,
      43890
    ],
    "mapped",
    [
      5026
    ]
  ],
  [
    [
      43891,
      43891
    ],
    "mapped",
    [
      5027
    ]
  ],
  [
    [
      43892,
      43892
    ],
    "mapped",
    [
      5028
    ]
  ],
  [
    [
      43893,
      43893
    ],
    "mapped",
    [
      5029
    ]
  ],
  [
    [
      43894,
      43894
    ],
    "mapped",
    [
      5030
    ]
  ],
  [
    [
      43895,
      43895
    ],
    "mapped",
    [
      5031
    ]
  ],
  [
    [
      43896,
      43896
    ],
    "mapped",
    [
      5032
    ]
  ],
  [
    [
      43897,
      43897
    ],
    "mapped",
    [
      5033
    ]
  ],
  [
    [
      43898,
      43898
    ],
    "mapped",
    [
      5034
    ]
  ],
  [
    [
      43899,
      43899
    ],
    "mapped",
    [
      5035
    ]
  ],
  [
    [
      43900,
      43900
    ],
    "mapped",
    [
      5036
    ]
  ],
  [
    [
      43901,
      43901
    ],
    "mapped",
    [
      5037
    ]
  ],
  [
    [
      43902,
      43902
    ],
    "mapped",
    [
      5038
    ]
  ],
  [
    [
      43903,
      43903
    ],
    "mapped",
    [
      5039
    ]
  ],
  [
    [
      43904,
      43904
    ],
    "mapped",
    [
      5040
    ]
  ],
  [
    [
      43905,
      43905
    ],
    "mapped",
    [
      5041
    ]
  ],
  [
    [
      43906,
      43906
    ],
    "mapped",
    [
      5042
    ]
  ],
  [
    [
      43907,
      43907
    ],
    "mapped",
    [
      5043
    ]
  ],
  [
    [
      43908,
      43908
    ],
    "mapped",
    [
      5044
    ]
  ],
  [
    [
      43909,
      43909
    ],
    "mapped",
    [
      5045
    ]
  ],
  [
    [
      43910,
      43910
    ],
    "mapped",
    [
      5046
    ]
  ],
  [
    [
      43911,
      43911
    ],
    "mapped",
    [
      5047
    ]
  ],
  [
    [
      43912,
      43912
    ],
    "mapped",
    [
      5048
    ]
  ],
  [
    [
      43913,
      43913
    ],
    "mapped",
    [
      5049
    ]
  ],
  [
    [
      43914,
      43914
    ],
    "mapped",
    [
      5050
    ]
  ],
  [
    [
      43915,
      43915
    ],
    "mapped",
    [
      5051
    ]
  ],
  [
    [
      43916,
      43916
    ],
    "mapped",
    [
      5052
    ]
  ],
  [
    [
      43917,
      43917
    ],
    "mapped",
    [
      5053
    ]
  ],
  [
    [
      43918,
      43918
    ],
    "mapped",
    [
      5054
    ]
  ],
  [
    [
      43919,
      43919
    ],
    "mapped",
    [
      5055
    ]
  ],
  [
    [
      43920,
      43920
    ],
    "mapped",
    [
      5056
    ]
  ],
  [
    [
      43921,
      43921
    ],
    "mapped",
    [
      5057
    ]
  ],
  [
    [
      43922,
      43922
    ],
    "mapped",
    [
      5058
    ]
  ],
  [
    [
      43923,
      43923
    ],
    "mapped",
    [
      5059
    ]
  ],
  [
    [
      43924,
      43924
    ],
    "mapped",
    [
      5060
    ]
  ],
  [
    [
      43925,
      43925
    ],
    "mapped",
    [
      5061
    ]
  ],
  [
    [
      43926,
      43926
    ],
    "mapped",
    [
      5062
    ]
  ],
  [
    [
      43927,
      43927
    ],
    "mapped",
    [
      5063
    ]
  ],
  [
    [
      43928,
      43928
    ],
    "mapped",
    [
      5064
    ]
  ],
  [
    [
      43929,
      43929
    ],
    "mapped",
    [
      5065
    ]
  ],
  [
    [
      43930,
      43930
    ],
    "mapped",
    [
      5066
    ]
  ],
  [
    [
      43931,
      43931
    ],
    "mapped",
    [
      5067
    ]
  ],
  [
    [
      43932,
      43932
    ],
    "mapped",
    [
      5068
    ]
  ],
  [
    [
      43933,
      43933
    ],
    "mapped",
    [
      5069
    ]
  ],
  [
    [
      43934,
      43934
    ],
    "mapped",
    [
      5070
    ]
  ],
  [
    [
      43935,
      43935
    ],
    "mapped",
    [
      5071
    ]
  ],
  [
    [
      43936,
      43936
    ],
    "mapped",
    [
      5072
    ]
  ],
  [
    [
      43937,
      43937
    ],
    "mapped",
    [
      5073
    ]
  ],
  [
    [
      43938,
      43938
    ],
    "mapped",
    [
      5074
    ]
  ],
  [
    [
      43939,
      43939
    ],
    "mapped",
    [
      5075
    ]
  ],
  [
    [
      43940,
      43940
    ],
    "mapped",
    [
      5076
    ]
  ],
  [
    [
      43941,
      43941
    ],
    "mapped",
    [
      5077
    ]
  ],
  [
    [
      43942,
      43942
    ],
    "mapped",
    [
      5078
    ]
  ],
  [
    [
      43943,
      43943
    ],
    "mapped",
    [
      5079
    ]
  ],
  [
    [
      43944,
      43944
    ],
    "mapped",
    [
      5080
    ]
  ],
  [
    [
      43945,
      43945
    ],
    "mapped",
    [
      5081
    ]
  ],
  [
    [
      43946,
      43946
    ],
    "mapped",
    [
      5082
    ]
  ],
  [
    [
      43947,
      43947
    ],
    "mapped",
    [
      5083
    ]
  ],
  [
    [
      43948,
      43948
    ],
    "mapped",
    [
      5084
    ]
  ],
  [
    [
      43949,
      43949
    ],
    "mapped",
    [
      5085
    ]
  ],
  [
    [
      43950,
      43950
    ],
    "mapped",
    [
      5086
    ]
  ],
  [
    [
      43951,
      43951
    ],
    "mapped",
    [
      5087
    ]
  ],
  [
    [
      43952,
      43952
    ],
    "mapped",
    [
      5088
    ]
  ],
  [
    [
      43953,
      43953
    ],
    "mapped",
    [
      5089
    ]
  ],
  [
    [
      43954,
      43954
    ],
    "mapped",
    [
      5090
    ]
  ],
  [
    [
      43955,
      43955
    ],
    "mapped",
    [
      5091
    ]
  ],
  [
    [
      43956,
      43956
    ],
    "mapped",
    [
      5092
    ]
  ],
  [
    [
      43957,
      43957
    ],
    "mapped",
    [
      5093
    ]
  ],
  [
    [
      43958,
      43958
    ],
    "mapped",
    [
      5094
    ]
  ],
  [
    [
      43959,
      43959
    ],
    "mapped",
    [
      5095
    ]
  ],
  [
    [
      43960,
      43960
    ],
    "mapped",
    [
      5096
    ]
  ],
  [
    [
      43961,
      43961
    ],
    "mapped",
    [
      5097
    ]
  ],
  [
    [
      43962,
      43962
    ],
    "mapped",
    [
      5098
    ]
  ],
  [
    [
      43963,
      43963
    ],
    "mapped",
    [
      5099
    ]
  ],
  [
    [
      43964,
      43964
    ],
    "mapped",
    [
      5100
    ]
  ],
  [
    [
      43965,
      43965
    ],
    "mapped",
    [
      5101
    ]
  ],
  [
    [
      43966,
      43966
    ],
    "mapped",
    [
      5102
    ]
  ],
  [
    [
      43967,
      43967
    ],
    "mapped",
    [
      5103
    ]
  ],
  [
    [
      43968,
      44010
    ],
    "valid"
  ],
  [
    [
      44011,
      44011
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      44012,
      44013
    ],
    "valid"
  ],
  [
    [
      44014,
      44015
    ],
    "disallowed"
  ],
  [
    [
      44016,
      44025
    ],
    "valid"
  ],
  [
    [
      44026,
      44031
    ],
    "disallowed"
  ],
  [
    [
      44032,
      55203
    ],
    "valid"
  ],
  [
    [
      55204,
      55215
    ],
    "disallowed"
  ],
  [
    [
      55216,
      55238
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55239,
      55242
    ],
    "disallowed"
  ],
  [
    [
      55243,
      55291
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55292,
      55295
    ],
    "disallowed"
  ],
  [
    [
      55296,
      57343
    ],
    "disallowed"
  ],
  [
    [
      57344,
      63743
    ],
    "disallowed"
  ],
  [
    [
      63744,
      63744
    ],
    "mapped",
    [
      35912
    ]
  ],
  [
    [
      63745,
      63745
    ],
    "mapped",
    [
      26356
    ]
  ],
  [
    [
      63746,
      63746
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      63747,
      63747
    ],
    "mapped",
    [
      36040
    ]
  ],
  [
    [
      63748,
      63748
    ],
    "mapped",
    [
      28369
    ]
  ],
  [
    [
      63749,
      63749
    ],
    "mapped",
    [
      20018
    ]
  ],
  [
    [
      63750,
      63750
    ],
    "mapped",
    [
      21477
    ]
  ],
  [
    [
      63751,
      63752
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      63753,
      63753
    ],
    "mapped",
    [
      22865
    ]
  ],
  [
    [
      63754,
      63754
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      63755,
      63755
    ],
    "mapped",
    [
      21895
    ]
  ],
  [
    [
      63756,
      63756
    ],
    "mapped",
    [
      22856
    ]
  ],
  [
    [
      63757,
      63757
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      63758,
      63758
    ],
    "mapped",
    [
      30313
    ]
  ],
  [
    [
      63759,
      63759
    ],
    "mapped",
    [
      32645
    ]
  ],
  [
    [
      63760,
      63760
    ],
    "mapped",
    [
      34367
    ]
  ],
  [
    [
      63761,
      63761
    ],
    "mapped",
    [
      34746
    ]
  ],
  [
    [
      63762,
      63762
    ],
    "mapped",
    [
      35064
    ]
  ],
  [
    [
      63763,
      63763
    ],
    "mapped",
    [
      37007
    ]
  ],
  [
    [
      63764,
      63764
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63765,
      63765
    ],
    "mapped",
    [
      27931
    ]
  ],
  [
    [
      63766,
      63766
    ],
    "mapped",
    [
      28889
    ]
  ],
  [
    [
      63767,
      63767
    ],
    "mapped",
    [
      29662
    ]
  ],
  [
    [
      63768,
      63768
    ],
    "mapped",
    [
      33853
    ]
  ],
  [
    [
      63769,
      63769
    ],
    "mapped",
    [
      37226
    ]
  ],
  [
    [
      63770,
      63770
    ],
    "mapped",
    [
      39409
    ]
  ],
  [
    [
      63771,
      63771
    ],
    "mapped",
    [
      20098
    ]
  ],
  [
    [
      63772,
      63772
    ],
    "mapped",
    [
      21365
    ]
  ],
  [
    [
      63773,
      63773
    ],
    "mapped",
    [
      27396
    ]
  ],
  [
    [
      63774,
      63774
    ],
    "mapped",
    [
      29211
    ]
  ],
  [
    [
      63775,
      63775
    ],
    "mapped",
    [
      34349
    ]
  ],
  [
    [
      63776,
      63776
    ],
    "mapped",
    [
      40478
    ]
  ],
  [
    [
      63777,
      63777
    ],
    "mapped",
    [
      23888
    ]
  ],
  [
    [
      63778,
      63778
    ],
    "mapped",
    [
      28651
    ]
  ],
  [
    [
      63779,
      63779
    ],
    "mapped",
    [
      34253
    ]
  ],
  [
    [
      63780,
      63780
    ],
    "mapped",
    [
      35172
    ]
  ],
  [
    [
      63781,
      63781
    ],
    "mapped",
    [
      25289
    ]
  ],
  [
    [
      63782,
      63782
    ],
    "mapped",
    [
      33240
    ]
  ],
  [
    [
      63783,
      63783
    ],
    "mapped",
    [
      34847
    ]
  ],
  [
    [
      63784,
      63784
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      63785,
      63785
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      63786,
      63786
    ],
    "mapped",
    [
      28010
    ]
  ],
  [
    [
      63787,
      63787
    ],
    "mapped",
    [
      29436
    ]
  ],
  [
    [
      63788,
      63788
    ],
    "mapped",
    [
      37070
    ]
  ],
  [
    [
      63789,
      63789
    ],
    "mapped",
    [
      20358
    ]
  ],
  [
    [
      63790,
      63790
    ],
    "mapped",
    [
      20919
    ]
  ],
  [
    [
      63791,
      63791
    ],
    "mapped",
    [
      21214
    ]
  ],
  [
    [
      63792,
      63792
    ],
    "mapped",
    [
      25796
    ]
  ],
  [
    [
      63793,
      63793
    ],
    "mapped",
    [
      27347
    ]
  ],
  [
    [
      63794,
      63794
    ],
    "mapped",
    [
      29200
    ]
  ],
  [
    [
      63795,
      63795
    ],
    "mapped",
    [
      30439
    ]
  ],
  [
    [
      63796,
      63796
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      63797,
      63797
    ],
    "mapped",
    [
      34310
    ]
  ],
  [
    [
      63798,
      63798
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      63799,
      63799
    ],
    "mapped",
    [
      36335
    ]
  ],
  [
    [
      63800,
      63800
    ],
    "mapped",
    [
      38706
    ]
  ],
  [
    [
      63801,
      63801
    ],
    "mapped",
    [
      39791
    ]
  ],
  [
    [
      63802,
      63802
    ],
    "mapped",
    [
      40442
    ]
  ],
  [
    [
      63803,
      63803
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      63804,
      63804
    ],
    "mapped",
    [
      31103
    ]
  ],
  [
    [
      63805,
      63805
    ],
    "mapped",
    [
      32160
    ]
  ],
  [
    [
      63806,
      63806
    ],
    "mapped",
    [
      33737
    ]
  ],
  [
    [
      63807,
      63807
    ],
    "mapped",
    [
      37636
    ]
  ],
  [
    [
      63808,
      63808
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      63809,
      63809
    ],
    "mapped",
    [
      35542
    ]
  ],
  [
    [
      63810,
      63810
    ],
    "mapped",
    [
      22751
    ]
  ],
  [
    [
      63811,
      63811
    ],
    "mapped",
    [
      24324
    ]
  ],
  [
    [
      63812,
      63812
    ],
    "mapped",
    [
      31840
    ]
  ],
  [
    [
      63813,
      63813
    ],
    "mapped",
    [
      32894
    ]
  ],
  [
    [
      63814,
      63814
    ],
    "mapped",
    [
      29282
    ]
  ],
  [
    [
      63815,
      63815
    ],
    "mapped",
    [
      30922
    ]
  ],
  [
    [
      63816,
      63816
    ],
    "mapped",
    [
      36034
    ]
  ],
  [
    [
      63817,
      63817
    ],
    "mapped",
    [
      38647
    ]
  ],
  [
    [
      63818,
      63818
    ],
    "mapped",
    [
      22744
    ]
  ],
  [
    [
      63819,
      63819
    ],
    "mapped",
    [
      23650
    ]
  ],
  [
    [
      63820,
      63820
    ],
    "mapped",
    [
      27155
    ]
  ],
  [
    [
      63821,
      63821
    ],
    "mapped",
    [
      28122
    ]
  ],
  [
    [
      63822,
      63822
    ],
    "mapped",
    [
      28431
    ]
  ],
  [
    [
      63823,
      63823
    ],
    "mapped",
    [
      32047
    ]
  ],
  [
    [
      63824,
      63824
    ],
    "mapped",
    [
      32311
    ]
  ],
  [
    [
      63825,
      63825
    ],
    "mapped",
    [
      38475
    ]
  ],
  [
    [
      63826,
      63826
    ],
    "mapped",
    [
      21202
    ]
  ],
  [
    [
      63827,
      63827
    ],
    "mapped",
    [
      32907
    ]
  ],
  [
    [
      63828,
      63828
    ],
    "mapped",
    [
      20956
    ]
  ],
  [
    [
      63829,
      63829
    ],
    "mapped",
    [
      20940
    ]
  ],
  [
    [
      63830,
      63830
    ],
    "mapped",
    [
      31260
    ]
  ],
  [
    [
      63831,
      63831
    ],
    "mapped",
    [
      32190
    ]
  ],
  [
    [
      63832,
      63832
    ],
    "mapped",
    [
      33777
    ]
  ],
  [
    [
      63833,
      63833
    ],
    "mapped",
    [
      38517
    ]
  ],
  [
    [
      63834,
      63834
    ],
    "mapped",
    [
      35712
    ]
  ],
  [
    [
      63835,
      63835
    ],
    "mapped",
    [
      25295
    ]
  ],
  [
    [
      63836,
      63836
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63837,
      63837
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      63838,
      63838
    ],
    "mapped",
    [
      20025
    ]
  ],
  [
    [
      63839,
      63839
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63840,
      63840
    ],
    "mapped",
    [
      24594
    ]
  ],
  [
    [
      63841,
      63841
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63842,
      63842
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      63843,
      63843
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      63844,
      63844
    ],
    "mapped",
    [
      30971
    ]
  ],
  [
    [
      63845,
      63845
    ],
    "mapped",
    [
      20415
    ]
  ],
  [
    [
      63846,
      63846
    ],
    "mapped",
    [
      24489
    ]
  ],
  [
    [
      63847,
      63847
    ],
    "mapped",
    [
      19981
    ]
  ],
  [
    [
      63848,
      63848
    ],
    "mapped",
    [
      27852
    ]
  ],
  [
    [
      63849,
      63849
    ],
    "mapped",
    [
      25976
    ]
  ],
  [
    [
      63850,
      63850
    ],
    "mapped",
    [
      32034
    ]
  ],
  [
    [
      63851,
      63851
    ],
    "mapped",
    [
      21443
    ]
  ],
  [
    [
      63852,
      63852
    ],
    "mapped",
    [
      22622
    ]
  ],
  [
    [
      63853,
      63853
    ],
    "mapped",
    [
      30465
    ]
  ],
  [
    [
      63854,
      63854
    ],
    "mapped",
    [
      33865
    ]
  ],
  [
    [
      63855,
      63855
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63856,
      63856
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      63857,
      63857
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      63858,
      63858
    ],
    "mapped",
    [
      27784
    ]
  ],
  [
    [
      63859,
      63859
    ],
    "mapped",
    [
      25342
    ]
  ],
  [
    [
      63860,
      63860
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      63861,
      63861
    ],
    "mapped",
    [
      25504
    ]
  ],
  [
    [
      63862,
      63862
    ],
    "mapped",
    [
      30053
    ]
  ],
  [
    [
      63863,
      63863
    ],
    "mapped",
    [
      20142
    ]
  ],
  [
    [
      63864,
      63864
    ],
    "mapped",
    [
      20841
    ]
  ],
  [
    [
      63865,
      63865
    ],
    "mapped",
    [
      20937
    ]
  ],
  [
    [
      63866,
      63866
    ],
    "mapped",
    [
      26753
    ]
  ],
  [
    [
      63867,
      63867
    ],
    "mapped",
    [
      31975
    ]
  ],
  [
    [
      63868,
      63868
    ],
    "mapped",
    [
      33391
    ]
  ],
  [
    [
      63869,
      63869
    ],
    "mapped",
    [
      35538
    ]
  ],
  [
    [
      63870,
      63870
    ],
    "mapped",
    [
      37327
    ]
  ],
  [
    [
      63871,
      63871
    ],
    "mapped",
    [
      21237
    ]
  ],
  [
    [
      63872,
      63872
    ],
    "mapped",
    [
      21570
    ]
  ],
  [
    [
      63873,
      63873
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      63874,
      63874
    ],
    "mapped",
    [
      24300
    ]
  ],
  [
    [
      63875,
      63875
    ],
    "mapped",
    [
      26053
    ]
  ],
  [
    [
      63876,
      63876
    ],
    "mapped",
    [
      28670
    ]
  ],
  [
    [
      63877,
      63877
    ],
    "mapped",
    [
      31018
    ]
  ],
  [
    [
      63878,
      63878
    ],
    "mapped",
    [
      38317
    ]
  ],
  [
    [
      63879,
      63879
    ],
    "mapped",
    [
      39530
    ]
  ],
  [
    [
      63880,
      63880
    ],
    "mapped",
    [
      40599
    ]
  ],
  [
    [
      63881,
      63881
    ],
    "mapped",
    [
      40654
    ]
  ],
  [
    [
      63882,
      63882
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      63883,
      63883
    ],
    "mapped",
    [
      26310
    ]
  ],
  [
    [
      63884,
      63884
    ],
    "mapped",
    [
      27511
    ]
  ],
  [
    [
      63885,
      63885
    ],
    "mapped",
    [
      36706
    ]
  ],
  [
    [
      63886,
      63886
    ],
    "mapped",
    [
      24180
    ]
  ],
  [
    [
      63887,
      63887
    ],
    "mapped",
    [
      24976
    ]
  ],
  [
    [
      63888,
      63888
    ],
    "mapped",
    [
      25088
    ]
  ],
  [
    [
      63889,
      63889
    ],
    "mapped",
    [
      25754
    ]
  ],
  [
    [
      63890,
      63890
    ],
    "mapped",
    [
      28451
    ]
  ],
  [
    [
      63891,
      63891
    ],
    "mapped",
    [
      29001
    ]
  ],
  [
    [
      63892,
      63892
    ],
    "mapped",
    [
      29833
    ]
  ],
  [
    [
      63893,
      63893
    ],
    "mapped",
    [
      31178
    ]
  ],
  [
    [
      63894,
      63894
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      63895,
      63895
    ],
    "mapped",
    [
      32879
    ]
  ],
  [
    [
      63896,
      63896
    ],
    "mapped",
    [
      36646
    ]
  ],
  [
    [
      63897,
      63897
    ],
    "mapped",
    [
      34030
    ]
  ],
  [
    [
      63898,
      63898
    ],
    "mapped",
    [
      36899
    ]
  ],
  [
    [
      63899,
      63899
    ],
    "mapped",
    [
      37706
    ]
  ],
  [
    [
      63900,
      63900
    ],
    "mapped",
    [
      21015
    ]
  ],
  [
    [
      63901,
      63901
    ],
    "mapped",
    [
      21155
    ]
  ],
  [
    [
      63902,
      63902
    ],
    "mapped",
    [
      21693
    ]
  ],
  [
    [
      63903,
      63903
    ],
    "mapped",
    [
      28872
    ]
  ],
  [
    [
      63904,
      63904
    ],
    "mapped",
    [
      35010
    ]
  ],
  [
    [
      63905,
      63905
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63906,
      63906
    ],
    "mapped",
    [
      24265
    ]
  ],
  [
    [
      63907,
      63907
    ],
    "mapped",
    [
      24565
    ]
  ],
  [
    [
      63908,
      63908
    ],
    "mapped",
    [
      25467
    ]
  ],
  [
    [
      63909,
      63909
    ],
    "mapped",
    [
      27566
    ]
  ],
  [
    [
      63910,
      63910
    ],
    "mapped",
    [
      31806
    ]
  ],
  [
    [
      63911,
      63911
    ],
    "mapped",
    [
      29557
    ]
  ],
  [
    [
      63912,
      63912
    ],
    "mapped",
    [
      20196
    ]
  ],
  [
    [
      63913,
      63913
    ],
    "mapped",
    [
      22265
    ]
  ],
  [
    [
      63914,
      63914
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63915,
      63915
    ],
    "mapped",
    [
      23994
    ]
  ],
  [
    [
      63916,
      63916
    ],
    "mapped",
    [
      24604
    ]
  ],
  [
    [
      63917,
      63917
    ],
    "mapped",
    [
      29618
    ]
  ],
  [
    [
      63918,
      63918
    ],
    "mapped",
    [
      29801
    ]
  ],
  [
    [
      63919,
      63919
    ],
    "mapped",
    [
      32666
    ]
  ],
  [
    [
      63920,
      63920
    ],
    "mapped",
    [
      32838
    ]
  ],
  [
    [
      63921,
      63921
    ],
    "mapped",
    [
      37428
    ]
  ],
  [
    [
      63922,
      63922
    ],
    "mapped",
    [
      38646
    ]
  ],
  [
    [
      63923,
      63923
    ],
    "mapped",
    [
      38728
    ]
  ],
  [
    [
      63924,
      63924
    ],
    "mapped",
    [
      38936
    ]
  ],
  [
    [
      63925,
      63925
    ],
    "mapped",
    [
      20363
    ]
  ],
  [
    [
      63926,
      63926
    ],
    "mapped",
    [
      31150
    ]
  ],
  [
    [
      63927,
      63927
    ],
    "mapped",
    [
      37300
    ]
  ],
  [
    [
      63928,
      63928
    ],
    "mapped",
    [
      38584
    ]
  ],
  [
    [
      63929,
      63929
    ],
    "mapped",
    [
      24801
    ]
  ],
  [
    [
      63930,
      63930
    ],
    "mapped",
    [
      20102
    ]
  ],
  [
    [
      63931,
      63931
    ],
    "mapped",
    [
      20698
    ]
  ],
  [
    [
      63932,
      63932
    ],
    "mapped",
    [
      23534
    ]
  ],
  [
    [
      63933,
      63933
    ],
    "mapped",
    [
      23615
    ]
  ],
  [
    [
      63934,
      63934
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      63935,
      63935
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63936,
      63936
    ],
    "mapped",
    [
      29134
    ]
  ],
  [
    [
      63937,
      63937
    ],
    "mapped",
    [
      30274
    ]
  ],
  [
    [
      63938,
      63938
    ],
    "mapped",
    [
      34044
    ]
  ],
  [
    [
      63939,
      63939
    ],
    "mapped",
    [
      36988
    ]
  ],
  [
    [
      63940,
      63940
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      63941,
      63941
    ],
    "mapped",
    [
      26248
    ]
  ],
  [
    [
      63942,
      63942
    ],
    "mapped",
    [
      38446
    ]
  ],
  [
    [
      63943,
      63943
    ],
    "mapped",
    [
      21129
    ]
  ],
  [
    [
      63944,
      63944
    ],
    "mapped",
    [
      26491
    ]
  ],
  [
    [
      63945,
      63945
    ],
    "mapped",
    [
      26611
    ]
  ],
  [
    [
      63946,
      63946
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      63947,
      63947
    ],
    "mapped",
    [
      28316
    ]
  ],
  [
    [
      63948,
      63948
    ],
    "mapped",
    [
      29705
    ]
  ],
  [
    [
      63949,
      63949
    ],
    "mapped",
    [
      30041
    ]
  ],
  [
    [
      63950,
      63950
    ],
    "mapped",
    [
      30827
    ]
  ],
  [
    [
      63951,
      63951
    ],
    "mapped",
    [
      32016
    ]
  ],
  [
    [
      63952,
      63952
    ],
    "mapped",
    [
      39006
    ]
  ],
  [
    [
      63953,
      63953
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      63954,
      63954
    ],
    "mapped",
    [
      25134
    ]
  ],
  [
    [
      63955,
      63955
    ],
    "mapped",
    [
      38520
    ]
  ],
  [
    [
      63956,
      63956
    ],
    "mapped",
    [
      20523
    ]
  ],
  [
    [
      63957,
      63957
    ],
    "mapped",
    [
      23833
    ]
  ],
  [
    [
      63958,
      63958
    ],
    "mapped",
    [
      28138
    ]
  ],
  [
    [
      63959,
      63959
    ],
    "mapped",
    [
      36650
    ]
  ],
  [
    [
      63960,
      63960
    ],
    "mapped",
    [
      24459
    ]
  ],
  [
    [
      63961,
      63961
    ],
    "mapped",
    [
      24900
    ]
  ],
  [
    [
      63962,
      63962
    ],
    "mapped",
    [
      26647
    ]
  ],
  [
    [
      63963,
      63963
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63964,
      63964
    ],
    "mapped",
    [
      38534
    ]
  ],
  [
    [
      63965,
      63965
    ],
    "mapped",
    [
      21033
    ]
  ],
  [
    [
      63966,
      63966
    ],
    "mapped",
    [
      21519
    ]
  ],
  [
    [
      63967,
      63967
    ],
    "mapped",
    [
      23653
    ]
  ],
  [
    [
      63968,
      63968
    ],
    "mapped",
    [
      26131
    ]
  ],
  [
    [
      63969,
      63969
    ],
    "mapped",
    [
      26446
    ]
  ],
  [
    [
      63970,
      63970
    ],
    "mapped",
    [
      26792
    ]
  ],
  [
    [
      63971,
      63971
    ],
    "mapped",
    [
      27877
    ]
  ],
  [
    [
      63972,
      63972
    ],
    "mapped",
    [
      29702
    ]
  ],
  [
    [
      63973,
      63973
    ],
    "mapped",
    [
      30178
    ]
  ],
  [
    [
      63974,
      63974
    ],
    "mapped",
    [
      32633
    ]
  ],
  [
    [
      63975,
      63975
    ],
    "mapped",
    [
      35023
    ]
  ],
  [
    [
      63976,
      63976
    ],
    "mapped",
    [
      35041
    ]
  ],
  [
    [
      63977,
      63977
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      63978,
      63978
    ],
    "mapped",
    [
      38626
    ]
  ],
  [
    [
      63979,
      63979
    ],
    "mapped",
    [
      21311
    ]
  ],
  [
    [
      63980,
      63980
    ],
    "mapped",
    [
      28346
    ]
  ],
  [
    [
      63981,
      63981
    ],
    "mapped",
    [
      21533
    ]
  ],
  [
    [
      63982,
      63982
    ],
    "mapped",
    [
      29136
    ]
  ],
  [
    [
      63983,
      63983
    ],
    "mapped",
    [
      29848
    ]
  ],
  [
    [
      63984,
      63984
    ],
    "mapped",
    [
      34298
    ]
  ],
  [
    [
      63985,
      63985
    ],
    "mapped",
    [
      38563
    ]
  ],
  [
    [
      63986,
      63986
    ],
    "mapped",
    [
      40023
    ]
  ],
  [
    [
      63987,
      63987
    ],
    "mapped",
    [
      40607
    ]
  ],
  [
    [
      63988,
      63988
    ],
    "mapped",
    [
      26519
    ]
  ],
  [
    [
      63989,
      63989
    ],
    "mapped",
    [
      28107
    ]
  ],
  [
    [
      63990,
      63990
    ],
    "mapped",
    [
      33256
    ]
  ],
  [
    [
      63991,
      63991
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      63992,
      63992
    ],
    "mapped",
    [
      31520
    ]
  ],
  [
    [
      63993,
      63993
    ],
    "mapped",
    [
      31890
    ]
  ],
  [
    [
      63994,
      63994
    ],
    "mapped",
    [
      29376
    ]
  ],
  [
    [
      63995,
      63995
    ],
    "mapped",
    [
      28825
    ]
  ],
  [
    [
      63996,
      63996
    ],
    "mapped",
    [
      35672
    ]
  ],
  [
    [
      63997,
      63997
    ],
    "mapped",
    [
      20160
    ]
  ],
  [
    [
      63998,
      63998
    ],
    "mapped",
    [
      33590
    ]
  ],
  [
    [
      63999,
      63999
    ],
    "mapped",
    [
      21050
    ]
  ],
  [
    [
      64e3,
      64e3
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      64001,
      64001
    ],
    "mapped",
    [
      24230
    ]
  ],
  [
    [
      64002,
      64002
    ],
    "mapped",
    [
      25299
    ]
  ],
  [
    [
      64003,
      64003
    ],
    "mapped",
    [
      31958
    ]
  ],
  [
    [
      64004,
      64004
    ],
    "mapped",
    [
      23429
    ]
  ],
  [
    [
      64005,
      64005
    ],
    "mapped",
    [
      27934
    ]
  ],
  [
    [
      64006,
      64006
    ],
    "mapped",
    [
      26292
    ]
  ],
  [
    [
      64007,
      64007
    ],
    "mapped",
    [
      36667
    ]
  ],
  [
    [
      64008,
      64008
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      64009,
      64009
    ],
    "mapped",
    [
      38477
    ]
  ],
  [
    [
      64010,
      64010
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      64011,
      64011
    ],
    "mapped",
    [
      24275
    ]
  ],
  [
    [
      64012,
      64012
    ],
    "mapped",
    [
      20800
    ]
  ],
  [
    [
      64013,
      64013
    ],
    "mapped",
    [
      21952
    ]
  ],
  [
    [
      64014,
      64015
    ],
    "valid"
  ],
  [
    [
      64016,
      64016
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64017,
      64017
    ],
    "valid"
  ],
  [
    [
      64018,
      64018
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64019,
      64020
    ],
    "valid"
  ],
  [
    [
      64021,
      64021
    ],
    "mapped",
    [
      20958
    ]
  ],
  [
    [
      64022,
      64022
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64023,
      64023
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64024,
      64024
    ],
    "mapped",
    [
      31036
    ]
  ],
  [
    [
      64025,
      64025
    ],
    "mapped",
    [
      31070
    ]
  ],
  [
    [
      64026,
      64026
    ],
    "mapped",
    [
      31077
    ]
  ],
  [
    [
      64027,
      64027
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      64028,
      64028
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64029,
      64029
    ],
    "mapped",
    [
      31934
    ]
  ],
  [
    [
      64030,
      64030
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      64031,
      64031
    ],
    "valid"
  ],
  [
    [
      64032,
      64032
    ],
    "mapped",
    [
      34322
    ]
  ],
  [
    [
      64033,
      64033
    ],
    "valid"
  ],
  [
    [
      64034,
      64034
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64035,
      64036
    ],
    "valid"
  ],
  [
    [
      64037,
      64037
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64038,
      64038
    ],
    "mapped",
    [
      37117
    ]
  ],
  [
    [
      64039,
      64041
    ],
    "valid"
  ],
  [
    [
      64042,
      64042
    ],
    "mapped",
    [
      39151
    ]
  ],
  [
    [
      64043,
      64043
    ],
    "mapped",
    [
      39164
    ]
  ],
  [
    [
      64044,
      64044
    ],
    "mapped",
    [
      39208
    ]
  ],
  [
    [
      64045,
      64045
    ],
    "mapped",
    [
      40372
    ]
  ],
  [
    [
      64046,
      64046
    ],
    "mapped",
    [
      37086
    ]
  ],
  [
    [
      64047,
      64047
    ],
    "mapped",
    [
      38583
    ]
  ],
  [
    [
      64048,
      64048
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      64049,
      64049
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      64050,
      64050
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      64051,
      64051
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      64052,
      64052
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      64053,
      64053
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      64054,
      64054
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64055,
      64055
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      64056,
      64056
    ],
    "mapped",
    [
      22120
    ]
  ],
  [
    [
      64057,
      64057
    ],
    "mapped",
    [
      22592
    ]
  ],
  [
    [
      64058,
      64058
    ],
    "mapped",
    [
      22696
    ]
  ],
  [
    [
      64059,
      64059
    ],
    "mapped",
    [
      23652
    ]
  ],
  [
    [
      64060,
      64060
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      64061,
      64061
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      64062,
      64062
    ],
    "mapped",
    [
      24936
    ]
  ],
  [
    [
      64063,
      64063
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64064,
      64064
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64065,
      64065
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      64066,
      64066
    ],
    "mapped",
    [
      26082
    ]
  ],
  [
    [
      64067,
      64067
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      64068,
      64068
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      64069,
      64069
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      64070,
      64070
    ],
    "mapped",
    [
      28186
    ]
  ],
  [
    [
      64071,
      64071
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64072,
      64072
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64073,
      64073
    ],
    "mapped",
    [
      29227
    ]
  ],
  [
    [
      64074,
      64074
    ],
    "mapped",
    [
      29730
    ]
  ],
  [
    [
      64075,
      64075
    ],
    "mapped",
    [
      30865
    ]
  ],
  [
    [
      64076,
      64076
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      64077,
      64077
    ],
    "mapped",
    [
      31049
    ]
  ],
  [
    [
      64078,
      64078
    ],
    "mapped",
    [
      31048
    ]
  ],
  [
    [
      64079,
      64079
    ],
    "mapped",
    [
      31056
    ]
  ],
  [
    [
      64080,
      64080
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      64081,
      64081
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      64082,
      64082
    ],
    "mapped",
    [
      31117
    ]
  ],
  [
    [
      64083,
      64083
    ],
    "mapped",
    [
      31118
    ]
  ],
  [
    [
      64084,
      64084
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      64085,
      64085
    ],
    "mapped",
    [
      31361
    ]
  ],
  [
    [
      64086,
      64086
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64087,
      64087
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64088,
      64088
    ],
    "mapped",
    [
      32265
    ]
  ],
  [
    [
      64089,
      64089
    ],
    "mapped",
    [
      32321
    ]
  ],
  [
    [
      64090,
      64090
    ],
    "mapped",
    [
      32626
    ]
  ],
  [
    [
      64091,
      64091
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64092,
      64092
    ],
    "mapped",
    [
      33261
    ]
  ],
  [
    [
      64093,
      64094
    ],
    "mapped",
    [
      33401
    ]
  ],
  [
    [
      64095,
      64095
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      64096,
      64096
    ],
    "mapped",
    [
      35088
    ]
  ],
  [
    [
      64097,
      64097
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64098,
      64098
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64099,
      64099
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64100,
      64100
    ],
    "mapped",
    [
      36051
    ]
  ],
  [
    [
      64101,
      64101
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64102,
      64102
    ],
    "mapped",
    [
      36790
    ]
  ],
  [
    [
      64103,
      64103
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64104,
      64104
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64105,
      64105
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64106,
      64106
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64107,
      64107
    ],
    "mapped",
    [
      24693
    ]
  ],
  [
    [
      64108,
      64108
    ],
    "mapped",
    [
      148206
    ]
  ],
  [
    [
      64109,
      64109
    ],
    "mapped",
    [
      33304
    ]
  ],
  [
    [
      64110,
      64111
    ],
    "disallowed"
  ],
  [
    [
      64112,
      64112
    ],
    "mapped",
    [
      20006
    ]
  ],
  [
    [
      64113,
      64113
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      64114,
      64114
    ],
    "mapped",
    [
      20840
    ]
  ],
  [
    [
      64115,
      64115
    ],
    "mapped",
    [
      20352
    ]
  ],
  [
    [
      64116,
      64116
    ],
    "mapped",
    [
      20805
    ]
  ],
  [
    [
      64117,
      64117
    ],
    "mapped",
    [
      20864
    ]
  ],
  [
    [
      64118,
      64118
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      64119,
      64119
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      64120,
      64120
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64121,
      64121
    ],
    "mapped",
    [
      21845
    ]
  ],
  [
    [
      64122,
      64122
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      64123,
      64123
    ],
    "mapped",
    [
      21986
    ]
  ],
  [
    [
      64124,
      64124
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64125,
      64125
    ],
    "mapped",
    [
      22707
    ]
  ],
  [
    [
      64126,
      64126
    ],
    "mapped",
    [
      22852
    ]
  ],
  [
    [
      64127,
      64127
    ],
    "mapped",
    [
      22868
    ]
  ],
  [
    [
      64128,
      64128
    ],
    "mapped",
    [
      23138
    ]
  ],
  [
    [
      64129,
      64129
    ],
    "mapped",
    [
      23336
    ]
  ],
  [
    [
      64130,
      64130
    ],
    "mapped",
    [
      24274
    ]
  ],
  [
    [
      64131,
      64131
    ],
    "mapped",
    [
      24281
    ]
  ],
  [
    [
      64132,
      64132
    ],
    "mapped",
    [
      24425
    ]
  ],
  [
    [
      64133,
      64133
    ],
    "mapped",
    [
      24493
    ]
  ],
  [
    [
      64134,
      64134
    ],
    "mapped",
    [
      24792
    ]
  ],
  [
    [
      64135,
      64135
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      64136,
      64136
    ],
    "mapped",
    [
      24840
    ]
  ],
  [
    [
      64137,
      64137
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64138,
      64138
    ],
    "mapped",
    [
      24928
    ]
  ],
  [
    [
      64139,
      64139
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64140,
      64140
    ],
    "mapped",
    [
      25140
    ]
  ],
  [
    [
      64141,
      64141
    ],
    "mapped",
    [
      25540
    ]
  ],
  [
    [
      64142,
      64142
    ],
    "mapped",
    [
      25628
    ]
  ],
  [
    [
      64143,
      64143
    ],
    "mapped",
    [
      25682
    ]
  ],
  [
    [
      64144,
      64144
    ],
    "mapped",
    [
      25942
    ]
  ],
  [
    [
      64145,
      64145
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64146,
      64146
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      64147,
      64147
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      64148,
      64148
    ],
    "mapped",
    [
      26454
    ]
  ],
  [
    [
      64149,
      64149
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      64150,
      64150
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      64151,
      64151
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      64152,
      64152
    ],
    "mapped",
    [
      28379
    ]
  ],
  [
    [
      64153,
      64153
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      64154,
      64154
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64155,
      64155
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      64156,
      64156
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64157,
      64157
    ],
    "mapped",
    [
      30631
    ]
  ],
  [
    [
      64158,
      64158
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      64159,
      64159
    ],
    "mapped",
    [
      29359
    ]
  ],
  [
    [
      64160,
      64160
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64161,
      64161
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      64162,
      64162
    ],
    "mapped",
    [
      29958
    ]
  ],
  [
    [
      64163,
      64163
    ],
    "mapped",
    [
      30011
    ]
  ],
  [
    [
      64164,
      64164
    ],
    "mapped",
    [
      30237
    ]
  ],
  [
    [
      64165,
      64165
    ],
    "mapped",
    [
      30239
    ]
  ],
  [
    [
      64166,
      64166
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64167,
      64167
    ],
    "mapped",
    [
      30427
    ]
  ],
  [
    [
      64168,
      64168
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      64169,
      64169
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      64170,
      64170
    ],
    "mapped",
    [
      30528
    ]
  ],
  [
    [
      64171,
      64171
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      64172,
      64172
    ],
    "mapped",
    [
      31409
    ]
  ],
  [
    [
      64173,
      64173
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64174,
      64174
    ],
    "mapped",
    [
      31867
    ]
  ],
  [
    [
      64175,
      64175
    ],
    "mapped",
    [
      32091
    ]
  ],
  [
    [
      64176,
      64176
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64177,
      64177
    ],
    "mapped",
    [
      32574
    ]
  ],
  [
    [
      64178,
      64178
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64179,
      64179
    ],
    "mapped",
    [
      33618
    ]
  ],
  [
    [
      64180,
      64180
    ],
    "mapped",
    [
      33775
    ]
  ],
  [
    [
      64181,
      64181
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      64182,
      64182
    ],
    "mapped",
    [
      35137
    ]
  ],
  [
    [
      64183,
      64183
    ],
    "mapped",
    [
      35206
    ]
  ],
  [
    [
      64184,
      64184
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64185,
      64185
    ],
    "mapped",
    [
      35519
    ]
  ],
  [
    [
      64186,
      64186
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64187,
      64187
    ],
    "mapped",
    [
      35531
    ]
  ],
  [
    [
      64188,
      64188
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64189,
      64189
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      64190,
      64190
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      64191,
      64191
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64192,
      64192
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      64193,
      64193
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64194,
      64194
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      64195,
      64195
    ],
    "mapped",
    [
      36978
    ]
  ],
  [
    [
      64196,
      64196
    ],
    "mapped",
    [
      37273
    ]
  ],
  [
    [
      64197,
      64197
    ],
    "mapped",
    [
      37494
    ]
  ],
  [
    [
      64198,
      64198
    ],
    "mapped",
    [
      38524
    ]
  ],
  [
    [
      64199,
      64199
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64200,
      64200
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64201,
      64201
    ],
    "mapped",
    [
      38875
    ]
  ],
  [
    [
      64202,
      64202
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64203,
      64203
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      64204,
      64204
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64205,
      64205
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      64206,
      64206
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      64207,
      64207
    ],
    "mapped",
    [
      141386
    ]
  ],
  [
    [
      64208,
      64208
    ],
    "mapped",
    [
      141380
    ]
  ],
  [
    [
      64209,
      64209
    ],
    "mapped",
    [
      144341
    ]
  ],
  [
    [
      64210,
      64210
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      64211,
      64211
    ],
    "mapped",
    [
      16408
    ]
  ],
  [
    [
      64212,
      64212
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      64213,
      64213
    ],
    "mapped",
    [
      152137
    ]
  ],
  [
    [
      64214,
      64214
    ],
    "mapped",
    [
      154832
    ]
  ],
  [
    [
      64215,
      64215
    ],
    "mapped",
    [
      163539
    ]
  ],
  [
    [
      64216,
      64216
    ],
    "mapped",
    [
      40771
    ]
  ],
  [
    [
      64217,
      64217
    ],
    "mapped",
    [
      40846
    ]
  ],
  [
    [
      64218,
      64255
    ],
    "disallowed"
  ],
  [
    [
      64256,
      64256
    ],
    "mapped",
    [
      102,
      102
    ]
  ],
  [
    [
      64257,
      64257
    ],
    "mapped",
    [
      102,
      105
    ]
  ],
  [
    [
      64258,
      64258
    ],
    "mapped",
    [
      102,
      108
    ]
  ],
  [
    [
      64259,
      64259
    ],
    "mapped",
    [
      102,
      102,
      105
    ]
  ],
  [
    [
      64260,
      64260
    ],
    "mapped",
    [
      102,
      102,
      108
    ]
  ],
  [
    [
      64261,
      64262
    ],
    "mapped",
    [
      115,
      116
    ]
  ],
  [
    [
      64263,
      64274
    ],
    "disallowed"
  ],
  [
    [
      64275,
      64275
    ],
    "mapped",
    [
      1396,
      1398
    ]
  ],
  [
    [
      64276,
      64276
    ],
    "mapped",
    [
      1396,
      1381
    ]
  ],
  [
    [
      64277,
      64277
    ],
    "mapped",
    [
      1396,
      1387
    ]
  ],
  [
    [
      64278,
      64278
    ],
    "mapped",
    [
      1406,
      1398
    ]
  ],
  [
    [
      64279,
      64279
    ],
    "mapped",
    [
      1396,
      1389
    ]
  ],
  [
    [
      64280,
      64284
    ],
    "disallowed"
  ],
  [
    [
      64285,
      64285
    ],
    "mapped",
    [
      1497,
      1460
    ]
  ],
  [
    [
      64286,
      64286
    ],
    "valid"
  ],
  [
    [
      64287,
      64287
    ],
    "mapped",
    [
      1522,
      1463
    ]
  ],
  [
    [
      64288,
      64288
    ],
    "mapped",
    [
      1506
    ]
  ],
  [
    [
      64289,
      64289
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      64290,
      64290
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      64291,
      64291
    ],
    "mapped",
    [
      1492
    ]
  ],
  [
    [
      64292,
      64292
    ],
    "mapped",
    [
      1499
    ]
  ],
  [
    [
      64293,
      64293
    ],
    "mapped",
    [
      1500
    ]
  ],
  [
    [
      64294,
      64294
    ],
    "mapped",
    [
      1501
    ]
  ],
  [
    [
      64295,
      64295
    ],
    "mapped",
    [
      1512
    ]
  ],
  [
    [
      64296,
      64296
    ],
    "mapped",
    [
      1514
    ]
  ],
  [
    [
      64297,
      64297
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      64298,
      64298
    ],
    "mapped",
    [
      1513,
      1473
    ]
  ],
  [
    [
      64299,
      64299
    ],
    "mapped",
    [
      1513,
      1474
    ]
  ],
  [
    [
      64300,
      64300
    ],
    "mapped",
    [
      1513,
      1468,
      1473
    ]
  ],
  [
    [
      64301,
      64301
    ],
    "mapped",
    [
      1513,
      1468,
      1474
    ]
  ],
  [
    [
      64302,
      64302
    ],
    "mapped",
    [
      1488,
      1463
    ]
  ],
  [
    [
      64303,
      64303
    ],
    "mapped",
    [
      1488,
      1464
    ]
  ],
  [
    [
      64304,
      64304
    ],
    "mapped",
    [
      1488,
      1468
    ]
  ],
  [
    [
      64305,
      64305
    ],
    "mapped",
    [
      1489,
      1468
    ]
  ],
  [
    [
      64306,
      64306
    ],
    "mapped",
    [
      1490,
      1468
    ]
  ],
  [
    [
      64307,
      64307
    ],
    "mapped",
    [
      1491,
      1468
    ]
  ],
  [
    [
      64308,
      64308
    ],
    "mapped",
    [
      1492,
      1468
    ]
  ],
  [
    [
      64309,
      64309
    ],
    "mapped",
    [
      1493,
      1468
    ]
  ],
  [
    [
      64310,
      64310
    ],
    "mapped",
    [
      1494,
      1468
    ]
  ],
  [
    [
      64311,
      64311
    ],
    "disallowed"
  ],
  [
    [
      64312,
      64312
    ],
    "mapped",
    [
      1496,
      1468
    ]
  ],
  [
    [
      64313,
      64313
    ],
    "mapped",
    [
      1497,
      1468
    ]
  ],
  [
    [
      64314,
      64314
    ],
    "mapped",
    [
      1498,
      1468
    ]
  ],
  [
    [
      64315,
      64315
    ],
    "mapped",
    [
      1499,
      1468
    ]
  ],
  [
    [
      64316,
      64316
    ],
    "mapped",
    [
      1500,
      1468
    ]
  ],
  [
    [
      64317,
      64317
    ],
    "disallowed"
  ],
  [
    [
      64318,
      64318
    ],
    "mapped",
    [
      1502,
      1468
    ]
  ],
  [
    [
      64319,
      64319
    ],
    "disallowed"
  ],
  [
    [
      64320,
      64320
    ],
    "mapped",
    [
      1504,
      1468
    ]
  ],
  [
    [
      64321,
      64321
    ],
    "mapped",
    [
      1505,
      1468
    ]
  ],
  [
    [
      64322,
      64322
    ],
    "disallowed"
  ],
  [
    [
      64323,
      64323
    ],
    "mapped",
    [
      1507,
      1468
    ]
  ],
  [
    [
      64324,
      64324
    ],
    "mapped",
    [
      1508,
      1468
    ]
  ],
  [
    [
      64325,
      64325
    ],
    "disallowed"
  ],
  [
    [
      64326,
      64326
    ],
    "mapped",
    [
      1510,
      1468
    ]
  ],
  [
    [
      64327,
      64327
    ],
    "mapped",
    [
      1511,
      1468
    ]
  ],
  [
    [
      64328,
      64328
    ],
    "mapped",
    [
      1512,
      1468
    ]
  ],
  [
    [
      64329,
      64329
    ],
    "mapped",
    [
      1513,
      1468
    ]
  ],
  [
    [
      64330,
      64330
    ],
    "mapped",
    [
      1514,
      1468
    ]
  ],
  [
    [
      64331,
      64331
    ],
    "mapped",
    [
      1493,
      1465
    ]
  ],
  [
    [
      64332,
      64332
    ],
    "mapped",
    [
      1489,
      1471
    ]
  ],
  [
    [
      64333,
      64333
    ],
    "mapped",
    [
      1499,
      1471
    ]
  ],
  [
    [
      64334,
      64334
    ],
    "mapped",
    [
      1508,
      1471
    ]
  ],
  [
    [
      64335,
      64335
    ],
    "mapped",
    [
      1488,
      1500
    ]
  ],
  [
    [
      64336,
      64337
    ],
    "mapped",
    [
      1649
    ]
  ],
  [
    [
      64338,
      64341
    ],
    "mapped",
    [
      1659
    ]
  ],
  [
    [
      64342,
      64345
    ],
    "mapped",
    [
      1662
    ]
  ],
  [
    [
      64346,
      64349
    ],
    "mapped",
    [
      1664
    ]
  ],
  [
    [
      64350,
      64353
    ],
    "mapped",
    [
      1658
    ]
  ],
  [
    [
      64354,
      64357
    ],
    "mapped",
    [
      1663
    ]
  ],
  [
    [
      64358,
      64361
    ],
    "mapped",
    [
      1657
    ]
  ],
  [
    [
      64362,
      64365
    ],
    "mapped",
    [
      1700
    ]
  ],
  [
    [
      64366,
      64369
    ],
    "mapped",
    [
      1702
    ]
  ],
  [
    [
      64370,
      64373
    ],
    "mapped",
    [
      1668
    ]
  ],
  [
    [
      64374,
      64377
    ],
    "mapped",
    [
      1667
    ]
  ],
  [
    [
      64378,
      64381
    ],
    "mapped",
    [
      1670
    ]
  ],
  [
    [
      64382,
      64385
    ],
    "mapped",
    [
      1671
    ]
  ],
  [
    [
      64386,
      64387
    ],
    "mapped",
    [
      1677
    ]
  ],
  [
    [
      64388,
      64389
    ],
    "mapped",
    [
      1676
    ]
  ],
  [
    [
      64390,
      64391
    ],
    "mapped",
    [
      1678
    ]
  ],
  [
    [
      64392,
      64393
    ],
    "mapped",
    [
      1672
    ]
  ],
  [
    [
      64394,
      64395
    ],
    "mapped",
    [
      1688
    ]
  ],
  [
    [
      64396,
      64397
    ],
    "mapped",
    [
      1681
    ]
  ],
  [
    [
      64398,
      64401
    ],
    "mapped",
    [
      1705
    ]
  ],
  [
    [
      64402,
      64405
    ],
    "mapped",
    [
      1711
    ]
  ],
  [
    [
      64406,
      64409
    ],
    "mapped",
    [
      1715
    ]
  ],
  [
    [
      64410,
      64413
    ],
    "mapped",
    [
      1713
    ]
  ],
  [
    [
      64414,
      64415
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      64416,
      64419
    ],
    "mapped",
    [
      1723
    ]
  ],
  [
    [
      64420,
      64421
    ],
    "mapped",
    [
      1728
    ]
  ],
  [
    [
      64422,
      64425
    ],
    "mapped",
    [
      1729
    ]
  ],
  [
    [
      64426,
      64429
    ],
    "mapped",
    [
      1726
    ]
  ],
  [
    [
      64430,
      64431
    ],
    "mapped",
    [
      1746
    ]
  ],
  [
    [
      64432,
      64433
    ],
    "mapped",
    [
      1747
    ]
  ],
  [
    [
      64434,
      64449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64450,
      64466
    ],
    "disallowed"
  ],
  [
    [
      64467,
      64470
    ],
    "mapped",
    [
      1709
    ]
  ],
  [
    [
      64471,
      64472
    ],
    "mapped",
    [
      1735
    ]
  ],
  [
    [
      64473,
      64474
    ],
    "mapped",
    [
      1734
    ]
  ],
  [
    [
      64475,
      64476
    ],
    "mapped",
    [
      1736
    ]
  ],
  [
    [
      64477,
      64477
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      64478,
      64479
    ],
    "mapped",
    [
      1739
    ]
  ],
  [
    [
      64480,
      64481
    ],
    "mapped",
    [
      1733
    ]
  ],
  [
    [
      64482,
      64483
    ],
    "mapped",
    [
      1737
    ]
  ],
  [
    [
      64484,
      64487
    ],
    "mapped",
    [
      1744
    ]
  ],
  [
    [
      64488,
      64489
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      64490,
      64491
    ],
    "mapped",
    [
      1574,
      1575
    ]
  ],
  [
    [
      64492,
      64493
    ],
    "mapped",
    [
      1574,
      1749
    ]
  ],
  [
    [
      64494,
      64495
    ],
    "mapped",
    [
      1574,
      1608
    ]
  ],
  [
    [
      64496,
      64497
    ],
    "mapped",
    [
      1574,
      1735
    ]
  ],
  [
    [
      64498,
      64499
    ],
    "mapped",
    [
      1574,
      1734
    ]
  ],
  [
    [
      64500,
      64501
    ],
    "mapped",
    [
      1574,
      1736
    ]
  ],
  [
    [
      64502,
      64504
    ],
    "mapped",
    [
      1574,
      1744
    ]
  ],
  [
    [
      64505,
      64507
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64508,
      64511
    ],
    "mapped",
    [
      1740
    ]
  ],
  [
    [
      64512,
      64512
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64513,
      64513
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64514,
      64514
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64515,
      64515
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64516,
      64516
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64517,
      64517
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64518,
      64518
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64519,
      64519
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64520,
      64520
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64521,
      64521
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64522,
      64522
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64523,
      64523
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64524,
      64524
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64525,
      64525
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64526,
      64526
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64527,
      64527
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64528,
      64528
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64529,
      64529
    ],
    "mapped",
    [
      1579,
      1580
    ]
  ],
  [
    [
      64530,
      64530
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64531,
      64531
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64532,
      64532
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64533,
      64533
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64534,
      64534
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64535,
      64535
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64536,
      64536
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64537,
      64537
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64538,
      64538
    ],
    "mapped",
    [
      1582,
      1581
    ]
  ],
  [
    [
      64539,
      64539
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64540,
      64540
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64541,
      64541
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64542,
      64542
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64543,
      64543
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64544,
      64544
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64545,
      64545
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64546,
      64546
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64547,
      64547
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64548,
      64548
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64549,
      64549
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64550,
      64550
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64551,
      64551
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64552,
      64552
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64553,
      64553
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64554,
      64554
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64555,
      64555
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64556,
      64556
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64557,
      64557
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64558,
      64558
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64559,
      64559
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64560,
      64560
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64561,
      64561
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64562,
      64562
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64563,
      64563
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64564,
      64564
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64565,
      64565
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64566,
      64566
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64567,
      64567
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64568,
      64568
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64569,
      64569
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64570,
      64570
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64571,
      64571
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64572,
      64572
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64573,
      64573
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64574,
      64574
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64575,
      64575
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64576,
      64576
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64577,
      64577
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64578,
      64578
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64579,
      64579
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64580,
      64580
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64581,
      64581
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64582,
      64582
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64583,
      64583
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64584,
      64584
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64585,
      64585
    ],
    "mapped",
    [
      1605,
      1609
    ]
  ],
  [
    [
      64586,
      64586
    ],
    "mapped",
    [
      1605,
      1610
    ]
  ],
  [
    [
      64587,
      64587
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64588,
      64588
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64589,
      64589
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64590,
      64590
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64591,
      64591
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64592,
      64592
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64593,
      64593
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64594,
      64594
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64595,
      64595
    ],
    "mapped",
    [
      1607,
      1609
    ]
  ],
  [
    [
      64596,
      64596
    ],
    "mapped",
    [
      1607,
      1610
    ]
  ],
  [
    [
      64597,
      64597
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64598,
      64598
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64599,
      64599
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64600,
      64600
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64601,
      64601
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64602,
      64602
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64603,
      64603
    ],
    "mapped",
    [
      1584,
      1648
    ]
  ],
  [
    [
      64604,
      64604
    ],
    "mapped",
    [
      1585,
      1648
    ]
  ],
  [
    [
      64605,
      64605
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64606,
      64606
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612,
      1617
    ]
  ],
  [
    [
      64607,
      64607
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613,
      1617
    ]
  ],
  [
    [
      64608,
      64608
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614,
      1617
    ]
  ],
  [
    [
      64609,
      64609
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615,
      1617
    ]
  ],
  [
    [
      64610,
      64610
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616,
      1617
    ]
  ],
  [
    [
      64611,
      64611
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617,
      1648
    ]
  ],
  [
    [
      64612,
      64612
    ],
    "mapped",
    [
      1574,
      1585
    ]
  ],
  [
    [
      64613,
      64613
    ],
    "mapped",
    [
      1574,
      1586
    ]
  ],
  [
    [
      64614,
      64614
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64615,
      64615
    ],
    "mapped",
    [
      1574,
      1606
    ]
  ],
  [
    [
      64616,
      64616
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64617,
      64617
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64618,
      64618
    ],
    "mapped",
    [
      1576,
      1585
    ]
  ],
  [
    [
      64619,
      64619
    ],
    "mapped",
    [
      1576,
      1586
    ]
  ],
  [
    [
      64620,
      64620
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64621,
      64621
    ],
    "mapped",
    [
      1576,
      1606
    ]
  ],
  [
    [
      64622,
      64622
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64623,
      64623
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64624,
      64624
    ],
    "mapped",
    [
      1578,
      1585
    ]
  ],
  [
    [
      64625,
      64625
    ],
    "mapped",
    [
      1578,
      1586
    ]
  ],
  [
    [
      64626,
      64626
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64627,
      64627
    ],
    "mapped",
    [
      1578,
      1606
    ]
  ],
  [
    [
      64628,
      64628
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64629,
      64629
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64630,
      64630
    ],
    "mapped",
    [
      1579,
      1585
    ]
  ],
  [
    [
      64631,
      64631
    ],
    "mapped",
    [
      1579,
      1586
    ]
  ],
  [
    [
      64632,
      64632
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64633,
      64633
    ],
    "mapped",
    [
      1579,
      1606
    ]
  ],
  [
    [
      64634,
      64634
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64635,
      64635
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64636,
      64636
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64637,
      64637
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64638,
      64638
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64639,
      64639
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64640,
      64640
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64641,
      64641
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64642,
      64642
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64643,
      64643
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64644,
      64644
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64645,
      64645
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64646,
      64646
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64647,
      64647
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64648,
      64648
    ],
    "mapped",
    [
      1605,
      1575
    ]
  ],
  [
    [
      64649,
      64649
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64650,
      64650
    ],
    "mapped",
    [
      1606,
      1585
    ]
  ],
  [
    [
      64651,
      64651
    ],
    "mapped",
    [
      1606,
      1586
    ]
  ],
  [
    [
      64652,
      64652
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64653,
      64653
    ],
    "mapped",
    [
      1606,
      1606
    ]
  ],
  [
    [
      64654,
      64654
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64655,
      64655
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64656,
      64656
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64657,
      64657
    ],
    "mapped",
    [
      1610,
      1585
    ]
  ],
  [
    [
      64658,
      64658
    ],
    "mapped",
    [
      1610,
      1586
    ]
  ],
  [
    [
      64659,
      64659
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64660,
      64660
    ],
    "mapped",
    [
      1610,
      1606
    ]
  ],
  [
    [
      64661,
      64661
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64662,
      64662
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64663,
      64663
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64664,
      64664
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64665,
      64665
    ],
    "mapped",
    [
      1574,
      1582
    ]
  ],
  [
    [
      64666,
      64666
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64667,
      64667
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64668,
      64668
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64669,
      64669
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64670,
      64670
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64671,
      64671
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64672,
      64672
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64673,
      64673
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64674,
      64674
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64675,
      64675
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64676,
      64676
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64677,
      64677
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64678,
      64678
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64679,
      64679
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64680,
      64680
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64681,
      64681
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64682,
      64682
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64683,
      64683
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64684,
      64684
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64685,
      64685
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64686,
      64686
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64687,
      64687
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64688,
      64688
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64689,
      64689
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64690,
      64690
    ],
    "mapped",
    [
      1589,
      1582
    ]
  ],
  [
    [
      64691,
      64691
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64692,
      64692
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64693,
      64693
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64694,
      64694
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64695,
      64695
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64696,
      64696
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64697,
      64697
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64698,
      64698
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64699,
      64699
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64700,
      64700
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64701,
      64701
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64702,
      64702
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64703,
      64703
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64704,
      64704
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64705,
      64705
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64706,
      64706
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64707,
      64707
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64708,
      64708
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64709,
      64709
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64710,
      64710
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64711,
      64711
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64712,
      64712
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64713,
      64713
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64714,
      64714
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64715,
      64715
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64716,
      64716
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64717,
      64717
    ],
    "mapped",
    [
      1604,
      1607
    ]
  ],
  [
    [
      64718,
      64718
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64719,
      64719
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64720,
      64720
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64721,
      64721
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64722,
      64722
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64723,
      64723
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64724,
      64724
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64725,
      64725
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64726,
      64726
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64727,
      64727
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64728,
      64728
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64729,
      64729
    ],
    "mapped",
    [
      1607,
      1648
    ]
  ],
  [
    [
      64730,
      64730
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64731,
      64731
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64732,
      64732
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64733,
      64733
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64734,
      64734
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64735,
      64735
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64736,
      64736
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64737,
      64737
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64738,
      64738
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64739,
      64739
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64740,
      64740
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64741,
      64741
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64742,
      64742
    ],
    "mapped",
    [
      1579,
      1607
    ]
  ],
  [
    [
      64743,
      64743
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64744,
      64744
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64745,
      64745
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64746,
      64746
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64747,
      64747
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64748,
      64748
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64749,
      64749
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64750,
      64750
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64751,
      64751
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64752,
      64752
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64753,
      64753
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64754,
      64754
    ],
    "mapped",
    [
      1600,
      1614,
      1617
    ]
  ],
  [
    [
      64755,
      64755
    ],
    "mapped",
    [
      1600,
      1615,
      1617
    ]
  ],
  [
    [
      64756,
      64756
    ],
    "mapped",
    [
      1600,
      1616,
      1617
    ]
  ],
  [
    [
      64757,
      64757
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64758,
      64758
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64759,
      64759
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64760,
      64760
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64761,
      64761
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64762,
      64762
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64763,
      64763
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64764,
      64764
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64765,
      64765
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64766,
      64766
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64767,
      64767
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64768,
      64768
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64769,
      64769
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64770,
      64770
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64771,
      64771
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64772,
      64772
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64773,
      64773
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64774,
      64774
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64775,
      64775
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64776,
      64776
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64777,
      64777
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64778,
      64778
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64779,
      64779
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64780,
      64780
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64781,
      64781
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64782,
      64782
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64783,
      64783
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64784,
      64784
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64785,
      64785
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64786,
      64786
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64787,
      64787
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64788,
      64788
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64789,
      64789
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64790,
      64790
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64791,
      64791
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64792,
      64792
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64793,
      64793
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64794,
      64794
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64795,
      64795
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64796,
      64796
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64797,
      64797
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64798,
      64798
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64799,
      64799
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64800,
      64800
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64801,
      64801
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64802,
      64802
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64803,
      64803
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64804,
      64804
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64805,
      64805
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64806,
      64806
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64807,
      64807
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64808,
      64808
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64809,
      64809
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64810,
      64810
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64811,
      64811
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64812,
      64812
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64813,
      64813
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64814,
      64814
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64815,
      64815
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64816,
      64816
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64817,
      64817
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64818,
      64818
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64819,
      64819
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64820,
      64820
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64821,
      64821
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64822,
      64822
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64823,
      64823
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64824,
      64824
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64825,
      64825
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64826,
      64826
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64827,
      64827
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64828,
      64829
    ],
    "mapped",
    [
      1575,
      1611
    ]
  ],
  [
    [
      64830,
      64831
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64832,
      64847
    ],
    "disallowed"
  ],
  [
    [
      64848,
      64848
    ],
    "mapped",
    [
      1578,
      1580,
      1605
    ]
  ],
  [
    [
      64849,
      64850
    ],
    "mapped",
    [
      1578,
      1581,
      1580
    ]
  ],
  [
    [
      64851,
      64851
    ],
    "mapped",
    [
      1578,
      1581,
      1605
    ]
  ],
  [
    [
      64852,
      64852
    ],
    "mapped",
    [
      1578,
      1582,
      1605
    ]
  ],
  [
    [
      64853,
      64853
    ],
    "mapped",
    [
      1578,
      1605,
      1580
    ]
  ],
  [
    [
      64854,
      64854
    ],
    "mapped",
    [
      1578,
      1605,
      1581
    ]
  ],
  [
    [
      64855,
      64855
    ],
    "mapped",
    [
      1578,
      1605,
      1582
    ]
  ],
  [
    [
      64856,
      64857
    ],
    "mapped",
    [
      1580,
      1605,
      1581
    ]
  ],
  [
    [
      64858,
      64858
    ],
    "mapped",
    [
      1581,
      1605,
      1610
    ]
  ],
  [
    [
      64859,
      64859
    ],
    "mapped",
    [
      1581,
      1605,
      1609
    ]
  ],
  [
    [
      64860,
      64860
    ],
    "mapped",
    [
      1587,
      1581,
      1580
    ]
  ],
  [
    [
      64861,
      64861
    ],
    "mapped",
    [
      1587,
      1580,
      1581
    ]
  ],
  [
    [
      64862,
      64862
    ],
    "mapped",
    [
      1587,
      1580,
      1609
    ]
  ],
  [
    [
      64863,
      64864
    ],
    "mapped",
    [
      1587,
      1605,
      1581
    ]
  ],
  [
    [
      64865,
      64865
    ],
    "mapped",
    [
      1587,
      1605,
      1580
    ]
  ],
  [
    [
      64866,
      64867
    ],
    "mapped",
    [
      1587,
      1605,
      1605
    ]
  ],
  [
    [
      64868,
      64869
    ],
    "mapped",
    [
      1589,
      1581,
      1581
    ]
  ],
  [
    [
      64870,
      64870
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64871,
      64872
    ],
    "mapped",
    [
      1588,
      1581,
      1605
    ]
  ],
  [
    [
      64873,
      64873
    ],
    "mapped",
    [
      1588,
      1580,
      1610
    ]
  ],
  [
    [
      64874,
      64875
    ],
    "mapped",
    [
      1588,
      1605,
      1582
    ]
  ],
  [
    [
      64876,
      64877
    ],
    "mapped",
    [
      1588,
      1605,
      1605
    ]
  ],
  [
    [
      64878,
      64878
    ],
    "mapped",
    [
      1590,
      1581,
      1609
    ]
  ],
  [
    [
      64879,
      64880
    ],
    "mapped",
    [
      1590,
      1582,
      1605
    ]
  ],
  [
    [
      64881,
      64882
    ],
    "mapped",
    [
      1591,
      1605,
      1581
    ]
  ],
  [
    [
      64883,
      64883
    ],
    "mapped",
    [
      1591,
      1605,
      1605
    ]
  ],
  [
    [
      64884,
      64884
    ],
    "mapped",
    [
      1591,
      1605,
      1610
    ]
  ],
  [
    [
      64885,
      64885
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64886,
      64887
    ],
    "mapped",
    [
      1593,
      1605,
      1605
    ]
  ],
  [
    [
      64888,
      64888
    ],
    "mapped",
    [
      1593,
      1605,
      1609
    ]
  ],
  [
    [
      64889,
      64889
    ],
    "mapped",
    [
      1594,
      1605,
      1605
    ]
  ],
  [
    [
      64890,
      64890
    ],
    "mapped",
    [
      1594,
      1605,
      1610
    ]
  ],
  [
    [
      64891,
      64891
    ],
    "mapped",
    [
      1594,
      1605,
      1609
    ]
  ],
  [
    [
      64892,
      64893
    ],
    "mapped",
    [
      1601,
      1582,
      1605
    ]
  ],
  [
    [
      64894,
      64894
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64895,
      64895
    ],
    "mapped",
    [
      1602,
      1605,
      1605
    ]
  ],
  [
    [
      64896,
      64896
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64897,
      64897
    ],
    "mapped",
    [
      1604,
      1581,
      1610
    ]
  ],
  [
    [
      64898,
      64898
    ],
    "mapped",
    [
      1604,
      1581,
      1609
    ]
  ],
  [
    [
      64899,
      64900
    ],
    "mapped",
    [
      1604,
      1580,
      1580
    ]
  ],
  [
    [
      64901,
      64902
    ],
    "mapped",
    [
      1604,
      1582,
      1605
    ]
  ],
  [
    [
      64903,
      64904
    ],
    "mapped",
    [
      1604,
      1605,
      1581
    ]
  ],
  [
    [
      64905,
      64905
    ],
    "mapped",
    [
      1605,
      1581,
      1580
    ]
  ],
  [
    [
      64906,
      64906
    ],
    "mapped",
    [
      1605,
      1581,
      1605
    ]
  ],
  [
    [
      64907,
      64907
    ],
    "mapped",
    [
      1605,
      1581,
      1610
    ]
  ],
  [
    [
      64908,
      64908
    ],
    "mapped",
    [
      1605,
      1580,
      1581
    ]
  ],
  [
    [
      64909,
      64909
    ],
    "mapped",
    [
      1605,
      1580,
      1605
    ]
  ],
  [
    [
      64910,
      64910
    ],
    "mapped",
    [
      1605,
      1582,
      1580
    ]
  ],
  [
    [
      64911,
      64911
    ],
    "mapped",
    [
      1605,
      1582,
      1605
    ]
  ],
  [
    [
      64912,
      64913
    ],
    "disallowed"
  ],
  [
    [
      64914,
      64914
    ],
    "mapped",
    [
      1605,
      1580,
      1582
    ]
  ],
  [
    [
      64915,
      64915
    ],
    "mapped",
    [
      1607,
      1605,
      1580
    ]
  ],
  [
    [
      64916,
      64916
    ],
    "mapped",
    [
      1607,
      1605,
      1605
    ]
  ],
  [
    [
      64917,
      64917
    ],
    "mapped",
    [
      1606,
      1581,
      1605
    ]
  ],
  [
    [
      64918,
      64918
    ],
    "mapped",
    [
      1606,
      1581,
      1609
    ]
  ],
  [
    [
      64919,
      64920
    ],
    "mapped",
    [
      1606,
      1580,
      1605
    ]
  ],
  [
    [
      64921,
      64921
    ],
    "mapped",
    [
      1606,
      1580,
      1609
    ]
  ],
  [
    [
      64922,
      64922
    ],
    "mapped",
    [
      1606,
      1605,
      1610
    ]
  ],
  [
    [
      64923,
      64923
    ],
    "mapped",
    [
      1606,
      1605,
      1609
    ]
  ],
  [
    [
      64924,
      64925
    ],
    "mapped",
    [
      1610,
      1605,
      1605
    ]
  ],
  [
    [
      64926,
      64926
    ],
    "mapped",
    [
      1576,
      1582,
      1610
    ]
  ],
  [
    [
      64927,
      64927
    ],
    "mapped",
    [
      1578,
      1580,
      1610
    ]
  ],
  [
    [
      64928,
      64928
    ],
    "mapped",
    [
      1578,
      1580,
      1609
    ]
  ],
  [
    [
      64929,
      64929
    ],
    "mapped",
    [
      1578,
      1582,
      1610
    ]
  ],
  [
    [
      64930,
      64930
    ],
    "mapped",
    [
      1578,
      1582,
      1609
    ]
  ],
  [
    [
      64931,
      64931
    ],
    "mapped",
    [
      1578,
      1605,
      1610
    ]
  ],
  [
    [
      64932,
      64932
    ],
    "mapped",
    [
      1578,
      1605,
      1609
    ]
  ],
  [
    [
      64933,
      64933
    ],
    "mapped",
    [
      1580,
      1605,
      1610
    ]
  ],
  [
    [
      64934,
      64934
    ],
    "mapped",
    [
      1580,
      1581,
      1609
    ]
  ],
  [
    [
      64935,
      64935
    ],
    "mapped",
    [
      1580,
      1605,
      1609
    ]
  ],
  [
    [
      64936,
      64936
    ],
    "mapped",
    [
      1587,
      1582,
      1609
    ]
  ],
  [
    [
      64937,
      64937
    ],
    "mapped",
    [
      1589,
      1581,
      1610
    ]
  ],
  [
    [
      64938,
      64938
    ],
    "mapped",
    [
      1588,
      1581,
      1610
    ]
  ],
  [
    [
      64939,
      64939
    ],
    "mapped",
    [
      1590,
      1581,
      1610
    ]
  ],
  [
    [
      64940,
      64940
    ],
    "mapped",
    [
      1604,
      1580,
      1610
    ]
  ],
  [
    [
      64941,
      64941
    ],
    "mapped",
    [
      1604,
      1605,
      1610
    ]
  ],
  [
    [
      64942,
      64942
    ],
    "mapped",
    [
      1610,
      1581,
      1610
    ]
  ],
  [
    [
      64943,
      64943
    ],
    "mapped",
    [
      1610,
      1580,
      1610
    ]
  ],
  [
    [
      64944,
      64944
    ],
    "mapped",
    [
      1610,
      1605,
      1610
    ]
  ],
  [
    [
      64945,
      64945
    ],
    "mapped",
    [
      1605,
      1605,
      1610
    ]
  ],
  [
    [
      64946,
      64946
    ],
    "mapped",
    [
      1602,
      1605,
      1610
    ]
  ],
  [
    [
      64947,
      64947
    ],
    "mapped",
    [
      1606,
      1581,
      1610
    ]
  ],
  [
    [
      64948,
      64948
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64949,
      64949
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64950,
      64950
    ],
    "mapped",
    [
      1593,
      1605,
      1610
    ]
  ],
  [
    [
      64951,
      64951
    ],
    "mapped",
    [
      1603,
      1605,
      1610
    ]
  ],
  [
    [
      64952,
      64952
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64953,
      64953
    ],
    "mapped",
    [
      1605,
      1582,
      1610
    ]
  ],
  [
    [
      64954,
      64954
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64955,
      64955
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64956,
      64956
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64957,
      64957
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64958,
      64958
    ],
    "mapped",
    [
      1580,
      1581,
      1610
    ]
  ],
  [
    [
      64959,
      64959
    ],
    "mapped",
    [
      1581,
      1580,
      1610
    ]
  ],
  [
    [
      64960,
      64960
    ],
    "mapped",
    [
      1605,
      1580,
      1610
    ]
  ],
  [
    [
      64961,
      64961
    ],
    "mapped",
    [
      1601,
      1605,
      1610
    ]
  ],
  [
    [
      64962,
      64962
    ],
    "mapped",
    [
      1576,
      1581,
      1610
    ]
  ],
  [
    [
      64963,
      64963
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64964,
      64964
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64965,
      64965
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64966,
      64966
    ],
    "mapped",
    [
      1587,
      1582,
      1610
    ]
  ],
  [
    [
      64967,
      64967
    ],
    "mapped",
    [
      1606,
      1580,
      1610
    ]
  ],
  [
    [
      64968,
      64975
    ],
    "disallowed"
  ],
  [
    [
      64976,
      65007
    ],
    "disallowed"
  ],
  [
    [
      65008,
      65008
    ],
    "mapped",
    [
      1589,
      1604,
      1746
    ]
  ],
  [
    [
      65009,
      65009
    ],
    "mapped",
    [
      1602,
      1604,
      1746
    ]
  ],
  [
    [
      65010,
      65010
    ],
    "mapped",
    [
      1575,
      1604,
      1604,
      1607
    ]
  ],
  [
    [
      65011,
      65011
    ],
    "mapped",
    [
      1575,
      1603,
      1576,
      1585
    ]
  ],
  [
    [
      65012,
      65012
    ],
    "mapped",
    [
      1605,
      1581,
      1605,
      1583
    ]
  ],
  [
    [
      65013,
      65013
    ],
    "mapped",
    [
      1589,
      1604,
      1593,
      1605
    ]
  ],
  [
    [
      65014,
      65014
    ],
    "mapped",
    [
      1585,
      1587,
      1608,
      1604
    ]
  ],
  [
    [
      65015,
      65015
    ],
    "mapped",
    [
      1593,
      1604,
      1610,
      1607
    ]
  ],
  [
    [
      65016,
      65016
    ],
    "mapped",
    [
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65017,
      65017
    ],
    "mapped",
    [
      1589,
      1604,
      1609
    ]
  ],
  [
    [
      65018,
      65018
    ],
    "disallowed_STD3_mapped",
    [
      1589,
      1604,
      1609,
      32,
      1575,
      1604,
      1604,
      1607,
      32,
      1593,
      1604,
      1610,
      1607,
      32,
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65019,
      65019
    ],
    "disallowed_STD3_mapped",
    [
      1580,
      1604,
      32,
      1580,
      1604,
      1575,
      1604,
      1607
    ]
  ],
  [
    [
      65020,
      65020
    ],
    "mapped",
    [
      1585,
      1740,
      1575,
      1604
    ]
  ],
  [
    [
      65021,
      65021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65022,
      65023
    ],
    "disallowed"
  ],
  [
    [
      65024,
      65039
    ],
    "ignored"
  ],
  [
    [
      65040,
      65040
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65041,
      65041
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65042,
      65042
    ],
    "disallowed"
  ],
  [
    [
      65043,
      65043
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65044,
      65044
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65045,
      65045
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65046,
      65046
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65047,
      65047
    ],
    "mapped",
    [
      12310
    ]
  ],
  [
    [
      65048,
      65048
    ],
    "mapped",
    [
      12311
    ]
  ],
  [
    [
      65049,
      65049
    ],
    "disallowed"
  ],
  [
    [
      65050,
      65055
    ],
    "disallowed"
  ],
  [
    [
      65056,
      65059
    ],
    "valid"
  ],
  [
    [
      65060,
      65062
    ],
    "valid"
  ],
  [
    [
      65063,
      65069
    ],
    "valid"
  ],
  [
    [
      65070,
      65071
    ],
    "valid"
  ],
  [
    [
      65072,
      65072
    ],
    "disallowed"
  ],
  [
    [
      65073,
      65073
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65074,
      65074
    ],
    "mapped",
    [
      8211
    ]
  ],
  [
    [
      65075,
      65076
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65077,
      65077
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65078,
      65078
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65079,
      65079
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65080,
      65080
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65081,
      65081
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65082,
      65082
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65083,
      65083
    ],
    "mapped",
    [
      12304
    ]
  ],
  [
    [
      65084,
      65084
    ],
    "mapped",
    [
      12305
    ]
  ],
  [
    [
      65085,
      65085
    ],
    "mapped",
    [
      12298
    ]
  ],
  [
    [
      65086,
      65086
    ],
    "mapped",
    [
      12299
    ]
  ],
  [
    [
      65087,
      65087
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      65088,
      65088
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      65089,
      65089
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65090,
      65090
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65091,
      65091
    ],
    "mapped",
    [
      12302
    ]
  ],
  [
    [
      65092,
      65092
    ],
    "mapped",
    [
      12303
    ]
  ],
  [
    [
      65093,
      65094
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65095,
      65095
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65096,
      65096
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65097,
      65100
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      65101,
      65103
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65104,
      65104
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65105,
      65105
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65106,
      65106
    ],
    "disallowed"
  ],
  [
    [
      65107,
      65107
    ],
    "disallowed"
  ],
  [
    [
      65108,
      65108
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65109,
      65109
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65110,
      65110
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65111,
      65111
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65112,
      65112
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65113,
      65113
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65114,
      65114
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65115,
      65115
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65116,
      65116
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65117,
      65117
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65118,
      65118
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65119,
      65119
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65120,
      65120
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65121,
      65121
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65122,
      65122
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65123,
      65123
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65124,
      65124
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65125,
      65125
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65126,
      65126
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65127,
      65127
    ],
    "disallowed"
  ],
  [
    [
      65128,
      65128
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65129,
      65129
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65130,
      65130
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65131,
      65131
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65132,
      65135
    ],
    "disallowed"
  ],
  [
    [
      65136,
      65136
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1611
    ]
  ],
  [
    [
      65137,
      65137
    ],
    "mapped",
    [
      1600,
      1611
    ]
  ],
  [
    [
      65138,
      65138
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612
    ]
  ],
  [
    [
      65139,
      65139
    ],
    "valid"
  ],
  [
    [
      65140,
      65140
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613
    ]
  ],
  [
    [
      65141,
      65141
    ],
    "disallowed"
  ],
  [
    [
      65142,
      65142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614
    ]
  ],
  [
    [
      65143,
      65143
    ],
    "mapped",
    [
      1600,
      1614
    ]
  ],
  [
    [
      65144,
      65144
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615
    ]
  ],
  [
    [
      65145,
      65145
    ],
    "mapped",
    [
      1600,
      1615
    ]
  ],
  [
    [
      65146,
      65146
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616
    ]
  ],
  [
    [
      65147,
      65147
    ],
    "mapped",
    [
      1600,
      1616
    ]
  ],
  [
    [
      65148,
      65148
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617
    ]
  ],
  [
    [
      65149,
      65149
    ],
    "mapped",
    [
      1600,
      1617
    ]
  ],
  [
    [
      65150,
      65150
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1618
    ]
  ],
  [
    [
      65151,
      65151
    ],
    "mapped",
    [
      1600,
      1618
    ]
  ],
  [
    [
      65152,
      65152
    ],
    "mapped",
    [
      1569
    ]
  ],
  [
    [
      65153,
      65154
    ],
    "mapped",
    [
      1570
    ]
  ],
  [
    [
      65155,
      65156
    ],
    "mapped",
    [
      1571
    ]
  ],
  [
    [
      65157,
      65158
    ],
    "mapped",
    [
      1572
    ]
  ],
  [
    [
      65159,
      65160
    ],
    "mapped",
    [
      1573
    ]
  ],
  [
    [
      65161,
      65164
    ],
    "mapped",
    [
      1574
    ]
  ],
  [
    [
      65165,
      65166
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      65167,
      65170
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      65171,
      65172
    ],
    "mapped",
    [
      1577
    ]
  ],
  [
    [
      65173,
      65176
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      65177,
      65180
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      65181,
      65184
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      65185,
      65188
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      65189,
      65192
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      65193,
      65194
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      65195,
      65196
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      65197,
      65198
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      65199,
      65200
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      65201,
      65204
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      65205,
      65208
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      65209,
      65212
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      65213,
      65216
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      65217,
      65220
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      65221,
      65224
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      65225,
      65228
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      65229,
      65232
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      65233,
      65236
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      65237,
      65240
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      65241,
      65244
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      65245,
      65248
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      65249,
      65252
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      65253,
      65256
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      65257,
      65260
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      65261,
      65262
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      65263,
      65264
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      65265,
      65268
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      65269,
      65270
    ],
    "mapped",
    [
      1604,
      1570
    ]
  ],
  [
    [
      65271,
      65272
    ],
    "mapped",
    [
      1604,
      1571
    ]
  ],
  [
    [
      65273,
      65274
    ],
    "mapped",
    [
      1604,
      1573
    ]
  ],
  [
    [
      65275,
      65276
    ],
    "mapped",
    [
      1604,
      1575
    ]
  ],
  [
    [
      65277,
      65278
    ],
    "disallowed"
  ],
  [
    [
      65279,
      65279
    ],
    "ignored"
  ],
  [
    [
      65280,
      65280
    ],
    "disallowed"
  ],
  [
    [
      65281,
      65281
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65282,
      65282
    ],
    "disallowed_STD3_mapped",
    [
      34
    ]
  ],
  [
    [
      65283,
      65283
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65284,
      65284
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65285,
      65285
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65286,
      65286
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65287,
      65287
    ],
    "disallowed_STD3_mapped",
    [
      39
    ]
  ],
  [
    [
      65288,
      65288
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65289,
      65289
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65290,
      65290
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65291,
      65291
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65292,
      65292
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65293,
      65293
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65294,
      65294
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65295,
      65295
    ],
    "disallowed_STD3_mapped",
    [
      47
    ]
  ],
  [
    [
      65296,
      65296
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      65297,
      65297
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      65298,
      65298
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      65299,
      65299
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      65300,
      65300
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      65301,
      65301
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      65302,
      65302
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      65303,
      65303
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      65304,
      65304
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      65305,
      65305
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      65306,
      65306
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65307,
      65307
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65308,
      65308
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65309,
      65309
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65310,
      65310
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65311,
      65311
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65312,
      65312
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65313,
      65313
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65314,
      65314
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65315,
      65315
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65316,
      65316
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65317,
      65317
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65318,
      65318
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65319,
      65319
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65320,
      65320
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65321,
      65321
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65322,
      65322
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65323,
      65323
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65324,
      65324
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65325,
      65325
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65326,
      65326
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65327,
      65327
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65328,
      65328
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65329,
      65329
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65330,
      65330
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65331,
      65331
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65332,
      65332
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65333,
      65333
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65334,
      65334
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65335,
      65335
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65336,
      65336
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65337,
      65337
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65338,
      65338
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65339,
      65339
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65340,
      65340
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65341,
      65341
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65342,
      65342
    ],
    "disallowed_STD3_mapped",
    [
      94
    ]
  ],
  [
    [
      65343,
      65343
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65344,
      65344
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      65345,
      65345
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65346,
      65346
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65347,
      65347
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65348,
      65348
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65349,
      65349
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65350,
      65350
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65351,
      65351
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65352,
      65352
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65353,
      65353
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65354,
      65354
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65355,
      65355
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65356,
      65356
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65357,
      65357
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65358,
      65358
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65359,
      65359
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65360,
      65360
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65361,
      65361
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65362,
      65362
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65363,
      65363
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65364,
      65364
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65365,
      65365
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65366,
      65366
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65367,
      65367
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65368,
      65368
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65369,
      65369
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65370,
      65370
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65371,
      65371
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65372,
      65372
    ],
    "disallowed_STD3_mapped",
    [
      124
    ]
  ],
  [
    [
      65373,
      65373
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65374,
      65374
    ],
    "disallowed_STD3_mapped",
    [
      126
    ]
  ],
  [
    [
      65375,
      65375
    ],
    "mapped",
    [
      10629
    ]
  ],
  [
    [
      65376,
      65376
    ],
    "mapped",
    [
      10630
    ]
  ],
  [
    [
      65377,
      65377
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65378,
      65378
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65379,
      65379
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65380,
      65380
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65381,
      65381
    ],
    "mapped",
    [
      12539
    ]
  ],
  [
    [
      65382,
      65382
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      65383,
      65383
    ],
    "mapped",
    [
      12449
    ]
  ],
  [
    [
      65384,
      65384
    ],
    "mapped",
    [
      12451
    ]
  ],
  [
    [
      65385,
      65385
    ],
    "mapped",
    [
      12453
    ]
  ],
  [
    [
      65386,
      65386
    ],
    "mapped",
    [
      12455
    ]
  ],
  [
    [
      65387,
      65387
    ],
    "mapped",
    [
      12457
    ]
  ],
  [
    [
      65388,
      65388
    ],
    "mapped",
    [
      12515
    ]
  ],
  [
    [
      65389,
      65389
    ],
    "mapped",
    [
      12517
    ]
  ],
  [
    [
      65390,
      65390
    ],
    "mapped",
    [
      12519
    ]
  ],
  [
    [
      65391,
      65391
    ],
    "mapped",
    [
      12483
    ]
  ],
  [
    [
      65392,
      65392
    ],
    "mapped",
    [
      12540
    ]
  ],
  [
    [
      65393,
      65393
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      65394,
      65394
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      65395,
      65395
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      65396,
      65396
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      65397,
      65397
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      65398,
      65398
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      65399,
      65399
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      65400,
      65400
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      65401,
      65401
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      65402,
      65402
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      65403,
      65403
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      65404,
      65404
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      65405,
      65405
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      65406,
      65406
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      65407,
      65407
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      65408,
      65408
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      65409,
      65409
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      65410,
      65410
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      65411,
      65411
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      65412,
      65412
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      65413,
      65413
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      65414,
      65414
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      65415,
      65415
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      65416,
      65416
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      65417,
      65417
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      65418,
      65418
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      65419,
      65419
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      65420,
      65420
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      65421,
      65421
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      65422,
      65422
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      65423,
      65423
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      65424,
      65424
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      65425,
      65425
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      65426,
      65426
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      65427,
      65427
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      65428,
      65428
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      65429,
      65429
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      65430,
      65430
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      65431,
      65431
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      65432,
      65432
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      65433,
      65433
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      65434,
      65434
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      65435,
      65435
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      65436,
      65436
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      65437,
      65437
    ],
    "mapped",
    [
      12531
    ]
  ],
  [
    [
      65438,
      65438
    ],
    "mapped",
    [
      12441
    ]
  ],
  [
    [
      65439,
      65439
    ],
    "mapped",
    [
      12442
    ]
  ],
  [
    [
      65440,
      65440
    ],
    "disallowed"
  ],
  [
    [
      65441,
      65441
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      65442,
      65442
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      65443,
      65443
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      65444,
      65444
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      65445,
      65445
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      65446,
      65446
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      65447,
      65447
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      65448,
      65448
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      65449,
      65449
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      65450,
      65450
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      65451,
      65451
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      65452,
      65452
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      65453,
      65453
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      65454,
      65454
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      65455,
      65455
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      65456,
      65456
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      65457,
      65457
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      65458,
      65458
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      65459,
      65459
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      65460,
      65460
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      65461,
      65461
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      65462,
      65462
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      65463,
      65463
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      65464,
      65464
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      65465,
      65465
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      65466,
      65466
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      65467,
      65467
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      65468,
      65468
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      65469,
      65469
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      65470,
      65470
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      65471,
      65473
    ],
    "disallowed"
  ],
  [
    [
      65474,
      65474
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      65475,
      65475
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      65476,
      65476
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      65477,
      65477
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      65478,
      65478
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      65479,
      65479
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      65480,
      65481
    ],
    "disallowed"
  ],
  [
    [
      65482,
      65482
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      65483,
      65483
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      65484,
      65484
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      65485,
      65485
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      65486,
      65486
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      65487,
      65487
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      65488,
      65489
    ],
    "disallowed"
  ],
  [
    [
      65490,
      65490
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      65491,
      65491
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      65492,
      65492
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      65493,
      65493
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      65494,
      65494
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      65495,
      65495
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      65496,
      65497
    ],
    "disallowed"
  ],
  [
    [
      65498,
      65498
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      65499,
      65499
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      65500,
      65500
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      65501,
      65503
    ],
    "disallowed"
  ],
  [
    [
      65504,
      65504
    ],
    "mapped",
    [
      162
    ]
  ],
  [
    [
      65505,
      65505
    ],
    "mapped",
    [
      163
    ]
  ],
  [
    [
      65506,
      65506
    ],
    "mapped",
    [
      172
    ]
  ],
  [
    [
      65507,
      65507
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      65508,
      65508
    ],
    "mapped",
    [
      166
    ]
  ],
  [
    [
      65509,
      65509
    ],
    "mapped",
    [
      165
    ]
  ],
  [
    [
      65510,
      65510
    ],
    "mapped",
    [
      8361
    ]
  ],
  [
    [
      65511,
      65511
    ],
    "disallowed"
  ],
  [
    [
      65512,
      65512
    ],
    "mapped",
    [
      9474
    ]
  ],
  [
    [
      65513,
      65513
    ],
    "mapped",
    [
      8592
    ]
  ],
  [
    [
      65514,
      65514
    ],
    "mapped",
    [
      8593
    ]
  ],
  [
    [
      65515,
      65515
    ],
    "mapped",
    [
      8594
    ]
  ],
  [
    [
      65516,
      65516
    ],
    "mapped",
    [
      8595
    ]
  ],
  [
    [
      65517,
      65517
    ],
    "mapped",
    [
      9632
    ]
  ],
  [
    [
      65518,
      65518
    ],
    "mapped",
    [
      9675
    ]
  ],
  [
    [
      65519,
      65528
    ],
    "disallowed"
  ],
  [
    [
      65529,
      65531
    ],
    "disallowed"
  ],
  [
    [
      65532,
      65532
    ],
    "disallowed"
  ],
  [
    [
      65533,
      65533
    ],
    "disallowed"
  ],
  [
    [
      65534,
      65535
    ],
    "disallowed"
  ],
  [
    [
      65536,
      65547
    ],
    "valid"
  ],
  [
    [
      65548,
      65548
    ],
    "disallowed"
  ],
  [
    [
      65549,
      65574
    ],
    "valid"
  ],
  [
    [
      65575,
      65575
    ],
    "disallowed"
  ],
  [
    [
      65576,
      65594
    ],
    "valid"
  ],
  [
    [
      65595,
      65595
    ],
    "disallowed"
  ],
  [
    [
      65596,
      65597
    ],
    "valid"
  ],
  [
    [
      65598,
      65598
    ],
    "disallowed"
  ],
  [
    [
      65599,
      65613
    ],
    "valid"
  ],
  [
    [
      65614,
      65615
    ],
    "disallowed"
  ],
  [
    [
      65616,
      65629
    ],
    "valid"
  ],
  [
    [
      65630,
      65663
    ],
    "disallowed"
  ],
  [
    [
      65664,
      65786
    ],
    "valid"
  ],
  [
    [
      65787,
      65791
    ],
    "disallowed"
  ],
  [
    [
      65792,
      65794
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65795,
      65798
    ],
    "disallowed"
  ],
  [
    [
      65799,
      65843
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65844,
      65846
    ],
    "disallowed"
  ],
  [
    [
      65847,
      65855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65856,
      65930
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65931,
      65932
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65933,
      65935
    ],
    "disallowed"
  ],
  [
    [
      65936,
      65947
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65948,
      65951
    ],
    "disallowed"
  ],
  [
    [
      65952,
      65952
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65953,
      65999
    ],
    "disallowed"
  ],
  [
    [
      66e3,
      66044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66045,
      66045
    ],
    "valid"
  ],
  [
    [
      66046,
      66175
    ],
    "disallowed"
  ],
  [
    [
      66176,
      66204
    ],
    "valid"
  ],
  [
    [
      66205,
      66207
    ],
    "disallowed"
  ],
  [
    [
      66208,
      66256
    ],
    "valid"
  ],
  [
    [
      66257,
      66271
    ],
    "disallowed"
  ],
  [
    [
      66272,
      66272
    ],
    "valid"
  ],
  [
    [
      66273,
      66299
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66300,
      66303
    ],
    "disallowed"
  ],
  [
    [
      66304,
      66334
    ],
    "valid"
  ],
  [
    [
      66335,
      66335
    ],
    "valid"
  ],
  [
    [
      66336,
      66339
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66340,
      66351
    ],
    "disallowed"
  ],
  [
    [
      66352,
      66368
    ],
    "valid"
  ],
  [
    [
      66369,
      66369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66370,
      66377
    ],
    "valid"
  ],
  [
    [
      66378,
      66378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66379,
      66383
    ],
    "disallowed"
  ],
  [
    [
      66384,
      66426
    ],
    "valid"
  ],
  [
    [
      66427,
      66431
    ],
    "disallowed"
  ],
  [
    [
      66432,
      66461
    ],
    "valid"
  ],
  [
    [
      66462,
      66462
    ],
    "disallowed"
  ],
  [
    [
      66463,
      66463
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66464,
      66499
    ],
    "valid"
  ],
  [
    [
      66500,
      66503
    ],
    "disallowed"
  ],
  [
    [
      66504,
      66511
    ],
    "valid"
  ],
  [
    [
      66512,
      66517
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66518,
      66559
    ],
    "disallowed"
  ],
  [
    [
      66560,
      66560
    ],
    "mapped",
    [
      66600
    ]
  ],
  [
    [
      66561,
      66561
    ],
    "mapped",
    [
      66601
    ]
  ],
  [
    [
      66562,
      66562
    ],
    "mapped",
    [
      66602
    ]
  ],
  [
    [
      66563,
      66563
    ],
    "mapped",
    [
      66603
    ]
  ],
  [
    [
      66564,
      66564
    ],
    "mapped",
    [
      66604
    ]
  ],
  [
    [
      66565,
      66565
    ],
    "mapped",
    [
      66605
    ]
  ],
  [
    [
      66566,
      66566
    ],
    "mapped",
    [
      66606
    ]
  ],
  [
    [
      66567,
      66567
    ],
    "mapped",
    [
      66607
    ]
  ],
  [
    [
      66568,
      66568
    ],
    "mapped",
    [
      66608
    ]
  ],
  [
    [
      66569,
      66569
    ],
    "mapped",
    [
      66609
    ]
  ],
  [
    [
      66570,
      66570
    ],
    "mapped",
    [
      66610
    ]
  ],
  [
    [
      66571,
      66571
    ],
    "mapped",
    [
      66611
    ]
  ],
  [
    [
      66572,
      66572
    ],
    "mapped",
    [
      66612
    ]
  ],
  [
    [
      66573,
      66573
    ],
    "mapped",
    [
      66613
    ]
  ],
  [
    [
      66574,
      66574
    ],
    "mapped",
    [
      66614
    ]
  ],
  [
    [
      66575,
      66575
    ],
    "mapped",
    [
      66615
    ]
  ],
  [
    [
      66576,
      66576
    ],
    "mapped",
    [
      66616
    ]
  ],
  [
    [
      66577,
      66577
    ],
    "mapped",
    [
      66617
    ]
  ],
  [
    [
      66578,
      66578
    ],
    "mapped",
    [
      66618
    ]
  ],
  [
    [
      66579,
      66579
    ],
    "mapped",
    [
      66619
    ]
  ],
  [
    [
      66580,
      66580
    ],
    "mapped",
    [
      66620
    ]
  ],
  [
    [
      66581,
      66581
    ],
    "mapped",
    [
      66621
    ]
  ],
  [
    [
      66582,
      66582
    ],
    "mapped",
    [
      66622
    ]
  ],
  [
    [
      66583,
      66583
    ],
    "mapped",
    [
      66623
    ]
  ],
  [
    [
      66584,
      66584
    ],
    "mapped",
    [
      66624
    ]
  ],
  [
    [
      66585,
      66585
    ],
    "mapped",
    [
      66625
    ]
  ],
  [
    [
      66586,
      66586
    ],
    "mapped",
    [
      66626
    ]
  ],
  [
    [
      66587,
      66587
    ],
    "mapped",
    [
      66627
    ]
  ],
  [
    [
      66588,
      66588
    ],
    "mapped",
    [
      66628
    ]
  ],
  [
    [
      66589,
      66589
    ],
    "mapped",
    [
      66629
    ]
  ],
  [
    [
      66590,
      66590
    ],
    "mapped",
    [
      66630
    ]
  ],
  [
    [
      66591,
      66591
    ],
    "mapped",
    [
      66631
    ]
  ],
  [
    [
      66592,
      66592
    ],
    "mapped",
    [
      66632
    ]
  ],
  [
    [
      66593,
      66593
    ],
    "mapped",
    [
      66633
    ]
  ],
  [
    [
      66594,
      66594
    ],
    "mapped",
    [
      66634
    ]
  ],
  [
    [
      66595,
      66595
    ],
    "mapped",
    [
      66635
    ]
  ],
  [
    [
      66596,
      66596
    ],
    "mapped",
    [
      66636
    ]
  ],
  [
    [
      66597,
      66597
    ],
    "mapped",
    [
      66637
    ]
  ],
  [
    [
      66598,
      66598
    ],
    "mapped",
    [
      66638
    ]
  ],
  [
    [
      66599,
      66599
    ],
    "mapped",
    [
      66639
    ]
  ],
  [
    [
      66600,
      66637
    ],
    "valid"
  ],
  [
    [
      66638,
      66717
    ],
    "valid"
  ],
  [
    [
      66718,
      66719
    ],
    "disallowed"
  ],
  [
    [
      66720,
      66729
    ],
    "valid"
  ],
  [
    [
      66730,
      66815
    ],
    "disallowed"
  ],
  [
    [
      66816,
      66855
    ],
    "valid"
  ],
  [
    [
      66856,
      66863
    ],
    "disallowed"
  ],
  [
    [
      66864,
      66915
    ],
    "valid"
  ],
  [
    [
      66916,
      66926
    ],
    "disallowed"
  ],
  [
    [
      66927,
      66927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66928,
      67071
    ],
    "disallowed"
  ],
  [
    [
      67072,
      67382
    ],
    "valid"
  ],
  [
    [
      67383,
      67391
    ],
    "disallowed"
  ],
  [
    [
      67392,
      67413
    ],
    "valid"
  ],
  [
    [
      67414,
      67423
    ],
    "disallowed"
  ],
  [
    [
      67424,
      67431
    ],
    "valid"
  ],
  [
    [
      67432,
      67583
    ],
    "disallowed"
  ],
  [
    [
      67584,
      67589
    ],
    "valid"
  ],
  [
    [
      67590,
      67591
    ],
    "disallowed"
  ],
  [
    [
      67592,
      67592
    ],
    "valid"
  ],
  [
    [
      67593,
      67593
    ],
    "disallowed"
  ],
  [
    [
      67594,
      67637
    ],
    "valid"
  ],
  [
    [
      67638,
      67638
    ],
    "disallowed"
  ],
  [
    [
      67639,
      67640
    ],
    "valid"
  ],
  [
    [
      67641,
      67643
    ],
    "disallowed"
  ],
  [
    [
      67644,
      67644
    ],
    "valid"
  ],
  [
    [
      67645,
      67646
    ],
    "disallowed"
  ],
  [
    [
      67647,
      67647
    ],
    "valid"
  ],
  [
    [
      67648,
      67669
    ],
    "valid"
  ],
  [
    [
      67670,
      67670
    ],
    "disallowed"
  ],
  [
    [
      67671,
      67679
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67680,
      67702
    ],
    "valid"
  ],
  [
    [
      67703,
      67711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67712,
      67742
    ],
    "valid"
  ],
  [
    [
      67743,
      67750
    ],
    "disallowed"
  ],
  [
    [
      67751,
      67759
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67760,
      67807
    ],
    "disallowed"
  ],
  [
    [
      67808,
      67826
    ],
    "valid"
  ],
  [
    [
      67827,
      67827
    ],
    "disallowed"
  ],
  [
    [
      67828,
      67829
    ],
    "valid"
  ],
  [
    [
      67830,
      67834
    ],
    "disallowed"
  ],
  [
    [
      67835,
      67839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67840,
      67861
    ],
    "valid"
  ],
  [
    [
      67862,
      67865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67866,
      67867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67868,
      67870
    ],
    "disallowed"
  ],
  [
    [
      67871,
      67871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67872,
      67897
    ],
    "valid"
  ],
  [
    [
      67898,
      67902
    ],
    "disallowed"
  ],
  [
    [
      67903,
      67903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67904,
      67967
    ],
    "disallowed"
  ],
  [
    [
      67968,
      68023
    ],
    "valid"
  ],
  [
    [
      68024,
      68027
    ],
    "disallowed"
  ],
  [
    [
      68028,
      68029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68030,
      68031
    ],
    "valid"
  ],
  [
    [
      68032,
      68047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68048,
      68049
    ],
    "disallowed"
  ],
  [
    [
      68050,
      68095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68096,
      68099
    ],
    "valid"
  ],
  [
    [
      68100,
      68100
    ],
    "disallowed"
  ],
  [
    [
      68101,
      68102
    ],
    "valid"
  ],
  [
    [
      68103,
      68107
    ],
    "disallowed"
  ],
  [
    [
      68108,
      68115
    ],
    "valid"
  ],
  [
    [
      68116,
      68116
    ],
    "disallowed"
  ],
  [
    [
      68117,
      68119
    ],
    "valid"
  ],
  [
    [
      68120,
      68120
    ],
    "disallowed"
  ],
  [
    [
      68121,
      68147
    ],
    "valid"
  ],
  [
    [
      68148,
      68151
    ],
    "disallowed"
  ],
  [
    [
      68152,
      68154
    ],
    "valid"
  ],
  [
    [
      68155,
      68158
    ],
    "disallowed"
  ],
  [
    [
      68159,
      68159
    ],
    "valid"
  ],
  [
    [
      68160,
      68167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68168,
      68175
    ],
    "disallowed"
  ],
  [
    [
      68176,
      68184
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68185,
      68191
    ],
    "disallowed"
  ],
  [
    [
      68192,
      68220
    ],
    "valid"
  ],
  [
    [
      68221,
      68223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68224,
      68252
    ],
    "valid"
  ],
  [
    [
      68253,
      68255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68256,
      68287
    ],
    "disallowed"
  ],
  [
    [
      68288,
      68295
    ],
    "valid"
  ],
  [
    [
      68296,
      68296
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68297,
      68326
    ],
    "valid"
  ],
  [
    [
      68327,
      68330
    ],
    "disallowed"
  ],
  [
    [
      68331,
      68342
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68343,
      68351
    ],
    "disallowed"
  ],
  [
    [
      68352,
      68405
    ],
    "valid"
  ],
  [
    [
      68406,
      68408
    ],
    "disallowed"
  ],
  [
    [
      68409,
      68415
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68416,
      68437
    ],
    "valid"
  ],
  [
    [
      68438,
      68439
    ],
    "disallowed"
  ],
  [
    [
      68440,
      68447
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68448,
      68466
    ],
    "valid"
  ],
  [
    [
      68467,
      68471
    ],
    "disallowed"
  ],
  [
    [
      68472,
      68479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68480,
      68497
    ],
    "valid"
  ],
  [
    [
      68498,
      68504
    ],
    "disallowed"
  ],
  [
    [
      68505,
      68508
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68509,
      68520
    ],
    "disallowed"
  ],
  [
    [
      68521,
      68527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68528,
      68607
    ],
    "disallowed"
  ],
  [
    [
      68608,
      68680
    ],
    "valid"
  ],
  [
    [
      68681,
      68735
    ],
    "disallowed"
  ],
  [
    [
      68736,
      68736
    ],
    "mapped",
    [
      68800
    ]
  ],
  [
    [
      68737,
      68737
    ],
    "mapped",
    [
      68801
    ]
  ],
  [
    [
      68738,
      68738
    ],
    "mapped",
    [
      68802
    ]
  ],
  [
    [
      68739,
      68739
    ],
    "mapped",
    [
      68803
    ]
  ],
  [
    [
      68740,
      68740
    ],
    "mapped",
    [
      68804
    ]
  ],
  [
    [
      68741,
      68741
    ],
    "mapped",
    [
      68805
    ]
  ],
  [
    [
      68742,
      68742
    ],
    "mapped",
    [
      68806
    ]
  ],
  [
    [
      68743,
      68743
    ],
    "mapped",
    [
      68807
    ]
  ],
  [
    [
      68744,
      68744
    ],
    "mapped",
    [
      68808
    ]
  ],
  [
    [
      68745,
      68745
    ],
    "mapped",
    [
      68809
    ]
  ],
  [
    [
      68746,
      68746
    ],
    "mapped",
    [
      68810
    ]
  ],
  [
    [
      68747,
      68747
    ],
    "mapped",
    [
      68811
    ]
  ],
  [
    [
      68748,
      68748
    ],
    "mapped",
    [
      68812
    ]
  ],
  [
    [
      68749,
      68749
    ],
    "mapped",
    [
      68813
    ]
  ],
  [
    [
      68750,
      68750
    ],
    "mapped",
    [
      68814
    ]
  ],
  [
    [
      68751,
      68751
    ],
    "mapped",
    [
      68815
    ]
  ],
  [
    [
      68752,
      68752
    ],
    "mapped",
    [
      68816
    ]
  ],
  [
    [
      68753,
      68753
    ],
    "mapped",
    [
      68817
    ]
  ],
  [
    [
      68754,
      68754
    ],
    "mapped",
    [
      68818
    ]
  ],
  [
    [
      68755,
      68755
    ],
    "mapped",
    [
      68819
    ]
  ],
  [
    [
      68756,
      68756
    ],
    "mapped",
    [
      68820
    ]
  ],
  [
    [
      68757,
      68757
    ],
    "mapped",
    [
      68821
    ]
  ],
  [
    [
      68758,
      68758
    ],
    "mapped",
    [
      68822
    ]
  ],
  [
    [
      68759,
      68759
    ],
    "mapped",
    [
      68823
    ]
  ],
  [
    [
      68760,
      68760
    ],
    "mapped",
    [
      68824
    ]
  ],
  [
    [
      68761,
      68761
    ],
    "mapped",
    [
      68825
    ]
  ],
  [
    [
      68762,
      68762
    ],
    "mapped",
    [
      68826
    ]
  ],
  [
    [
      68763,
      68763
    ],
    "mapped",
    [
      68827
    ]
  ],
  [
    [
      68764,
      68764
    ],
    "mapped",
    [
      68828
    ]
  ],
  [
    [
      68765,
      68765
    ],
    "mapped",
    [
      68829
    ]
  ],
  [
    [
      68766,
      68766
    ],
    "mapped",
    [
      68830
    ]
  ],
  [
    [
      68767,
      68767
    ],
    "mapped",
    [
      68831
    ]
  ],
  [
    [
      68768,
      68768
    ],
    "mapped",
    [
      68832
    ]
  ],
  [
    [
      68769,
      68769
    ],
    "mapped",
    [
      68833
    ]
  ],
  [
    [
      68770,
      68770
    ],
    "mapped",
    [
      68834
    ]
  ],
  [
    [
      68771,
      68771
    ],
    "mapped",
    [
      68835
    ]
  ],
  [
    [
      68772,
      68772
    ],
    "mapped",
    [
      68836
    ]
  ],
  [
    [
      68773,
      68773
    ],
    "mapped",
    [
      68837
    ]
  ],
  [
    [
      68774,
      68774
    ],
    "mapped",
    [
      68838
    ]
  ],
  [
    [
      68775,
      68775
    ],
    "mapped",
    [
      68839
    ]
  ],
  [
    [
      68776,
      68776
    ],
    "mapped",
    [
      68840
    ]
  ],
  [
    [
      68777,
      68777
    ],
    "mapped",
    [
      68841
    ]
  ],
  [
    [
      68778,
      68778
    ],
    "mapped",
    [
      68842
    ]
  ],
  [
    [
      68779,
      68779
    ],
    "mapped",
    [
      68843
    ]
  ],
  [
    [
      68780,
      68780
    ],
    "mapped",
    [
      68844
    ]
  ],
  [
    [
      68781,
      68781
    ],
    "mapped",
    [
      68845
    ]
  ],
  [
    [
      68782,
      68782
    ],
    "mapped",
    [
      68846
    ]
  ],
  [
    [
      68783,
      68783
    ],
    "mapped",
    [
      68847
    ]
  ],
  [
    [
      68784,
      68784
    ],
    "mapped",
    [
      68848
    ]
  ],
  [
    [
      68785,
      68785
    ],
    "mapped",
    [
      68849
    ]
  ],
  [
    [
      68786,
      68786
    ],
    "mapped",
    [
      68850
    ]
  ],
  [
    [
      68787,
      68799
    ],
    "disallowed"
  ],
  [
    [
      68800,
      68850
    ],
    "valid"
  ],
  [
    [
      68851,
      68857
    ],
    "disallowed"
  ],
  [
    [
      68858,
      68863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68864,
      69215
    ],
    "disallowed"
  ],
  [
    [
      69216,
      69246
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69247,
      69631
    ],
    "disallowed"
  ],
  [
    [
      69632,
      69702
    ],
    "valid"
  ],
  [
    [
      69703,
      69709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69710,
      69713
    ],
    "disallowed"
  ],
  [
    [
      69714,
      69733
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69734,
      69743
    ],
    "valid"
  ],
  [
    [
      69744,
      69758
    ],
    "disallowed"
  ],
  [
    [
      69759,
      69759
    ],
    "valid"
  ],
  [
    [
      69760,
      69818
    ],
    "valid"
  ],
  [
    [
      69819,
      69820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69821,
      69821
    ],
    "disallowed"
  ],
  [
    [
      69822,
      69825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69826,
      69839
    ],
    "disallowed"
  ],
  [
    [
      69840,
      69864
    ],
    "valid"
  ],
  [
    [
      69865,
      69871
    ],
    "disallowed"
  ],
  [
    [
      69872,
      69881
    ],
    "valid"
  ],
  [
    [
      69882,
      69887
    ],
    "disallowed"
  ],
  [
    [
      69888,
      69940
    ],
    "valid"
  ],
  [
    [
      69941,
      69941
    ],
    "disallowed"
  ],
  [
    [
      69942,
      69951
    ],
    "valid"
  ],
  [
    [
      69952,
      69955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69956,
      69967
    ],
    "disallowed"
  ],
  [
    [
      69968,
      70003
    ],
    "valid"
  ],
  [
    [
      70004,
      70005
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70006,
      70006
    ],
    "valid"
  ],
  [
    [
      70007,
      70015
    ],
    "disallowed"
  ],
  [
    [
      70016,
      70084
    ],
    "valid"
  ],
  [
    [
      70085,
      70088
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70089,
      70089
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70090,
      70092
    ],
    "valid"
  ],
  [
    [
      70093,
      70093
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70094,
      70095
    ],
    "disallowed"
  ],
  [
    [
      70096,
      70105
    ],
    "valid"
  ],
  [
    [
      70106,
      70106
    ],
    "valid"
  ],
  [
    [
      70107,
      70107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70108,
      70108
    ],
    "valid"
  ],
  [
    [
      70109,
      70111
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70112,
      70112
    ],
    "disallowed"
  ],
  [
    [
      70113,
      70132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70133,
      70143
    ],
    "disallowed"
  ],
  [
    [
      70144,
      70161
    ],
    "valid"
  ],
  [
    [
      70162,
      70162
    ],
    "disallowed"
  ],
  [
    [
      70163,
      70199
    ],
    "valid"
  ],
  [
    [
      70200,
      70205
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70206,
      70271
    ],
    "disallowed"
  ],
  [
    [
      70272,
      70278
    ],
    "valid"
  ],
  [
    [
      70279,
      70279
    ],
    "disallowed"
  ],
  [
    [
      70280,
      70280
    ],
    "valid"
  ],
  [
    [
      70281,
      70281
    ],
    "disallowed"
  ],
  [
    [
      70282,
      70285
    ],
    "valid"
  ],
  [
    [
      70286,
      70286
    ],
    "disallowed"
  ],
  [
    [
      70287,
      70301
    ],
    "valid"
  ],
  [
    [
      70302,
      70302
    ],
    "disallowed"
  ],
  [
    [
      70303,
      70312
    ],
    "valid"
  ],
  [
    [
      70313,
      70313
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70314,
      70319
    ],
    "disallowed"
  ],
  [
    [
      70320,
      70378
    ],
    "valid"
  ],
  [
    [
      70379,
      70383
    ],
    "disallowed"
  ],
  [
    [
      70384,
      70393
    ],
    "valid"
  ],
  [
    [
      70394,
      70399
    ],
    "disallowed"
  ],
  [
    [
      70400,
      70400
    ],
    "valid"
  ],
  [
    [
      70401,
      70403
    ],
    "valid"
  ],
  [
    [
      70404,
      70404
    ],
    "disallowed"
  ],
  [
    [
      70405,
      70412
    ],
    "valid"
  ],
  [
    [
      70413,
      70414
    ],
    "disallowed"
  ],
  [
    [
      70415,
      70416
    ],
    "valid"
  ],
  [
    [
      70417,
      70418
    ],
    "disallowed"
  ],
  [
    [
      70419,
      70440
    ],
    "valid"
  ],
  [
    [
      70441,
      70441
    ],
    "disallowed"
  ],
  [
    [
      70442,
      70448
    ],
    "valid"
  ],
  [
    [
      70449,
      70449
    ],
    "disallowed"
  ],
  [
    [
      70450,
      70451
    ],
    "valid"
  ],
  [
    [
      70452,
      70452
    ],
    "disallowed"
  ],
  [
    [
      70453,
      70457
    ],
    "valid"
  ],
  [
    [
      70458,
      70459
    ],
    "disallowed"
  ],
  [
    [
      70460,
      70468
    ],
    "valid"
  ],
  [
    [
      70469,
      70470
    ],
    "disallowed"
  ],
  [
    [
      70471,
      70472
    ],
    "valid"
  ],
  [
    [
      70473,
      70474
    ],
    "disallowed"
  ],
  [
    [
      70475,
      70477
    ],
    "valid"
  ],
  [
    [
      70478,
      70479
    ],
    "disallowed"
  ],
  [
    [
      70480,
      70480
    ],
    "valid"
  ],
  [
    [
      70481,
      70486
    ],
    "disallowed"
  ],
  [
    [
      70487,
      70487
    ],
    "valid"
  ],
  [
    [
      70488,
      70492
    ],
    "disallowed"
  ],
  [
    [
      70493,
      70499
    ],
    "valid"
  ],
  [
    [
      70500,
      70501
    ],
    "disallowed"
  ],
  [
    [
      70502,
      70508
    ],
    "valid"
  ],
  [
    [
      70509,
      70511
    ],
    "disallowed"
  ],
  [
    [
      70512,
      70516
    ],
    "valid"
  ],
  [
    [
      70517,
      70783
    ],
    "disallowed"
  ],
  [
    [
      70784,
      70853
    ],
    "valid"
  ],
  [
    [
      70854,
      70854
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70855,
      70855
    ],
    "valid"
  ],
  [
    [
      70856,
      70863
    ],
    "disallowed"
  ],
  [
    [
      70864,
      70873
    ],
    "valid"
  ],
  [
    [
      70874,
      71039
    ],
    "disallowed"
  ],
  [
    [
      71040,
      71093
    ],
    "valid"
  ],
  [
    [
      71094,
      71095
    ],
    "disallowed"
  ],
  [
    [
      71096,
      71104
    ],
    "valid"
  ],
  [
    [
      71105,
      71113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71114,
      71127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71128,
      71133
    ],
    "valid"
  ],
  [
    [
      71134,
      71167
    ],
    "disallowed"
  ],
  [
    [
      71168,
      71232
    ],
    "valid"
  ],
  [
    [
      71233,
      71235
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71236,
      71236
    ],
    "valid"
  ],
  [
    [
      71237,
      71247
    ],
    "disallowed"
  ],
  [
    [
      71248,
      71257
    ],
    "valid"
  ],
  [
    [
      71258,
      71295
    ],
    "disallowed"
  ],
  [
    [
      71296,
      71351
    ],
    "valid"
  ],
  [
    [
      71352,
      71359
    ],
    "disallowed"
  ],
  [
    [
      71360,
      71369
    ],
    "valid"
  ],
  [
    [
      71370,
      71423
    ],
    "disallowed"
  ],
  [
    [
      71424,
      71449
    ],
    "valid"
  ],
  [
    [
      71450,
      71452
    ],
    "disallowed"
  ],
  [
    [
      71453,
      71467
    ],
    "valid"
  ],
  [
    [
      71468,
      71471
    ],
    "disallowed"
  ],
  [
    [
      71472,
      71481
    ],
    "valid"
  ],
  [
    [
      71482,
      71487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71488,
      71839
    ],
    "disallowed"
  ],
  [
    [
      71840,
      71840
    ],
    "mapped",
    [
      71872
    ]
  ],
  [
    [
      71841,
      71841
    ],
    "mapped",
    [
      71873
    ]
  ],
  [
    [
      71842,
      71842
    ],
    "mapped",
    [
      71874
    ]
  ],
  [
    [
      71843,
      71843
    ],
    "mapped",
    [
      71875
    ]
  ],
  [
    [
      71844,
      71844
    ],
    "mapped",
    [
      71876
    ]
  ],
  [
    [
      71845,
      71845
    ],
    "mapped",
    [
      71877
    ]
  ],
  [
    [
      71846,
      71846
    ],
    "mapped",
    [
      71878
    ]
  ],
  [
    [
      71847,
      71847
    ],
    "mapped",
    [
      71879
    ]
  ],
  [
    [
      71848,
      71848
    ],
    "mapped",
    [
      71880
    ]
  ],
  [
    [
      71849,
      71849
    ],
    "mapped",
    [
      71881
    ]
  ],
  [
    [
      71850,
      71850
    ],
    "mapped",
    [
      71882
    ]
  ],
  [
    [
      71851,
      71851
    ],
    "mapped",
    [
      71883
    ]
  ],
  [
    [
      71852,
      71852
    ],
    "mapped",
    [
      71884
    ]
  ],
  [
    [
      71853,
      71853
    ],
    "mapped",
    [
      71885
    ]
  ],
  [
    [
      71854,
      71854
    ],
    "mapped",
    [
      71886
    ]
  ],
  [
    [
      71855,
      71855
    ],
    "mapped",
    [
      71887
    ]
  ],
  [
    [
      71856,
      71856
    ],
    "mapped",
    [
      71888
    ]
  ],
  [
    [
      71857,
      71857
    ],
    "mapped",
    [
      71889
    ]
  ],
  [
    [
      71858,
      71858
    ],
    "mapped",
    [
      71890
    ]
  ],
  [
    [
      71859,
      71859
    ],
    "mapped",
    [
      71891
    ]
  ],
  [
    [
      71860,
      71860
    ],
    "mapped",
    [
      71892
    ]
  ],
  [
    [
      71861,
      71861
    ],
    "mapped",
    [
      71893
    ]
  ],
  [
    [
      71862,
      71862
    ],
    "mapped",
    [
      71894
    ]
  ],
  [
    [
      71863,
      71863
    ],
    "mapped",
    [
      71895
    ]
  ],
  [
    [
      71864,
      71864
    ],
    "mapped",
    [
      71896
    ]
  ],
  [
    [
      71865,
      71865
    ],
    "mapped",
    [
      71897
    ]
  ],
  [
    [
      71866,
      71866
    ],
    "mapped",
    [
      71898
    ]
  ],
  [
    [
      71867,
      71867
    ],
    "mapped",
    [
      71899
    ]
  ],
  [
    [
      71868,
      71868
    ],
    "mapped",
    [
      71900
    ]
  ],
  [
    [
      71869,
      71869
    ],
    "mapped",
    [
      71901
    ]
  ],
  [
    [
      71870,
      71870
    ],
    "mapped",
    [
      71902
    ]
  ],
  [
    [
      71871,
      71871
    ],
    "mapped",
    [
      71903
    ]
  ],
  [
    [
      71872,
      71913
    ],
    "valid"
  ],
  [
    [
      71914,
      71922
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71923,
      71934
    ],
    "disallowed"
  ],
  [
    [
      71935,
      71935
    ],
    "valid"
  ],
  [
    [
      71936,
      72383
    ],
    "disallowed"
  ],
  [
    [
      72384,
      72440
    ],
    "valid"
  ],
  [
    [
      72441,
      73727
    ],
    "disallowed"
  ],
  [
    [
      73728,
      74606
    ],
    "valid"
  ],
  [
    [
      74607,
      74648
    ],
    "valid"
  ],
  [
    [
      74649,
      74649
    ],
    "valid"
  ],
  [
    [
      74650,
      74751
    ],
    "disallowed"
  ],
  [
    [
      74752,
      74850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74851,
      74862
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74863,
      74863
    ],
    "disallowed"
  ],
  [
    [
      74864,
      74867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74868,
      74868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74869,
      74879
    ],
    "disallowed"
  ],
  [
    [
      74880,
      75075
    ],
    "valid"
  ],
  [
    [
      75076,
      77823
    ],
    "disallowed"
  ],
  [
    [
      77824,
      78894
    ],
    "valid"
  ],
  [
    [
      78895,
      82943
    ],
    "disallowed"
  ],
  [
    [
      82944,
      83526
    ],
    "valid"
  ],
  [
    [
      83527,
      92159
    ],
    "disallowed"
  ],
  [
    [
      92160,
      92728
    ],
    "valid"
  ],
  [
    [
      92729,
      92735
    ],
    "disallowed"
  ],
  [
    [
      92736,
      92766
    ],
    "valid"
  ],
  [
    [
      92767,
      92767
    ],
    "disallowed"
  ],
  [
    [
      92768,
      92777
    ],
    "valid"
  ],
  [
    [
      92778,
      92781
    ],
    "disallowed"
  ],
  [
    [
      92782,
      92783
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92784,
      92879
    ],
    "disallowed"
  ],
  [
    [
      92880,
      92909
    ],
    "valid"
  ],
  [
    [
      92910,
      92911
    ],
    "disallowed"
  ],
  [
    [
      92912,
      92916
    ],
    "valid"
  ],
  [
    [
      92917,
      92917
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92918,
      92927
    ],
    "disallowed"
  ],
  [
    [
      92928,
      92982
    ],
    "valid"
  ],
  [
    [
      92983,
      92991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92992,
      92995
    ],
    "valid"
  ],
  [
    [
      92996,
      92997
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92998,
      93007
    ],
    "disallowed"
  ],
  [
    [
      93008,
      93017
    ],
    "valid"
  ],
  [
    [
      93018,
      93018
    ],
    "disallowed"
  ],
  [
    [
      93019,
      93025
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      93026,
      93026
    ],
    "disallowed"
  ],
  [
    [
      93027,
      93047
    ],
    "valid"
  ],
  [
    [
      93048,
      93052
    ],
    "disallowed"
  ],
  [
    [
      93053,
      93071
    ],
    "valid"
  ],
  [
    [
      93072,
      93951
    ],
    "disallowed"
  ],
  [
    [
      93952,
      94020
    ],
    "valid"
  ],
  [
    [
      94021,
      94031
    ],
    "disallowed"
  ],
  [
    [
      94032,
      94078
    ],
    "valid"
  ],
  [
    [
      94079,
      94094
    ],
    "disallowed"
  ],
  [
    [
      94095,
      94111
    ],
    "valid"
  ],
  [
    [
      94112,
      110591
    ],
    "disallowed"
  ],
  [
    [
      110592,
      110593
    ],
    "valid"
  ],
  [
    [
      110594,
      113663
    ],
    "disallowed"
  ],
  [
    [
      113664,
      113770
    ],
    "valid"
  ],
  [
    [
      113771,
      113775
    ],
    "disallowed"
  ],
  [
    [
      113776,
      113788
    ],
    "valid"
  ],
  [
    [
      113789,
      113791
    ],
    "disallowed"
  ],
  [
    [
      113792,
      113800
    ],
    "valid"
  ],
  [
    [
      113801,
      113807
    ],
    "disallowed"
  ],
  [
    [
      113808,
      113817
    ],
    "valid"
  ],
  [
    [
      113818,
      113819
    ],
    "disallowed"
  ],
  [
    [
      113820,
      113820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113821,
      113822
    ],
    "valid"
  ],
  [
    [
      113823,
      113823
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113824,
      113827
    ],
    "ignored"
  ],
  [
    [
      113828,
      118783
    ],
    "disallowed"
  ],
  [
    [
      118784,
      119029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119030,
      119039
    ],
    "disallowed"
  ],
  [
    [
      119040,
      119078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119079,
      119080
    ],
    "disallowed"
  ],
  [
    [
      119081,
      119081
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119082,
      119133
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119134,
      119134
    ],
    "mapped",
    [
      119127,
      119141
    ]
  ],
  [
    [
      119135,
      119135
    ],
    "mapped",
    [
      119128,
      119141
    ]
  ],
  [
    [
      119136,
      119136
    ],
    "mapped",
    [
      119128,
      119141,
      119150
    ]
  ],
  [
    [
      119137,
      119137
    ],
    "mapped",
    [
      119128,
      119141,
      119151
    ]
  ],
  [
    [
      119138,
      119138
    ],
    "mapped",
    [
      119128,
      119141,
      119152
    ]
  ],
  [
    [
      119139,
      119139
    ],
    "mapped",
    [
      119128,
      119141,
      119153
    ]
  ],
  [
    [
      119140,
      119140
    ],
    "mapped",
    [
      119128,
      119141,
      119154
    ]
  ],
  [
    [
      119141,
      119154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119155,
      119162
    ],
    "disallowed"
  ],
  [
    [
      119163,
      119226
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119227,
      119227
    ],
    "mapped",
    [
      119225,
      119141
    ]
  ],
  [
    [
      119228,
      119228
    ],
    "mapped",
    [
      119226,
      119141
    ]
  ],
  [
    [
      119229,
      119229
    ],
    "mapped",
    [
      119225,
      119141,
      119150
    ]
  ],
  [
    [
      119230,
      119230
    ],
    "mapped",
    [
      119226,
      119141,
      119150
    ]
  ],
  [
    [
      119231,
      119231
    ],
    "mapped",
    [
      119225,
      119141,
      119151
    ]
  ],
  [
    [
      119232,
      119232
    ],
    "mapped",
    [
      119226,
      119141,
      119151
    ]
  ],
  [
    [
      119233,
      119261
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119262,
      119272
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119273,
      119295
    ],
    "disallowed"
  ],
  [
    [
      119296,
      119365
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119366,
      119551
    ],
    "disallowed"
  ],
  [
    [
      119552,
      119638
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119639,
      119647
    ],
    "disallowed"
  ],
  [
    [
      119648,
      119665
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119666,
      119807
    ],
    "disallowed"
  ],
  [
    [
      119808,
      119808
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119809,
      119809
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119810,
      119810
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119811,
      119811
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119812,
      119812
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119813,
      119813
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119814,
      119814
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119815,
      119815
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119816,
      119816
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119817,
      119817
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119818,
      119818
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119819,
      119819
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119820,
      119820
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119821,
      119821
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119822,
      119822
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119823,
      119823
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119824,
      119824
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119825,
      119825
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119826,
      119826
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119827,
      119827
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119828,
      119828
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119829,
      119829
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119830,
      119830
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119831,
      119831
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119832,
      119832
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119833,
      119833
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119834,
      119834
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119835,
      119835
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119836,
      119836
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119837,
      119837
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119838,
      119838
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119839,
      119839
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119840,
      119840
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119841,
      119841
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119842,
      119842
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119843,
      119843
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119844,
      119844
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119845,
      119845
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119846,
      119846
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119847,
      119847
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119848,
      119848
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119849,
      119849
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119850,
      119850
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119851,
      119851
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119852,
      119852
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119853,
      119853
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119854,
      119854
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119855,
      119855
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119856,
      119856
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119857,
      119857
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119858,
      119858
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119859,
      119859
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119860,
      119860
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119861,
      119861
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119862,
      119862
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119863,
      119863
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119864,
      119864
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119865,
      119865
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119866,
      119866
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119867,
      119867
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119868,
      119868
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119869,
      119869
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119870,
      119870
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119871,
      119871
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119872,
      119872
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119873,
      119873
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119874,
      119874
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119875,
      119875
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119876,
      119876
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119877,
      119877
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119878,
      119878
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119879,
      119879
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119880,
      119880
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119881,
      119881
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119882,
      119882
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119883,
      119883
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119884,
      119884
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119885,
      119885
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119886,
      119886
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119887,
      119887
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119888,
      119888
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119889,
      119889
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119890,
      119890
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119891,
      119891
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119892,
      119892
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119893,
      119893
    ],
    "disallowed"
  ],
  [
    [
      119894,
      119894
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119895,
      119895
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119896,
      119896
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119897,
      119897
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119898,
      119898
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119899,
      119899
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119900,
      119900
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119901,
      119901
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119902,
      119902
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119903,
      119903
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119904,
      119904
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119905,
      119905
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119906,
      119906
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119907,
      119907
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119908,
      119908
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119909,
      119909
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119910,
      119910
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119911,
      119911
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119912,
      119912
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119913,
      119913
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119914,
      119914
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119915,
      119915
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119916,
      119916
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119917,
      119917
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119918,
      119918
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119919,
      119919
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119920,
      119920
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119921,
      119921
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119922,
      119922
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119923,
      119923
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119924,
      119924
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119925,
      119925
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119926,
      119926
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119927,
      119927
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119928,
      119928
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119929,
      119929
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119930,
      119930
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119931,
      119931
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119932,
      119932
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119933,
      119933
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119934,
      119934
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119935,
      119935
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119936,
      119936
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119937,
      119937
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119938,
      119938
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119939,
      119939
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119940,
      119940
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119941,
      119941
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119942,
      119942
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119943,
      119943
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119944,
      119944
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119945,
      119945
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119946,
      119946
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119947,
      119947
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119948,
      119948
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119949,
      119949
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119950,
      119950
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119951,
      119951
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119952,
      119952
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119953,
      119953
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119954,
      119954
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119955,
      119955
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119956,
      119956
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119957,
      119957
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119958,
      119958
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119959,
      119959
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119960,
      119960
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119961,
      119961
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119962,
      119962
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119963,
      119963
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119964,
      119964
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119965,
      119965
    ],
    "disallowed"
  ],
  [
    [
      119966,
      119966
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119967,
      119967
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119968,
      119969
    ],
    "disallowed"
  ],
  [
    [
      119970,
      119970
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119971,
      119972
    ],
    "disallowed"
  ],
  [
    [
      119973,
      119973
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119974,
      119974
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119975,
      119976
    ],
    "disallowed"
  ],
  [
    [
      119977,
      119977
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119978,
      119978
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119979,
      119979
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119980,
      119980
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119981,
      119981
    ],
    "disallowed"
  ],
  [
    [
      119982,
      119982
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119983,
      119983
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119984,
      119984
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119985,
      119985
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119986,
      119986
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119987,
      119987
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119988,
      119988
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119989,
      119989
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119990,
      119990
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119991,
      119991
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119992,
      119992
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119993,
      119993
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119994,
      119994
    ],
    "disallowed"
  ],
  [
    [
      119995,
      119995
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119996,
      119996
    ],
    "disallowed"
  ],
  [
    [
      119997,
      119997
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119998,
      119998
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119999,
      119999
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      12e4,
      12e4
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120001,
      120001
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120002,
      120002
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120003,
      120003
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120004,
      120004
    ],
    "disallowed"
  ],
  [
    [
      120005,
      120005
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120006,
      120006
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120007,
      120007
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120008,
      120008
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120009,
      120009
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120010,
      120010
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120011,
      120011
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120012,
      120012
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120013,
      120013
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120014,
      120014
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120015,
      120015
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120016,
      120016
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120017,
      120017
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120018,
      120018
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120019,
      120019
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120020,
      120020
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120021,
      120021
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120022,
      120022
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120023,
      120023
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120024,
      120024
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120025,
      120025
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120026,
      120026
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120027,
      120027
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120028,
      120028
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120029,
      120029
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120030,
      120030
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120031,
      120031
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120032,
      120032
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120033,
      120033
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120034,
      120034
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120035,
      120035
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120036,
      120036
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120037,
      120037
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120038,
      120038
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120039,
      120039
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120040,
      120040
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120041,
      120041
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120042,
      120042
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120043,
      120043
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120044,
      120044
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120045,
      120045
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120046,
      120046
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120047,
      120047
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120048,
      120048
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120049,
      120049
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120050,
      120050
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120051,
      120051
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120052,
      120052
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120053,
      120053
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120054,
      120054
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120055,
      120055
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120056,
      120056
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120057,
      120057
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120058,
      120058
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120059,
      120059
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120060,
      120060
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120061,
      120061
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120062,
      120062
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120063,
      120063
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120064,
      120064
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120065,
      120065
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120066,
      120066
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120067,
      120067
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120068,
      120068
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120069,
      120069
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120070,
      120070
    ],
    "disallowed"
  ],
  [
    [
      120071,
      120071
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120072,
      120072
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120073,
      120073
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120074,
      120074
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120075,
      120076
    ],
    "disallowed"
  ],
  [
    [
      120077,
      120077
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120078,
      120078
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120079,
      120079
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120080,
      120080
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120081,
      120081
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120082,
      120082
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120083,
      120083
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120084,
      120084
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120085,
      120085
    ],
    "disallowed"
  ],
  [
    [
      120086,
      120086
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120087,
      120087
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120088,
      120088
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120089,
      120089
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120090,
      120090
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120091,
      120091
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120092,
      120092
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120093,
      120093
    ],
    "disallowed"
  ],
  [
    [
      120094,
      120094
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120095,
      120095
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120096,
      120096
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120097,
      120097
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120098,
      120098
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120099,
      120099
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120100,
      120100
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120101,
      120101
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120102,
      120102
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120103,
      120103
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120104,
      120104
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120105,
      120105
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120106,
      120106
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120107,
      120107
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120108,
      120108
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120109,
      120109
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120110,
      120110
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120111,
      120111
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120112,
      120112
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120113,
      120113
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120114,
      120114
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120115,
      120115
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120116,
      120116
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120117,
      120117
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120118,
      120118
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120119,
      120119
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120120,
      120120
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120121,
      120121
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120122,
      120122
    ],
    "disallowed"
  ],
  [
    [
      120123,
      120123
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120124,
      120124
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120125,
      120125
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120126,
      120126
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120127,
      120127
    ],
    "disallowed"
  ],
  [
    [
      120128,
      120128
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120129,
      120129
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120130,
      120130
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120131,
      120131
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120132,
      120132
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120133,
      120133
    ],
    "disallowed"
  ],
  [
    [
      120134,
      120134
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120135,
      120137
    ],
    "disallowed"
  ],
  [
    [
      120138,
      120138
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120139,
      120139
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120140,
      120140
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120141,
      120141
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120142,
      120142
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120143,
      120143
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120144,
      120144
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120145,
      120145
    ],
    "disallowed"
  ],
  [
    [
      120146,
      120146
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120147,
      120147
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120148,
      120148
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120149,
      120149
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120150,
      120150
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120151,
      120151
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120152,
      120152
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120153,
      120153
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120154,
      120154
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120155,
      120155
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120156,
      120156
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120157,
      120157
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120158,
      120158
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120159,
      120159
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120160,
      120160
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120161,
      120161
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120162,
      120162
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120163,
      120163
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120164,
      120164
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120165,
      120165
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120166,
      120166
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120167,
      120167
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120168,
      120168
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120169,
      120169
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120170,
      120170
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120171,
      120171
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120172,
      120172
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120173,
      120173
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120174,
      120174
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120175,
      120175
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120176,
      120176
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120177,
      120177
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120178,
      120178
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120179,
      120179
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120180,
      120180
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120181,
      120181
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120182,
      120182
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120183,
      120183
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120184,
      120184
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120185,
      120185
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120186,
      120186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120187,
      120187
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120188,
      120188
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120189,
      120189
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120190,
      120190
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120191,
      120191
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120192,
      120192
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120193,
      120193
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120194,
      120194
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120195,
      120195
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120196,
      120196
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120197,
      120197
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120198,
      120198
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120199,
      120199
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120200,
      120200
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120201,
      120201
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120202,
      120202
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120203,
      120203
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120204,
      120204
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120205,
      120205
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120206,
      120206
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120207,
      120207
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120208,
      120208
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120209,
      120209
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120210,
      120210
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120211,
      120211
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120212,
      120212
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120213,
      120213
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120214,
      120214
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120215,
      120215
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120216,
      120216
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120217,
      120217
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120218,
      120218
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120219,
      120219
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120220,
      120220
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120221,
      120221
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120222,
      120222
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120223,
      120223
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120224,
      120224
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120225,
      120225
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120226,
      120226
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120227,
      120227
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120228,
      120228
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120229,
      120229
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120230,
      120230
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120231,
      120231
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120232,
      120232
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120233,
      120233
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120234,
      120234
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120235,
      120235
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120236,
      120236
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120237,
      120237
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120238,
      120238
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120239,
      120239
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120240,
      120240
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120241,
      120241
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120242,
      120242
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120243,
      120243
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120244,
      120244
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120245,
      120245
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120246,
      120246
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120247,
      120247
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120248,
      120248
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120249,
      120249
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120250,
      120250
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120251,
      120251
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120252,
      120252
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120253,
      120253
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120254,
      120254
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120255,
      120255
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120256,
      120256
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120257,
      120257
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120258,
      120258
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120259,
      120259
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120260,
      120260
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120261,
      120261
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120262,
      120262
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120263,
      120263
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120264,
      120264
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120265,
      120265
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120266,
      120266
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120267,
      120267
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120268,
      120268
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120269,
      120269
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120270,
      120270
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120271,
      120271
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120272,
      120272
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120273,
      120273
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120274,
      120274
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120275,
      120275
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120276,
      120276
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120277,
      120277
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120278,
      120278
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120279,
      120279
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120280,
      120280
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120281,
      120281
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120282,
      120282
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120283,
      120283
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120284,
      120284
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120285,
      120285
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120286,
      120286
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120287,
      120287
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120288,
      120288
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120289,
      120289
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120290,
      120290
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120291,
      120291
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120292,
      120292
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120293,
      120293
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120294,
      120294
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120295,
      120295
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120296,
      120296
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120297,
      120297
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120298,
      120298
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120299,
      120299
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120300,
      120300
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120301,
      120301
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120302,
      120302
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120303,
      120303
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120304,
      120304
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120305,
      120305
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120306,
      120306
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120307,
      120307
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120308,
      120308
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120309,
      120309
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120310,
      120310
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120311,
      120311
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120312,
      120312
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120313,
      120313
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120314,
      120314
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120315,
      120315
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120316,
      120316
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120317,
      120317
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120318,
      120318
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120319,
      120319
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120320,
      120320
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120321,
      120321
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120322,
      120322
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120323,
      120323
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120324,
      120324
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120325,
      120325
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120326,
      120326
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120327,
      120327
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120328,
      120328
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120329,
      120329
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120330,
      120330
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120331,
      120331
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120332,
      120332
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120333,
      120333
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120334,
      120334
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120335,
      120335
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120336,
      120336
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120337,
      120337
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120338,
      120338
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120339,
      120339
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120340,
      120340
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120341,
      120341
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120342,
      120342
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120343,
      120343
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120344,
      120344
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120345,
      120345
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120346,
      120346
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120347,
      120347
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120348,
      120348
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120349,
      120349
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120350,
      120350
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120351,
      120351
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120352,
      120352
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120353,
      120353
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120354,
      120354
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120355,
      120355
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120356,
      120356
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120357,
      120357
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120358,
      120358
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120359,
      120359
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120360,
      120360
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120361,
      120361
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120362,
      120362
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120363,
      120363
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120364,
      120364
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120365,
      120365
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120366,
      120366
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120367,
      120367
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120368,
      120368
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120369,
      120369
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120370,
      120370
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120371,
      120371
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120372,
      120372
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120373,
      120373
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120374,
      120374
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120375,
      120375
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120376,
      120376
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120377,
      120377
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120378,
      120378
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120379,
      120379
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120380,
      120380
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120381,
      120381
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120382,
      120382
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120383,
      120383
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120384,
      120384
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120385,
      120385
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120386,
      120386
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120387,
      120387
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120388,
      120388
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120389,
      120389
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120390,
      120390
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120391,
      120391
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120392,
      120392
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120393,
      120393
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120394,
      120394
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120395,
      120395
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120396,
      120396
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120397,
      120397
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120398,
      120398
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120399,
      120399
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120400,
      120400
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120401,
      120401
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120402,
      120402
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120403,
      120403
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120404,
      120404
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120405,
      120405
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120406,
      120406
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120407,
      120407
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120408,
      120408
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120409,
      120409
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120410,
      120410
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120411,
      120411
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120412,
      120412
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120413,
      120413
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120414,
      120414
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120415,
      120415
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120416,
      120416
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120417,
      120417
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120418,
      120418
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120419,
      120419
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120420,
      120420
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120421,
      120421
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120422,
      120422
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120423,
      120423
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120424,
      120424
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120425,
      120425
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120426,
      120426
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120427,
      120427
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120428,
      120428
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120429,
      120429
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120430,
      120430
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120431,
      120431
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120432,
      120432
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120433,
      120433
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120434,
      120434
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120435,
      120435
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120436,
      120436
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120437,
      120437
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120438,
      120438
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120439,
      120439
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120440,
      120440
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120441,
      120441
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120442,
      120442
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120443,
      120443
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120444,
      120444
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120445,
      120445
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120446,
      120446
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120447,
      120447
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120448,
      120448
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120449,
      120449
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120450,
      120450
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120451,
      120451
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120452,
      120452
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120453,
      120453
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120454,
      120454
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120455,
      120455
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120456,
      120456
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120457,
      120457
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120458,
      120458
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120459,
      120459
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120460,
      120460
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120461,
      120461
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120462,
      120462
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120463,
      120463
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120464,
      120464
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120465,
      120465
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120466,
      120466
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120467,
      120467
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120468,
      120468
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120469,
      120469
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120470,
      120470
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120471,
      120471
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120472,
      120472
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120473,
      120473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120474,
      120474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120475,
      120475
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120476,
      120476
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120477,
      120477
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120478,
      120478
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120479,
      120479
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120480,
      120480
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120481,
      120481
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120482,
      120482
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120483,
      120483
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120484,
      120484
    ],
    "mapped",
    [
      305
    ]
  ],
  [
    [
      120485,
      120485
    ],
    "mapped",
    [
      567
    ]
  ],
  [
    [
      120486,
      120487
    ],
    "disallowed"
  ],
  [
    [
      120488,
      120488
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120489,
      120489
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120490,
      120490
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120491,
      120491
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120492,
      120492
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120493,
      120493
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120494,
      120494
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120495,
      120495
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120496,
      120496
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120497,
      120497
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120498,
      120498
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120499,
      120499
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120500,
      120500
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120501,
      120501
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120502,
      120502
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120503,
      120503
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120504,
      120504
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120505,
      120505
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120506,
      120506
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120507,
      120507
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120508,
      120508
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120509,
      120509
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120510,
      120510
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120511,
      120511
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120512,
      120512
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120513,
      120513
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120514,
      120514
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120515,
      120515
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120516,
      120516
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120517,
      120517
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120518,
      120518
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120519,
      120519
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120520,
      120520
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120521,
      120521
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120522,
      120522
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120523,
      120523
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120524,
      120524
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120525,
      120525
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120526,
      120526
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120527,
      120527
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120528,
      120528
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120529,
      120529
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120530,
      120530
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120531,
      120532
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120533,
      120533
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120534,
      120534
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120535,
      120535
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120536,
      120536
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120537,
      120537
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120538,
      120538
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120539,
      120539
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120540,
      120540
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120541,
      120541
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120542,
      120542
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120543,
      120543
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120544,
      120544
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120545,
      120545
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120546,
      120546
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120547,
      120547
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120548,
      120548
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120549,
      120549
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120550,
      120550
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120551,
      120551
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120552,
      120552
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120553,
      120553
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120554,
      120554
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120555,
      120555
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120556,
      120556
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120557,
      120557
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120558,
      120558
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120559,
      120559
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120560,
      120560
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120561,
      120561
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120562,
      120562
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120563,
      120563
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120564,
      120564
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120565,
      120565
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120566,
      120566
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120567,
      120567
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120568,
      120568
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120569,
      120569
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120570,
      120570
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120571,
      120571
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120572,
      120572
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120573,
      120573
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120574,
      120574
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120575,
      120575
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120576,
      120576
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120577,
      120577
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120578,
      120578
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120579,
      120579
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120580,
      120580
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120581,
      120581
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120582,
      120582
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120583,
      120583
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120584,
      120584
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120585,
      120585
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120586,
      120586
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120587,
      120587
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120588,
      120588
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120589,
      120590
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120591,
      120591
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120592,
      120592
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120593,
      120593
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120594,
      120594
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120595,
      120595
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120596,
      120596
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120597,
      120597
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120598,
      120598
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120599,
      120599
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120600,
      120600
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120601,
      120601
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120602,
      120602
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120603,
      120603
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120604,
      120604
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120605,
      120605
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120606,
      120606
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120607,
      120607
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120608,
      120608
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120609,
      120609
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120610,
      120610
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120611,
      120611
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120612,
      120612
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120613,
      120613
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120614,
      120614
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120615,
      120615
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120616,
      120616
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120617,
      120617
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120618,
      120618
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120619,
      120619
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120620,
      120620
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120621,
      120621
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120622,
      120622
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120623,
      120623
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120624,
      120624
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120625,
      120625
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120626,
      120626
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120627,
      120627
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120628,
      120628
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120629,
      120629
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120630,
      120630
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120631,
      120631
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120632,
      120632
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120633,
      120633
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120634,
      120634
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120635,
      120635
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120636,
      120636
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120637,
      120637
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120638,
      120638
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120639,
      120639
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120640,
      120640
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120641,
      120641
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120642,
      120642
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120643,
      120643
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120644,
      120644
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120645,
      120645
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120646,
      120646
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120647,
      120648
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120649,
      120649
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120650,
      120650
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120651,
      120651
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120652,
      120652
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120653,
      120653
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120654,
      120654
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120655,
      120655
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120656,
      120656
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120657,
      120657
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120658,
      120658
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120659,
      120659
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120660,
      120660
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120661,
      120661
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120662,
      120662
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120663,
      120663
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120664,
      120664
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120665,
      120665
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120666,
      120666
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120667,
      120667
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120668,
      120668
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120669,
      120669
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120670,
      120670
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120671,
      120671
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120672,
      120672
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120673,
      120673
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120674,
      120674
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120675,
      120675
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120676,
      120676
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120677,
      120677
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120678,
      120678
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120679,
      120679
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120680,
      120680
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120681,
      120681
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120682,
      120682
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120683,
      120683
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120684,
      120684
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120685,
      120685
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120686,
      120686
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120687,
      120687
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120688,
      120688
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120689,
      120689
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120690,
      120690
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120691,
      120691
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120692,
      120692
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120693,
      120693
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120694,
      120694
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120695,
      120695
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120696,
      120696
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120697,
      120697
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120698,
      120698
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120699,
      120699
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120700,
      120700
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120701,
      120701
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120702,
      120702
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120703,
      120703
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120704,
      120704
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120705,
      120706
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120707,
      120707
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120708,
      120708
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120709,
      120709
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120710,
      120710
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120711,
      120711
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120712,
      120712
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120713,
      120713
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120714,
      120714
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120715,
      120715
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120716,
      120716
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120717,
      120717
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120718,
      120718
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120719,
      120719
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120720,
      120720
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120721,
      120721
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120722,
      120722
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120723,
      120723
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120724,
      120724
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120725,
      120725
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120726,
      120726
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120727,
      120727
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120728,
      120728
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120729,
      120729
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120730,
      120730
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120731,
      120731
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120732,
      120732
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120733,
      120733
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120734,
      120734
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120735,
      120735
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120736,
      120736
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120737,
      120737
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120738,
      120738
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120739,
      120739
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120740,
      120740
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120741,
      120741
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120742,
      120742
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120743,
      120743
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120744,
      120744
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120745,
      120745
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120746,
      120746
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120747,
      120747
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120748,
      120748
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120749,
      120749
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120750,
      120750
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120751,
      120751
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120752,
      120752
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120753,
      120753
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120754,
      120754
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120755,
      120755
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120756,
      120756
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120757,
      120757
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120758,
      120758
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120759,
      120759
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120760,
      120760
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120761,
      120761
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120762,
      120762
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120763,
      120764
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120765,
      120765
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120766,
      120766
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120767,
      120767
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120768,
      120768
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120769,
      120769
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120770,
      120770
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120771,
      120771
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120772,
      120772
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120773,
      120773
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120774,
      120774
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120775,
      120775
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120776,
      120776
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120777,
      120777
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120778,
      120779
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      120780,
      120781
    ],
    "disallowed"
  ],
  [
    [
      120782,
      120782
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120783,
      120783
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120784,
      120784
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120785,
      120785
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120786,
      120786
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120787,
      120787
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120788,
      120788
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120789,
      120789
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120790,
      120790
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120791,
      120791
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120792,
      120792
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120793,
      120793
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120794,
      120794
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120795,
      120795
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120796,
      120796
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120797,
      120797
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120798,
      120798
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120799,
      120799
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120800,
      120800
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120801,
      120801
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120802,
      120802
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120803,
      120803
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120804,
      120804
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120805,
      120805
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120806,
      120806
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120807,
      120807
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120808,
      120808
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120809,
      120809
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120810,
      120810
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120811,
      120811
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120812,
      120812
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120813,
      120813
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120814,
      120814
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120815,
      120815
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120816,
      120816
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120817,
      120817
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120818,
      120818
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120819,
      120819
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120820,
      120820
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120821,
      120821
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120822,
      120822
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120823,
      120823
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120824,
      120824
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120825,
      120825
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120826,
      120826
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120827,
      120827
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120828,
      120828
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120829,
      120829
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120830,
      120830
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120831,
      120831
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120832,
      121343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121344,
      121398
    ],
    "valid"
  ],
  [
    [
      121399,
      121402
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121403,
      121452
    ],
    "valid"
  ],
  [
    [
      121453,
      121460
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121461,
      121461
    ],
    "valid"
  ],
  [
    [
      121462,
      121475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121476,
      121476
    ],
    "valid"
  ],
  [
    [
      121477,
      121483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121484,
      121498
    ],
    "disallowed"
  ],
  [
    [
      121499,
      121503
    ],
    "valid"
  ],
  [
    [
      121504,
      121504
    ],
    "disallowed"
  ],
  [
    [
      121505,
      121519
    ],
    "valid"
  ],
  [
    [
      121520,
      124927
    ],
    "disallowed"
  ],
  [
    [
      124928,
      125124
    ],
    "valid"
  ],
  [
    [
      125125,
      125126
    ],
    "disallowed"
  ],
  [
    [
      125127,
      125135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      125136,
      125142
    ],
    "valid"
  ],
  [
    [
      125143,
      126463
    ],
    "disallowed"
  ],
  [
    [
      126464,
      126464
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126465,
      126465
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126466,
      126466
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126467,
      126467
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126468,
      126468
    ],
    "disallowed"
  ],
  [
    [
      126469,
      126469
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126470,
      126470
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126471,
      126471
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126472,
      126472
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126473,
      126473
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126474,
      126474
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126475,
      126475
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126476,
      126476
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126477,
      126477
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126478,
      126478
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126479,
      126479
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126480,
      126480
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126481,
      126481
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126482,
      126482
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126483,
      126483
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126484,
      126484
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126485,
      126485
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126486,
      126486
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126487,
      126487
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126488,
      126488
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126489,
      126489
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126490,
      126490
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126491,
      126491
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126492,
      126492
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126493,
      126493
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126494,
      126494
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126495,
      126495
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126496,
      126496
    ],
    "disallowed"
  ],
  [
    [
      126497,
      126497
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126498,
      126498
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126499,
      126499
    ],
    "disallowed"
  ],
  [
    [
      126500,
      126500
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126501,
      126502
    ],
    "disallowed"
  ],
  [
    [
      126503,
      126503
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126504,
      126504
    ],
    "disallowed"
  ],
  [
    [
      126505,
      126505
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126506,
      126506
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126507,
      126507
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126508,
      126508
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126509,
      126509
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126510,
      126510
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126511,
      126511
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126512,
      126512
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126513,
      126513
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126514,
      126514
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126515,
      126515
    ],
    "disallowed"
  ],
  [
    [
      126516,
      126516
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126517,
      126517
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126518,
      126518
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126519,
      126519
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126520,
      126520
    ],
    "disallowed"
  ],
  [
    [
      126521,
      126521
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126522,
      126522
    ],
    "disallowed"
  ],
  [
    [
      126523,
      126523
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126524,
      126529
    ],
    "disallowed"
  ],
  [
    [
      126530,
      126530
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126531,
      126534
    ],
    "disallowed"
  ],
  [
    [
      126535,
      126535
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126536,
      126536
    ],
    "disallowed"
  ],
  [
    [
      126537,
      126537
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126538,
      126538
    ],
    "disallowed"
  ],
  [
    [
      126539,
      126539
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126540,
      126540
    ],
    "disallowed"
  ],
  [
    [
      126541,
      126541
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126542,
      126542
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126543,
      126543
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126544,
      126544
    ],
    "disallowed"
  ],
  [
    [
      126545,
      126545
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126546,
      126546
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126547,
      126547
    ],
    "disallowed"
  ],
  [
    [
      126548,
      126548
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126549,
      126550
    ],
    "disallowed"
  ],
  [
    [
      126551,
      126551
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126552,
      126552
    ],
    "disallowed"
  ],
  [
    [
      126553,
      126553
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126554,
      126554
    ],
    "disallowed"
  ],
  [
    [
      126555,
      126555
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126556,
      126556
    ],
    "disallowed"
  ],
  [
    [
      126557,
      126557
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126558,
      126558
    ],
    "disallowed"
  ],
  [
    [
      126559,
      126559
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126560,
      126560
    ],
    "disallowed"
  ],
  [
    [
      126561,
      126561
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126562,
      126562
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126563,
      126563
    ],
    "disallowed"
  ],
  [
    [
      126564,
      126564
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126565,
      126566
    ],
    "disallowed"
  ],
  [
    [
      126567,
      126567
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126568,
      126568
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126569,
      126569
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126570,
      126570
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126571,
      126571
    ],
    "disallowed"
  ],
  [
    [
      126572,
      126572
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126573,
      126573
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126574,
      126574
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126575,
      126575
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126576,
      126576
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126577,
      126577
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126578,
      126578
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126579,
      126579
    ],
    "disallowed"
  ],
  [
    [
      126580,
      126580
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126581,
      126581
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126582,
      126582
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126583,
      126583
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126584,
      126584
    ],
    "disallowed"
  ],
  [
    [
      126585,
      126585
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126586,
      126586
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126587,
      126587
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126588,
      126588
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126589,
      126589
    ],
    "disallowed"
  ],
  [
    [
      126590,
      126590
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126591,
      126591
    ],
    "disallowed"
  ],
  [
    [
      126592,
      126592
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126593,
      126593
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126594,
      126594
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126595,
      126595
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126596,
      126596
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126597,
      126597
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126598,
      126598
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126599,
      126599
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126600,
      126600
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126601,
      126601
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126602,
      126602
    ],
    "disallowed"
  ],
  [
    [
      126603,
      126603
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126604,
      126604
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126605,
      126605
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126606,
      126606
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126607,
      126607
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126608,
      126608
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126609,
      126609
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126610,
      126610
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126611,
      126611
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126612,
      126612
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126613,
      126613
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126614,
      126614
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126615,
      126615
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126616,
      126616
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126617,
      126617
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126618,
      126618
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126619,
      126619
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126620,
      126624
    ],
    "disallowed"
  ],
  [
    [
      126625,
      126625
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126626,
      126626
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126627,
      126627
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126628,
      126628
    ],
    "disallowed"
  ],
  [
    [
      126629,
      126629
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126630,
      126630
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126631,
      126631
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126632,
      126632
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126633,
      126633
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126634,
      126634
    ],
    "disallowed"
  ],
  [
    [
      126635,
      126635
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126636,
      126636
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126637,
      126637
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126638,
      126638
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126639,
      126639
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126640,
      126640
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126641,
      126641
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126642,
      126642
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126643,
      126643
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126644,
      126644
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126645,
      126645
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126646,
      126646
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126647,
      126647
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126648,
      126648
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126649,
      126649
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126650,
      126650
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126651,
      126651
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126652,
      126703
    ],
    "disallowed"
  ],
  [
    [
      126704,
      126705
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      126706,
      126975
    ],
    "disallowed"
  ],
  [
    [
      126976,
      127019
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127020,
      127023
    ],
    "disallowed"
  ],
  [
    [
      127024,
      127123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127124,
      127135
    ],
    "disallowed"
  ],
  [
    [
      127136,
      127150
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127151,
      127152
    ],
    "disallowed"
  ],
  [
    [
      127153,
      127166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127167,
      127167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127168,
      127168
    ],
    "disallowed"
  ],
  [
    [
      127169,
      127183
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127184,
      127184
    ],
    "disallowed"
  ],
  [
    [
      127185,
      127199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127200,
      127221
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127222,
      127231
    ],
    "disallowed"
  ],
  [
    [
      127232,
      127232
    ],
    "disallowed"
  ],
  [
    [
      127233,
      127233
    ],
    "disallowed_STD3_mapped",
    [
      48,
      44
    ]
  ],
  [
    [
      127234,
      127234
    ],
    "disallowed_STD3_mapped",
    [
      49,
      44
    ]
  ],
  [
    [
      127235,
      127235
    ],
    "disallowed_STD3_mapped",
    [
      50,
      44
    ]
  ],
  [
    [
      127236,
      127236
    ],
    "disallowed_STD3_mapped",
    [
      51,
      44
    ]
  ],
  [
    [
      127237,
      127237
    ],
    "disallowed_STD3_mapped",
    [
      52,
      44
    ]
  ],
  [
    [
      127238,
      127238
    ],
    "disallowed_STD3_mapped",
    [
      53,
      44
    ]
  ],
  [
    [
      127239,
      127239
    ],
    "disallowed_STD3_mapped",
    [
      54,
      44
    ]
  ],
  [
    [
      127240,
      127240
    ],
    "disallowed_STD3_mapped",
    [
      55,
      44
    ]
  ],
  [
    [
      127241,
      127241
    ],
    "disallowed_STD3_mapped",
    [
      56,
      44
    ]
  ],
  [
    [
      127242,
      127242
    ],
    "disallowed_STD3_mapped",
    [
      57,
      44
    ]
  ],
  [
    [
      127243,
      127244
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127245,
      127247
    ],
    "disallowed"
  ],
  [
    [
      127248,
      127248
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      127249,
      127249
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      127250,
      127250
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      127251,
      127251
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      127252,
      127252
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      127253,
      127253
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      127254,
      127254
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      127255,
      127255
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      127256,
      127256
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      127257,
      127257
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      127258,
      127258
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      127259,
      127259
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      127260,
      127260
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      127261,
      127261
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      127262,
      127262
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      127263,
      127263
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      127264,
      127264
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      127265,
      127265
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      127266,
      127266
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      127267,
      127267
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      127268,
      127268
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      127269,
      127269
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      127270,
      127270
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      127271,
      127271
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      127272,
      127272
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      127273,
      127273
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      127274,
      127274
    ],
    "mapped",
    [
      12308,
      115,
      12309
    ]
  ],
  [
    [
      127275,
      127275
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127276,
      127276
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127277,
      127277
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      127278,
      127278
    ],
    "mapped",
    [
      119,
      122
    ]
  ],
  [
    [
      127279,
      127279
    ],
    "disallowed"
  ],
  [
    [
      127280,
      127280
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      127281,
      127281
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      127282,
      127282
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127283,
      127283
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      127284,
      127284
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      127285,
      127285
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      127286,
      127286
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      127287,
      127287
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      127288,
      127288
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      127289,
      127289
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      127290,
      127290
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      127291,
      127291
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      127292,
      127292
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      127293,
      127293
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      127294,
      127294
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      127295,
      127295
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      127296,
      127296
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      127297,
      127297
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127298,
      127298
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      127299,
      127299
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      127300,
      127300
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      127301,
      127301
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      127302,
      127302
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      127303,
      127303
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      127304,
      127304
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      127305,
      127305
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      127306,
      127306
    ],
    "mapped",
    [
      104,
      118
    ]
  ],
  [
    [
      127307,
      127307
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      127308,
      127308
    ],
    "mapped",
    [
      115,
      100
    ]
  ],
  [
    [
      127309,
      127309
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      127310,
      127310
    ],
    "mapped",
    [
      112,
      112,
      118
    ]
  ],
  [
    [
      127311,
      127311
    ],
    "mapped",
    [
      119,
      99
    ]
  ],
  [
    [
      127312,
      127318
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127319,
      127319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127320,
      127326
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127327,
      127327
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127328,
      127337
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127338,
      127338
    ],
    "mapped",
    [
      109,
      99
    ]
  ],
  [
    [
      127339,
      127339
    ],
    "mapped",
    [
      109,
      100
    ]
  ],
  [
    [
      127340,
      127343
    ],
    "disallowed"
  ],
  [
    [
      127344,
      127352
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127353,
      127353
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127354,
      127354
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127355,
      127356
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127357,
      127358
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127359,
      127359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127360,
      127369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127370,
      127373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127374,
      127375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127376,
      127376
    ],
    "mapped",
    [
      100,
      106
    ]
  ],
  [
    [
      127377,
      127386
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127387,
      127461
    ],
    "disallowed"
  ],
  [
    [
      127462,
      127487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127488,
      127488
    ],
    "mapped",
    [
      12411,
      12363
    ]
  ],
  [
    [
      127489,
      127489
    ],
    "mapped",
    [
      12467,
      12467
    ]
  ],
  [
    [
      127490,
      127490
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      127491,
      127503
    ],
    "disallowed"
  ],
  [
    [
      127504,
      127504
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      127505,
      127505
    ],
    "mapped",
    [
      23383
    ]
  ],
  [
    [
      127506,
      127506
    ],
    "mapped",
    [
      21452
    ]
  ],
  [
    [
      127507,
      127507
    ],
    "mapped",
    [
      12487
    ]
  ],
  [
    [
      127508,
      127508
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      127509,
      127509
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      127510,
      127510
    ],
    "mapped",
    [
      35299
    ]
  ],
  [
    [
      127511,
      127511
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      127512,
      127512
    ],
    "mapped",
    [
      20132
    ]
  ],
  [
    [
      127513,
      127513
    ],
    "mapped",
    [
      26144
    ]
  ],
  [
    [
      127514,
      127514
    ],
    "mapped",
    [
      28961
    ]
  ],
  [
    [
      127515,
      127515
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      127516,
      127516
    ],
    "mapped",
    [
      21069
    ]
  ],
  [
    [
      127517,
      127517
    ],
    "mapped",
    [
      24460
    ]
  ],
  [
    [
      127518,
      127518
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      127519,
      127519
    ],
    "mapped",
    [
      26032
    ]
  ],
  [
    [
      127520,
      127520
    ],
    "mapped",
    [
      21021
    ]
  ],
  [
    [
      127521,
      127521
    ],
    "mapped",
    [
      32066
    ]
  ],
  [
    [
      127522,
      127522
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      127523,
      127523
    ],
    "mapped",
    [
      36009
    ]
  ],
  [
    [
      127524,
      127524
    ],
    "mapped",
    [
      22768
    ]
  ],
  [
    [
      127525,
      127525
    ],
    "mapped",
    [
      21561
    ]
  ],
  [
    [
      127526,
      127526
    ],
    "mapped",
    [
      28436
    ]
  ],
  [
    [
      127527,
      127527
    ],
    "mapped",
    [
      25237
    ]
  ],
  [
    [
      127528,
      127528
    ],
    "mapped",
    [
      25429
    ]
  ],
  [
    [
      127529,
      127529
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      127530,
      127530
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      127531,
      127531
    ],
    "mapped",
    [
      36938
    ]
  ],
  [
    [
      127532,
      127532
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      127533,
      127533
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      127534,
      127534
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      127535,
      127535
    ],
    "mapped",
    [
      25351
    ]
  ],
  [
    [
      127536,
      127536
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      127537,
      127537
    ],
    "mapped",
    [
      25171
    ]
  ],
  [
    [
      127538,
      127538
    ],
    "mapped",
    [
      31105
    ]
  ],
  [
    [
      127539,
      127539
    ],
    "mapped",
    [
      31354
    ]
  ],
  [
    [
      127540,
      127540
    ],
    "mapped",
    [
      21512
    ]
  ],
  [
    [
      127541,
      127541
    ],
    "mapped",
    [
      28288
    ]
  ],
  [
    [
      127542,
      127542
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      127543,
      127543
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      127544,
      127544
    ],
    "mapped",
    [
      30003
    ]
  ],
  [
    [
      127545,
      127545
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      127546,
      127546
    ],
    "mapped",
    [
      21942
    ]
  ],
  [
    [
      127547,
      127551
    ],
    "disallowed"
  ],
  [
    [
      127552,
      127552
    ],
    "mapped",
    [
      12308,
      26412,
      12309
    ]
  ],
  [
    [
      127553,
      127553
    ],
    "mapped",
    [
      12308,
      19977,
      12309
    ]
  ],
  [
    [
      127554,
      127554
    ],
    "mapped",
    [
      12308,
      20108,
      12309
    ]
  ],
  [
    [
      127555,
      127555
    ],
    "mapped",
    [
      12308,
      23433,
      12309
    ]
  ],
  [
    [
      127556,
      127556
    ],
    "mapped",
    [
      12308,
      28857,
      12309
    ]
  ],
  [
    [
      127557,
      127557
    ],
    "mapped",
    [
      12308,
      25171,
      12309
    ]
  ],
  [
    [
      127558,
      127558
    ],
    "mapped",
    [
      12308,
      30423,
      12309
    ]
  ],
  [
    [
      127559,
      127559
    ],
    "mapped",
    [
      12308,
      21213,
      12309
    ]
  ],
  [
    [
      127560,
      127560
    ],
    "mapped",
    [
      12308,
      25943,
      12309
    ]
  ],
  [
    [
      127561,
      127567
    ],
    "disallowed"
  ],
  [
    [
      127568,
      127568
    ],
    "mapped",
    [
      24471
    ]
  ],
  [
    [
      127569,
      127569
    ],
    "mapped",
    [
      21487
    ]
  ],
  [
    [
      127570,
      127743
    ],
    "disallowed"
  ],
  [
    [
      127744,
      127776
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127777,
      127788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127789,
      127791
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127792,
      127797
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127798,
      127798
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127799,
      127868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127869,
      127869
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127870,
      127871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127872,
      127891
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127892,
      127903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127904,
      127940
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127941,
      127941
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127942,
      127946
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127947,
      127950
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127951,
      127955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127956,
      127967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127968,
      127984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127985,
      127991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127992,
      127999
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128e3,
      128062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128063,
      128063
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128064,
      128064
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128065,
      128065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128066,
      128247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128248,
      128248
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128249,
      128252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128253,
      128254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128255,
      128255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128256,
      128317
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128318,
      128319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128320,
      128323
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128324,
      128330
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128331,
      128335
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128336,
      128359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128360,
      128377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128378,
      128378
    ],
    "disallowed"
  ],
  [
    [
      128379,
      128419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128420,
      128420
    ],
    "disallowed"
  ],
  [
    [
      128421,
      128506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128507,
      128511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128512,
      128512
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128513,
      128528
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128529,
      128529
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128530,
      128532
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128533,
      128533
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128534,
      128534
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128535,
      128535
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128536,
      128536
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128537,
      128537
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128538,
      128538
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128539,
      128539
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128540,
      128542
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128543,
      128543
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128544,
      128549
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128550,
      128551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128552,
      128555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128556,
      128556
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128557,
      128557
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128558,
      128559
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128560,
      128563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128564,
      128564
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128565,
      128576
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128577,
      128578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128579,
      128580
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128581,
      128591
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128592,
      128639
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128640,
      128709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128710,
      128719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128720,
      128720
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128721,
      128735
    ],
    "disallowed"
  ],
  [
    [
      128736,
      128748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128749,
      128751
    ],
    "disallowed"
  ],
  [
    [
      128752,
      128755
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128756,
      128767
    ],
    "disallowed"
  ],
  [
    [
      128768,
      128883
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128884,
      128895
    ],
    "disallowed"
  ],
  [
    [
      128896,
      128980
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128981,
      129023
    ],
    "disallowed"
  ],
  [
    [
      129024,
      129035
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129036,
      129039
    ],
    "disallowed"
  ],
  [
    [
      129040,
      129095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129096,
      129103
    ],
    "disallowed"
  ],
  [
    [
      129104,
      129113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129114,
      129119
    ],
    "disallowed"
  ],
  [
    [
      129120,
      129159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129160,
      129167
    ],
    "disallowed"
  ],
  [
    [
      129168,
      129197
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129198,
      129295
    ],
    "disallowed"
  ],
  [
    [
      129296,
      129304
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129305,
      129407
    ],
    "disallowed"
  ],
  [
    [
      129408,
      129412
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129413,
      129471
    ],
    "disallowed"
  ],
  [
    [
      129472,
      129472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129473,
      131069
    ],
    "disallowed"
  ],
  [
    [
      131070,
      131071
    ],
    "disallowed"
  ],
  [
    [
      131072,
      173782
    ],
    "valid"
  ],
  [
    [
      173783,
      173823
    ],
    "disallowed"
  ],
  [
    [
      173824,
      177972
    ],
    "valid"
  ],
  [
    [
      177973,
      177983
    ],
    "disallowed"
  ],
  [
    [
      177984,
      178205
    ],
    "valid"
  ],
  [
    [
      178206,
      178207
    ],
    "disallowed"
  ],
  [
    [
      178208,
      183969
    ],
    "valid"
  ],
  [
    [
      183970,
      194559
    ],
    "disallowed"
  ],
  [
    [
      194560,
      194560
    ],
    "mapped",
    [
      20029
    ]
  ],
  [
    [
      194561,
      194561
    ],
    "mapped",
    [
      20024
    ]
  ],
  [
    [
      194562,
      194562
    ],
    "mapped",
    [
      20033
    ]
  ],
  [
    [
      194563,
      194563
    ],
    "mapped",
    [
      131362
    ]
  ],
  [
    [
      194564,
      194564
    ],
    "mapped",
    [
      20320
    ]
  ],
  [
    [
      194565,
      194565
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      194566,
      194566
    ],
    "mapped",
    [
      20411
    ]
  ],
  [
    [
      194567,
      194567
    ],
    "mapped",
    [
      20482
    ]
  ],
  [
    [
      194568,
      194568
    ],
    "mapped",
    [
      20602
    ]
  ],
  [
    [
      194569,
      194569
    ],
    "mapped",
    [
      20633
    ]
  ],
  [
    [
      194570,
      194570
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      194571,
      194571
    ],
    "mapped",
    [
      20687
    ]
  ],
  [
    [
      194572,
      194572
    ],
    "mapped",
    [
      13470
    ]
  ],
  [
    [
      194573,
      194573
    ],
    "mapped",
    [
      132666
    ]
  ],
  [
    [
      194574,
      194574
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      194575,
      194575
    ],
    "mapped",
    [
      20820
    ]
  ],
  [
    [
      194576,
      194576
    ],
    "mapped",
    [
      20836
    ]
  ],
  [
    [
      194577,
      194577
    ],
    "mapped",
    [
      20855
    ]
  ],
  [
    [
      194578,
      194578
    ],
    "mapped",
    [
      132380
    ]
  ],
  [
    [
      194579,
      194579
    ],
    "mapped",
    [
      13497
    ]
  ],
  [
    [
      194580,
      194580
    ],
    "mapped",
    [
      20839
    ]
  ],
  [
    [
      194581,
      194581
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      194582,
      194582
    ],
    "mapped",
    [
      132427
    ]
  ],
  [
    [
      194583,
      194583
    ],
    "mapped",
    [
      20887
    ]
  ],
  [
    [
      194584,
      194584
    ],
    "mapped",
    [
      20900
    ]
  ],
  [
    [
      194585,
      194585
    ],
    "mapped",
    [
      20172
    ]
  ],
  [
    [
      194586,
      194586
    ],
    "mapped",
    [
      20908
    ]
  ],
  [
    [
      194587,
      194587
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      194588,
      194588
    ],
    "mapped",
    [
      168415
    ]
  ],
  [
    [
      194589,
      194589
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      194590,
      194590
    ],
    "mapped",
    [
      20995
    ]
  ],
  [
    [
      194591,
      194591
    ],
    "mapped",
    [
      13535
    ]
  ],
  [
    [
      194592,
      194592
    ],
    "mapped",
    [
      21051
    ]
  ],
  [
    [
      194593,
      194593
    ],
    "mapped",
    [
      21062
    ]
  ],
  [
    [
      194594,
      194594
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      194595,
      194595
    ],
    "mapped",
    [
      21111
    ]
  ],
  [
    [
      194596,
      194596
    ],
    "mapped",
    [
      13589
    ]
  ],
  [
    [
      194597,
      194597
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      194598,
      194598
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      194599,
      194599
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      194600,
      194600
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      194601,
      194601
    ],
    "mapped",
    [
      21253
    ]
  ],
  [
    [
      194602,
      194602
    ],
    "mapped",
    [
      21254
    ]
  ],
  [
    [
      194603,
      194603
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      194604,
      194604
    ],
    "mapped",
    [
      21321
    ]
  ],
  [
    [
      194605,
      194605
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      194606,
      194606
    ],
    "mapped",
    [
      21338
    ]
  ],
  [
    [
      194607,
      194607
    ],
    "mapped",
    [
      21363
    ]
  ],
  [
    [
      194608,
      194608
    ],
    "mapped",
    [
      21373
    ]
  ],
  [
    [
      194609,
      194611
    ],
    "mapped",
    [
      21375
    ]
  ],
  [
    [
      194612,
      194612
    ],
    "mapped",
    [
      133676
    ]
  ],
  [
    [
      194613,
      194613
    ],
    "mapped",
    [
      28784
    ]
  ],
  [
    [
      194614,
      194614
    ],
    "mapped",
    [
      21450
    ]
  ],
  [
    [
      194615,
      194615
    ],
    "mapped",
    [
      21471
    ]
  ],
  [
    [
      194616,
      194616
    ],
    "mapped",
    [
      133987
    ]
  ],
  [
    [
      194617,
      194617
    ],
    "mapped",
    [
      21483
    ]
  ],
  [
    [
      194618,
      194618
    ],
    "mapped",
    [
      21489
    ]
  ],
  [
    [
      194619,
      194619
    ],
    "mapped",
    [
      21510
    ]
  ],
  [
    [
      194620,
      194620
    ],
    "mapped",
    [
      21662
    ]
  ],
  [
    [
      194621,
      194621
    ],
    "mapped",
    [
      21560
    ]
  ],
  [
    [
      194622,
      194622
    ],
    "mapped",
    [
      21576
    ]
  ],
  [
    [
      194623,
      194623
    ],
    "mapped",
    [
      21608
    ]
  ],
  [
    [
      194624,
      194624
    ],
    "mapped",
    [
      21666
    ]
  ],
  [
    [
      194625,
      194625
    ],
    "mapped",
    [
      21750
    ]
  ],
  [
    [
      194626,
      194626
    ],
    "mapped",
    [
      21776
    ]
  ],
  [
    [
      194627,
      194627
    ],
    "mapped",
    [
      21843
    ]
  ],
  [
    [
      194628,
      194628
    ],
    "mapped",
    [
      21859
    ]
  ],
  [
    [
      194629,
      194630
    ],
    "mapped",
    [
      21892
    ]
  ],
  [
    [
      194631,
      194631
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      194632,
      194632
    ],
    "mapped",
    [
      21931
    ]
  ],
  [
    [
      194633,
      194633
    ],
    "mapped",
    [
      21939
    ]
  ],
  [
    [
      194634,
      194634
    ],
    "mapped",
    [
      21954
    ]
  ],
  [
    [
      194635,
      194635
    ],
    "mapped",
    [
      22294
    ]
  ],
  [
    [
      194636,
      194636
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      194637,
      194637
    ],
    "mapped",
    [
      22295
    ]
  ],
  [
    [
      194638,
      194638
    ],
    "mapped",
    [
      22097
    ]
  ],
  [
    [
      194639,
      194639
    ],
    "mapped",
    [
      22132
    ]
  ],
  [
    [
      194640,
      194640
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      194641,
      194641
    ],
    "mapped",
    [
      22766
    ]
  ],
  [
    [
      194642,
      194642
    ],
    "mapped",
    [
      22478
    ]
  ],
  [
    [
      194643,
      194643
    ],
    "mapped",
    [
      22516
    ]
  ],
  [
    [
      194644,
      194644
    ],
    "mapped",
    [
      22541
    ]
  ],
  [
    [
      194645,
      194645
    ],
    "mapped",
    [
      22411
    ]
  ],
  [
    [
      194646,
      194646
    ],
    "mapped",
    [
      22578
    ]
  ],
  [
    [
      194647,
      194647
    ],
    "mapped",
    [
      22577
    ]
  ],
  [
    [
      194648,
      194648
    ],
    "mapped",
    [
      22700
    ]
  ],
  [
    [
      194649,
      194649
    ],
    "mapped",
    [
      136420
    ]
  ],
  [
    [
      194650,
      194650
    ],
    "mapped",
    [
      22770
    ]
  ],
  [
    [
      194651,
      194651
    ],
    "mapped",
    [
      22775
    ]
  ],
  [
    [
      194652,
      194652
    ],
    "mapped",
    [
      22790
    ]
  ],
  [
    [
      194653,
      194653
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      194654,
      194654
    ],
    "mapped",
    [
      22818
    ]
  ],
  [
    [
      194655,
      194655
    ],
    "mapped",
    [
      22882
    ]
  ],
  [
    [
      194656,
      194656
    ],
    "mapped",
    [
      136872
    ]
  ],
  [
    [
      194657,
      194657
    ],
    "mapped",
    [
      136938
    ]
  ],
  [
    [
      194658,
      194658
    ],
    "mapped",
    [
      23020
    ]
  ],
  [
    [
      194659,
      194659
    ],
    "mapped",
    [
      23067
    ]
  ],
  [
    [
      194660,
      194660
    ],
    "mapped",
    [
      23079
    ]
  ],
  [
    [
      194661,
      194661
    ],
    "mapped",
    [
      23e3
    ]
  ],
  [
    [
      194662,
      194662
    ],
    "mapped",
    [
      23142
    ]
  ],
  [
    [
      194663,
      194663
    ],
    "mapped",
    [
      14062
    ]
  ],
  [
    [
      194664,
      194664
    ],
    "disallowed"
  ],
  [
    [
      194665,
      194665
    ],
    "mapped",
    [
      23304
    ]
  ],
  [
    [
      194666,
      194667
    ],
    "mapped",
    [
      23358
    ]
  ],
  [
    [
      194668,
      194668
    ],
    "mapped",
    [
      137672
    ]
  ],
  [
    [
      194669,
      194669
    ],
    "mapped",
    [
      23491
    ]
  ],
  [
    [
      194670,
      194670
    ],
    "mapped",
    [
      23512
    ]
  ],
  [
    [
      194671,
      194671
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      194672,
      194672
    ],
    "mapped",
    [
      23539
    ]
  ],
  [
    [
      194673,
      194673
    ],
    "mapped",
    [
      138008
    ]
  ],
  [
    [
      194674,
      194674
    ],
    "mapped",
    [
      23551
    ]
  ],
  [
    [
      194675,
      194675
    ],
    "mapped",
    [
      23558
    ]
  ],
  [
    [
      194676,
      194676
    ],
    "disallowed"
  ],
  [
    [
      194677,
      194677
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      194678,
      194678
    ],
    "mapped",
    [
      14209
    ]
  ],
  [
    [
      194679,
      194679
    ],
    "mapped",
    [
      23648
    ]
  ],
  [
    [
      194680,
      194680
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      194681,
      194681
    ],
    "mapped",
    [
      23744
    ]
  ],
  [
    [
      194682,
      194682
    ],
    "mapped",
    [
      23693
    ]
  ],
  [
    [
      194683,
      194683
    ],
    "mapped",
    [
      138724
    ]
  ],
  [
    [
      194684,
      194684
    ],
    "mapped",
    [
      23875
    ]
  ],
  [
    [
      194685,
      194685
    ],
    "mapped",
    [
      138726
    ]
  ],
  [
    [
      194686,
      194686
    ],
    "mapped",
    [
      23918
    ]
  ],
  [
    [
      194687,
      194687
    ],
    "mapped",
    [
      23915
    ]
  ],
  [
    [
      194688,
      194688
    ],
    "mapped",
    [
      23932
    ]
  ],
  [
    [
      194689,
      194689
    ],
    "mapped",
    [
      24033
    ]
  ],
  [
    [
      194690,
      194690
    ],
    "mapped",
    [
      24034
    ]
  ],
  [
    [
      194691,
      194691
    ],
    "mapped",
    [
      14383
    ]
  ],
  [
    [
      194692,
      194692
    ],
    "mapped",
    [
      24061
    ]
  ],
  [
    [
      194693,
      194693
    ],
    "mapped",
    [
      24104
    ]
  ],
  [
    [
      194694,
      194694
    ],
    "mapped",
    [
      24125
    ]
  ],
  [
    [
      194695,
      194695
    ],
    "mapped",
    [
      24169
    ]
  ],
  [
    [
      194696,
      194696
    ],
    "mapped",
    [
      14434
    ]
  ],
  [
    [
      194697,
      194697
    ],
    "mapped",
    [
      139651
    ]
  ],
  [
    [
      194698,
      194698
    ],
    "mapped",
    [
      14460
    ]
  ],
  [
    [
      194699,
      194699
    ],
    "mapped",
    [
      24240
    ]
  ],
  [
    [
      194700,
      194700
    ],
    "mapped",
    [
      24243
    ]
  ],
  [
    [
      194701,
      194701
    ],
    "mapped",
    [
      24246
    ]
  ],
  [
    [
      194702,
      194702
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      194703,
      194703
    ],
    "mapped",
    [
      172946
    ]
  ],
  [
    [
      194704,
      194704
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      194705,
      194706
    ],
    "mapped",
    [
      140081
    ]
  ],
  [
    [
      194707,
      194707
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194708,
      194709
    ],
    "mapped",
    [
      24354
    ]
  ],
  [
    [
      194710,
      194710
    ],
    "mapped",
    [
      14535
    ]
  ],
  [
    [
      194711,
      194711
    ],
    "mapped",
    [
      144056
    ]
  ],
  [
    [
      194712,
      194712
    ],
    "mapped",
    [
      156122
    ]
  ],
  [
    [
      194713,
      194713
    ],
    "mapped",
    [
      24418
    ]
  ],
  [
    [
      194714,
      194714
    ],
    "mapped",
    [
      24427
    ]
  ],
  [
    [
      194715,
      194715
    ],
    "mapped",
    [
      14563
    ]
  ],
  [
    [
      194716,
      194716
    ],
    "mapped",
    [
      24474
    ]
  ],
  [
    [
      194717,
      194717
    ],
    "mapped",
    [
      24525
    ]
  ],
  [
    [
      194718,
      194718
    ],
    "mapped",
    [
      24535
    ]
  ],
  [
    [
      194719,
      194719
    ],
    "mapped",
    [
      24569
    ]
  ],
  [
    [
      194720,
      194720
    ],
    "mapped",
    [
      24705
    ]
  ],
  [
    [
      194721,
      194721
    ],
    "mapped",
    [
      14650
    ]
  ],
  [
    [
      194722,
      194722
    ],
    "mapped",
    [
      14620
    ]
  ],
  [
    [
      194723,
      194723
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      194724,
      194724
    ],
    "mapped",
    [
      141012
    ]
  ],
  [
    [
      194725,
      194725
    ],
    "mapped",
    [
      24775
    ]
  ],
  [
    [
      194726,
      194726
    ],
    "mapped",
    [
      24904
    ]
  ],
  [
    [
      194727,
      194727
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194728,
      194728
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      194729,
      194729
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194730,
      194730
    ],
    "mapped",
    [
      24954
    ]
  ],
  [
    [
      194731,
      194731
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      194732,
      194732
    ],
    "mapped",
    [
      25010
    ]
  ],
  [
    [
      194733,
      194733
    ],
    "mapped",
    [
      24996
    ]
  ],
  [
    [
      194734,
      194734
    ],
    "mapped",
    [
      25007
    ]
  ],
  [
    [
      194735,
      194735
    ],
    "mapped",
    [
      25054
    ]
  ],
  [
    [
      194736,
      194736
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      194737,
      194737
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      194738,
      194738
    ],
    "mapped",
    [
      25104
    ]
  ],
  [
    [
      194739,
      194739
    ],
    "mapped",
    [
      25115
    ]
  ],
  [
    [
      194740,
      194740
    ],
    "mapped",
    [
      25181
    ]
  ],
  [
    [
      194741,
      194741
    ],
    "mapped",
    [
      25265
    ]
  ],
  [
    [
      194742,
      194742
    ],
    "mapped",
    [
      25300
    ]
  ],
  [
    [
      194743,
      194743
    ],
    "mapped",
    [
      25424
    ]
  ],
  [
    [
      194744,
      194744
    ],
    "mapped",
    [
      142092
    ]
  ],
  [
    [
      194745,
      194745
    ],
    "mapped",
    [
      25405
    ]
  ],
  [
    [
      194746,
      194746
    ],
    "mapped",
    [
      25340
    ]
  ],
  [
    [
      194747,
      194747
    ],
    "mapped",
    [
      25448
    ]
  ],
  [
    [
      194748,
      194748
    ],
    "mapped",
    [
      25475
    ]
  ],
  [
    [
      194749,
      194749
    ],
    "mapped",
    [
      25572
    ]
  ],
  [
    [
      194750,
      194750
    ],
    "mapped",
    [
      142321
    ]
  ],
  [
    [
      194751,
      194751
    ],
    "mapped",
    [
      25634
    ]
  ],
  [
    [
      194752,
      194752
    ],
    "mapped",
    [
      25541
    ]
  ],
  [
    [
      194753,
      194753
    ],
    "mapped",
    [
      25513
    ]
  ],
  [
    [
      194754,
      194754
    ],
    "mapped",
    [
      14894
    ]
  ],
  [
    [
      194755,
      194755
    ],
    "mapped",
    [
      25705
    ]
  ],
  [
    [
      194756,
      194756
    ],
    "mapped",
    [
      25726
    ]
  ],
  [
    [
      194757,
      194757
    ],
    "mapped",
    [
      25757
    ]
  ],
  [
    [
      194758,
      194758
    ],
    "mapped",
    [
      25719
    ]
  ],
  [
    [
      194759,
      194759
    ],
    "mapped",
    [
      14956
    ]
  ],
  [
    [
      194760,
      194760
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      194761,
      194761
    ],
    "mapped",
    [
      25964
    ]
  ],
  [
    [
      194762,
      194762
    ],
    "mapped",
    [
      143370
    ]
  ],
  [
    [
      194763,
      194763
    ],
    "mapped",
    [
      26083
    ]
  ],
  [
    [
      194764,
      194764
    ],
    "mapped",
    [
      26360
    ]
  ],
  [
    [
      194765,
      194765
    ],
    "mapped",
    [
      26185
    ]
  ],
  [
    [
      194766,
      194766
    ],
    "mapped",
    [
      15129
    ]
  ],
  [
    [
      194767,
      194767
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      194768,
      194768
    ],
    "mapped",
    [
      15112
    ]
  ],
  [
    [
      194769,
      194769
    ],
    "mapped",
    [
      15076
    ]
  ],
  [
    [
      194770,
      194770
    ],
    "mapped",
    [
      20882
    ]
  ],
  [
    [
      194771,
      194771
    ],
    "mapped",
    [
      20885
    ]
  ],
  [
    [
      194772,
      194772
    ],
    "mapped",
    [
      26368
    ]
  ],
  [
    [
      194773,
      194773
    ],
    "mapped",
    [
      26268
    ]
  ],
  [
    [
      194774,
      194774
    ],
    "mapped",
    [
      32941
    ]
  ],
  [
    [
      194775,
      194775
    ],
    "mapped",
    [
      17369
    ]
  ],
  [
    [
      194776,
      194776
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      194777,
      194777
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      194778,
      194778
    ],
    "mapped",
    [
      26401
    ]
  ],
  [
    [
      194779,
      194779
    ],
    "mapped",
    [
      26462
    ]
  ],
  [
    [
      194780,
      194780
    ],
    "mapped",
    [
      26451
    ]
  ],
  [
    [
      194781,
      194781
    ],
    "mapped",
    [
      144323
    ]
  ],
  [
    [
      194782,
      194782
    ],
    "mapped",
    [
      15177
    ]
  ],
  [
    [
      194783,
      194783
    ],
    "mapped",
    [
      26618
    ]
  ],
  [
    [
      194784,
      194784
    ],
    "mapped",
    [
      26501
    ]
  ],
  [
    [
      194785,
      194785
    ],
    "mapped",
    [
      26706
    ]
  ],
  [
    [
      194786,
      194786
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      194787,
      194787
    ],
    "mapped",
    [
      144493
    ]
  ],
  [
    [
      194788,
      194788
    ],
    "mapped",
    [
      26766
    ]
  ],
  [
    [
      194789,
      194789
    ],
    "mapped",
    [
      26655
    ]
  ],
  [
    [
      194790,
      194790
    ],
    "mapped",
    [
      26900
    ]
  ],
  [
    [
      194791,
      194791
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      194792,
      194792
    ],
    "mapped",
    [
      26946
    ]
  ],
  [
    [
      194793,
      194793
    ],
    "mapped",
    [
      27043
    ]
  ],
  [
    [
      194794,
      194794
    ],
    "mapped",
    [
      27114
    ]
  ],
  [
    [
      194795,
      194795
    ],
    "mapped",
    [
      27304
    ]
  ],
  [
    [
      194796,
      194796
    ],
    "mapped",
    [
      145059
    ]
  ],
  [
    [
      194797,
      194797
    ],
    "mapped",
    [
      27355
    ]
  ],
  [
    [
      194798,
      194798
    ],
    "mapped",
    [
      15384
    ]
  ],
  [
    [
      194799,
      194799
    ],
    "mapped",
    [
      27425
    ]
  ],
  [
    [
      194800,
      194800
    ],
    "mapped",
    [
      145575
    ]
  ],
  [
    [
      194801,
      194801
    ],
    "mapped",
    [
      27476
    ]
  ],
  [
    [
      194802,
      194802
    ],
    "mapped",
    [
      15438
    ]
  ],
  [
    [
      194803,
      194803
    ],
    "mapped",
    [
      27506
    ]
  ],
  [
    [
      194804,
      194804
    ],
    "mapped",
    [
      27551
    ]
  ],
  [
    [
      194805,
      194805
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      194806,
      194806
    ],
    "mapped",
    [
      27579
    ]
  ],
  [
    [
      194807,
      194807
    ],
    "mapped",
    [
      146061
    ]
  ],
  [
    [
      194808,
      194808
    ],
    "mapped",
    [
      138507
    ]
  ],
  [
    [
      194809,
      194809
    ],
    "mapped",
    [
      146170
    ]
  ],
  [
    [
      194810,
      194810
    ],
    "mapped",
    [
      27726
    ]
  ],
  [
    [
      194811,
      194811
    ],
    "mapped",
    [
      146620
    ]
  ],
  [
    [
      194812,
      194812
    ],
    "mapped",
    [
      27839
    ]
  ],
  [
    [
      194813,
      194813
    ],
    "mapped",
    [
      27853
    ]
  ],
  [
    [
      194814,
      194814
    ],
    "mapped",
    [
      27751
    ]
  ],
  [
    [
      194815,
      194815
    ],
    "mapped",
    [
      27926
    ]
  ],
  [
    [
      194816,
      194816
    ],
    "mapped",
    [
      27966
    ]
  ],
  [
    [
      194817,
      194817
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      194818,
      194818
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      194819,
      194819
    ],
    "mapped",
    [
      28009
    ]
  ],
  [
    [
      194820,
      194820
    ],
    "mapped",
    [
      28024
    ]
  ],
  [
    [
      194821,
      194821
    ],
    "mapped",
    [
      28037
    ]
  ],
  [
    [
      194822,
      194822
    ],
    "mapped",
    [
      146718
    ]
  ],
  [
    [
      194823,
      194823
    ],
    "mapped",
    [
      27956
    ]
  ],
  [
    [
      194824,
      194824
    ],
    "mapped",
    [
      28207
    ]
  ],
  [
    [
      194825,
      194825
    ],
    "mapped",
    [
      28270
    ]
  ],
  [
    [
      194826,
      194826
    ],
    "mapped",
    [
      15667
    ]
  ],
  [
    [
      194827,
      194827
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      194828,
      194828
    ],
    "mapped",
    [
      28359
    ]
  ],
  [
    [
      194829,
      194829
    ],
    "mapped",
    [
      147153
    ]
  ],
  [
    [
      194830,
      194830
    ],
    "mapped",
    [
      28153
    ]
  ],
  [
    [
      194831,
      194831
    ],
    "mapped",
    [
      28526
    ]
  ],
  [
    [
      194832,
      194832
    ],
    "mapped",
    [
      147294
    ]
  ],
  [
    [
      194833,
      194833
    ],
    "mapped",
    [
      147342
    ]
  ],
  [
    [
      194834,
      194834
    ],
    "mapped",
    [
      28614
    ]
  ],
  [
    [
      194835,
      194835
    ],
    "mapped",
    [
      28729
    ]
  ],
  [
    [
      194836,
      194836
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      194837,
      194837
    ],
    "mapped",
    [
      28699
    ]
  ],
  [
    [
      194838,
      194838
    ],
    "mapped",
    [
      15766
    ]
  ],
  [
    [
      194839,
      194839
    ],
    "mapped",
    [
      28746
    ]
  ],
  [
    [
      194840,
      194840
    ],
    "mapped",
    [
      28797
    ]
  ],
  [
    [
      194841,
      194841
    ],
    "mapped",
    [
      28791
    ]
  ],
  [
    [
      194842,
      194842
    ],
    "mapped",
    [
      28845
    ]
  ],
  [
    [
      194843,
      194843
    ],
    "mapped",
    [
      132389
    ]
  ],
  [
    [
      194844,
      194844
    ],
    "mapped",
    [
      28997
    ]
  ],
  [
    [
      194845,
      194845
    ],
    "mapped",
    [
      148067
    ]
  ],
  [
    [
      194846,
      194846
    ],
    "mapped",
    [
      29084
    ]
  ],
  [
    [
      194847,
      194847
    ],
    "disallowed"
  ],
  [
    [
      194848,
      194848
    ],
    "mapped",
    [
      29224
    ]
  ],
  [
    [
      194849,
      194849
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      194850,
      194850
    ],
    "mapped",
    [
      29264
    ]
  ],
  [
    [
      194851,
      194851
    ],
    "mapped",
    [
      149e3
    ]
  ],
  [
    [
      194852,
      194852
    ],
    "mapped",
    [
      29312
    ]
  ],
  [
    [
      194853,
      194853
    ],
    "mapped",
    [
      29333
    ]
  ],
  [
    [
      194854,
      194854
    ],
    "mapped",
    [
      149301
    ]
  ],
  [
    [
      194855,
      194855
    ],
    "mapped",
    [
      149524
    ]
  ],
  [
    [
      194856,
      194856
    ],
    "mapped",
    [
      29562
    ]
  ],
  [
    [
      194857,
      194857
    ],
    "mapped",
    [
      29579
    ]
  ],
  [
    [
      194858,
      194858
    ],
    "mapped",
    [
      16044
    ]
  ],
  [
    [
      194859,
      194859
    ],
    "mapped",
    [
      29605
    ]
  ],
  [
    [
      194860,
      194861
    ],
    "mapped",
    [
      16056
    ]
  ],
  [
    [
      194862,
      194862
    ],
    "mapped",
    [
      29767
    ]
  ],
  [
    [
      194863,
      194863
    ],
    "mapped",
    [
      29788
    ]
  ],
  [
    [
      194864,
      194864
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      194865,
      194865
    ],
    "mapped",
    [
      29829
    ]
  ],
  [
    [
      194866,
      194866
    ],
    "mapped",
    [
      29898
    ]
  ],
  [
    [
      194867,
      194867
    ],
    "mapped",
    [
      16155
    ]
  ],
  [
    [
      194868,
      194868
    ],
    "mapped",
    [
      29988
    ]
  ],
  [
    [
      194869,
      194869
    ],
    "mapped",
    [
      150582
    ]
  ],
  [
    [
      194870,
      194870
    ],
    "mapped",
    [
      30014
    ]
  ],
  [
    [
      194871,
      194871
    ],
    "mapped",
    [
      150674
    ]
  ],
  [
    [
      194872,
      194872
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      194873,
      194873
    ],
    "mapped",
    [
      139679
    ]
  ],
  [
    [
      194874,
      194874
    ],
    "mapped",
    [
      30224
    ]
  ],
  [
    [
      194875,
      194875
    ],
    "mapped",
    [
      151457
    ]
  ],
  [
    [
      194876,
      194876
    ],
    "mapped",
    [
      151480
    ]
  ],
  [
    [
      194877,
      194877
    ],
    "mapped",
    [
      151620
    ]
  ],
  [
    [
      194878,
      194878
    ],
    "mapped",
    [
      16380
    ]
  ],
  [
    [
      194879,
      194879
    ],
    "mapped",
    [
      16392
    ]
  ],
  [
    [
      194880,
      194880
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      194881,
      194881
    ],
    "mapped",
    [
      151795
    ]
  ],
  [
    [
      194882,
      194882
    ],
    "mapped",
    [
      151794
    ]
  ],
  [
    [
      194883,
      194883
    ],
    "mapped",
    [
      151833
    ]
  ],
  [
    [
      194884,
      194884
    ],
    "mapped",
    [
      151859
    ]
  ],
  [
    [
      194885,
      194885
    ],
    "mapped",
    [
      30494
    ]
  ],
  [
    [
      194886,
      194887
    ],
    "mapped",
    [
      30495
    ]
  ],
  [
    [
      194888,
      194888
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      194889,
      194889
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      194890,
      194890
    ],
    "mapped",
    [
      30603
    ]
  ],
  [
    [
      194891,
      194891
    ],
    "mapped",
    [
      16454
    ]
  ],
  [
    [
      194892,
      194892
    ],
    "mapped",
    [
      16534
    ]
  ],
  [
    [
      194893,
      194893
    ],
    "mapped",
    [
      152605
    ]
  ],
  [
    [
      194894,
      194894
    ],
    "mapped",
    [
      30798
    ]
  ],
  [
    [
      194895,
      194895
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      194896,
      194896
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      194897,
      194897
    ],
    "mapped",
    [
      16611
    ]
  ],
  [
    [
      194898,
      194898
    ],
    "mapped",
    [
      153126
    ]
  ],
  [
    [
      194899,
      194899
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      194900,
      194900
    ],
    "mapped",
    [
      153242
    ]
  ],
  [
    [
      194901,
      194901
    ],
    "mapped",
    [
      153285
    ]
  ],
  [
    [
      194902,
      194902
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      194903,
      194903
    ],
    "mapped",
    [
      31211
    ]
  ],
  [
    [
      194904,
      194904
    ],
    "mapped",
    [
      16687
    ]
  ],
  [
    [
      194905,
      194905
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      194906,
      194906
    ],
    "mapped",
    [
      31306
    ]
  ],
  [
    [
      194907,
      194907
    ],
    "mapped",
    [
      31311
    ]
  ],
  [
    [
      194908,
      194908
    ],
    "mapped",
    [
      153980
    ]
  ],
  [
    [
      194909,
      194910
    ],
    "mapped",
    [
      154279
    ]
  ],
  [
    [
      194911,
      194911
    ],
    "disallowed"
  ],
  [
    [
      194912,
      194912
    ],
    "mapped",
    [
      16898
    ]
  ],
  [
    [
      194913,
      194913
    ],
    "mapped",
    [
      154539
    ]
  ],
  [
    [
      194914,
      194914
    ],
    "mapped",
    [
      31686
    ]
  ],
  [
    [
      194915,
      194915
    ],
    "mapped",
    [
      31689
    ]
  ],
  [
    [
      194916,
      194916
    ],
    "mapped",
    [
      16935
    ]
  ],
  [
    [
      194917,
      194917
    ],
    "mapped",
    [
      154752
    ]
  ],
  [
    [
      194918,
      194918
    ],
    "mapped",
    [
      31954
    ]
  ],
  [
    [
      194919,
      194919
    ],
    "mapped",
    [
      17056
    ]
  ],
  [
    [
      194920,
      194920
    ],
    "mapped",
    [
      31976
    ]
  ],
  [
    [
      194921,
      194921
    ],
    "mapped",
    [
      31971
    ]
  ],
  [
    [
      194922,
      194922
    ],
    "mapped",
    [
      32e3
    ]
  ],
  [
    [
      194923,
      194923
    ],
    "mapped",
    [
      155526
    ]
  ],
  [
    [
      194924,
      194924
    ],
    "mapped",
    [
      32099
    ]
  ],
  [
    [
      194925,
      194925
    ],
    "mapped",
    [
      17153
    ]
  ],
  [
    [
      194926,
      194926
    ],
    "mapped",
    [
      32199
    ]
  ],
  [
    [
      194927,
      194927
    ],
    "mapped",
    [
      32258
    ]
  ],
  [
    [
      194928,
      194928
    ],
    "mapped",
    [
      32325
    ]
  ],
  [
    [
      194929,
      194929
    ],
    "mapped",
    [
      17204
    ]
  ],
  [
    [
      194930,
      194930
    ],
    "mapped",
    [
      156200
    ]
  ],
  [
    [
      194931,
      194931
    ],
    "mapped",
    [
      156231
    ]
  ],
  [
    [
      194932,
      194932
    ],
    "mapped",
    [
      17241
    ]
  ],
  [
    [
      194933,
      194933
    ],
    "mapped",
    [
      156377
    ]
  ],
  [
    [
      194934,
      194934
    ],
    "mapped",
    [
      32634
    ]
  ],
  [
    [
      194935,
      194935
    ],
    "mapped",
    [
      156478
    ]
  ],
  [
    [
      194936,
      194936
    ],
    "mapped",
    [
      32661
    ]
  ],
  [
    [
      194937,
      194937
    ],
    "mapped",
    [
      32762
    ]
  ],
  [
    [
      194938,
      194938
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      194939,
      194939
    ],
    "mapped",
    [
      156890
    ]
  ],
  [
    [
      194940,
      194940
    ],
    "mapped",
    [
      156963
    ]
  ],
  [
    [
      194941,
      194941
    ],
    "mapped",
    [
      32864
    ]
  ],
  [
    [
      194942,
      194942
    ],
    "mapped",
    [
      157096
    ]
  ],
  [
    [
      194943,
      194943
    ],
    "mapped",
    [
      32880
    ]
  ],
  [
    [
      194944,
      194944
    ],
    "mapped",
    [
      144223
    ]
  ],
  [
    [
      194945,
      194945
    ],
    "mapped",
    [
      17365
    ]
  ],
  [
    [
      194946,
      194946
    ],
    "mapped",
    [
      32946
    ]
  ],
  [
    [
      194947,
      194947
    ],
    "mapped",
    [
      33027
    ]
  ],
  [
    [
      194948,
      194948
    ],
    "mapped",
    [
      17419
    ]
  ],
  [
    [
      194949,
      194949
    ],
    "mapped",
    [
      33086
    ]
  ],
  [
    [
      194950,
      194950
    ],
    "mapped",
    [
      23221
    ]
  ],
  [
    [
      194951,
      194951
    ],
    "mapped",
    [
      157607
    ]
  ],
  [
    [
      194952,
      194952
    ],
    "mapped",
    [
      157621
    ]
  ],
  [
    [
      194953,
      194953
    ],
    "mapped",
    [
      144275
    ]
  ],
  [
    [
      194954,
      194954
    ],
    "mapped",
    [
      144284
    ]
  ],
  [
    [
      194955,
      194955
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194956,
      194956
    ],
    "mapped",
    [
      33284
    ]
  ],
  [
    [
      194957,
      194957
    ],
    "mapped",
    [
      36766
    ]
  ],
  [
    [
      194958,
      194958
    ],
    "mapped",
    [
      17515
    ]
  ],
  [
    [
      194959,
      194959
    ],
    "mapped",
    [
      33425
    ]
  ],
  [
    [
      194960,
      194960
    ],
    "mapped",
    [
      33419
    ]
  ],
  [
    [
      194961,
      194961
    ],
    "mapped",
    [
      33437
    ]
  ],
  [
    [
      194962,
      194962
    ],
    "mapped",
    [
      21171
    ]
  ],
  [
    [
      194963,
      194963
    ],
    "mapped",
    [
      33457
    ]
  ],
  [
    [
      194964,
      194964
    ],
    "mapped",
    [
      33459
    ]
  ],
  [
    [
      194965,
      194965
    ],
    "mapped",
    [
      33469
    ]
  ],
  [
    [
      194966,
      194966
    ],
    "mapped",
    [
      33510
    ]
  ],
  [
    [
      194967,
      194967
    ],
    "mapped",
    [
      158524
    ]
  ],
  [
    [
      194968,
      194968
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      194969,
      194969
    ],
    "mapped",
    [
      33565
    ]
  ],
  [
    [
      194970,
      194970
    ],
    "mapped",
    [
      33635
    ]
  ],
  [
    [
      194971,
      194971
    ],
    "mapped",
    [
      33709
    ]
  ],
  [
    [
      194972,
      194972
    ],
    "mapped",
    [
      33571
    ]
  ],
  [
    [
      194973,
      194973
    ],
    "mapped",
    [
      33725
    ]
  ],
  [
    [
      194974,
      194974
    ],
    "mapped",
    [
      33767
    ]
  ],
  [
    [
      194975,
      194975
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      194976,
      194976
    ],
    "mapped",
    [
      33619
    ]
  ],
  [
    [
      194977,
      194977
    ],
    "mapped",
    [
      33738
    ]
  ],
  [
    [
      194978,
      194978
    ],
    "mapped",
    [
      33740
    ]
  ],
  [
    [
      194979,
      194979
    ],
    "mapped",
    [
      33756
    ]
  ],
  [
    [
      194980,
      194980
    ],
    "mapped",
    [
      158774
    ]
  ],
  [
    [
      194981,
      194981
    ],
    "mapped",
    [
      159083
    ]
  ],
  [
    [
      194982,
      194982
    ],
    "mapped",
    [
      158933
    ]
  ],
  [
    [
      194983,
      194983
    ],
    "mapped",
    [
      17707
    ]
  ],
  [
    [
      194984,
      194984
    ],
    "mapped",
    [
      34033
    ]
  ],
  [
    [
      194985,
      194985
    ],
    "mapped",
    [
      34035
    ]
  ],
  [
    [
      194986,
      194986
    ],
    "mapped",
    [
      34070
    ]
  ],
  [
    [
      194987,
      194987
    ],
    "mapped",
    [
      160714
    ]
  ],
  [
    [
      194988,
      194988
    ],
    "mapped",
    [
      34148
    ]
  ],
  [
    [
      194989,
      194989
    ],
    "mapped",
    [
      159532
    ]
  ],
  [
    [
      194990,
      194990
    ],
    "mapped",
    [
      17757
    ]
  ],
  [
    [
      194991,
      194991
    ],
    "mapped",
    [
      17761
    ]
  ],
  [
    [
      194992,
      194992
    ],
    "mapped",
    [
      159665
    ]
  ],
  [
    [
      194993,
      194993
    ],
    "mapped",
    [
      159954
    ]
  ],
  [
    [
      194994,
      194994
    ],
    "mapped",
    [
      17771
    ]
  ],
  [
    [
      194995,
      194995
    ],
    "mapped",
    [
      34384
    ]
  ],
  [
    [
      194996,
      194996
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      194997,
      194997
    ],
    "mapped",
    [
      34407
    ]
  ],
  [
    [
      194998,
      194998
    ],
    "mapped",
    [
      34409
    ]
  ],
  [
    [
      194999,
      194999
    ],
    "mapped",
    [
      34473
    ]
  ],
  [
    [
      195e3,
      195e3
    ],
    "mapped",
    [
      34440
    ]
  ],
  [
    [
      195001,
      195001
    ],
    "mapped",
    [
      34574
    ]
  ],
  [
    [
      195002,
      195002
    ],
    "mapped",
    [
      34530
    ]
  ],
  [
    [
      195003,
      195003
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      195004,
      195004
    ],
    "mapped",
    [
      34600
    ]
  ],
  [
    [
      195005,
      195005
    ],
    "mapped",
    [
      34667
    ]
  ],
  [
    [
      195006,
      195006
    ],
    "mapped",
    [
      34694
    ]
  ],
  [
    [
      195007,
      195007
    ],
    "disallowed"
  ],
  [
    [
      195008,
      195008
    ],
    "mapped",
    [
      34785
    ]
  ],
  [
    [
      195009,
      195009
    ],
    "mapped",
    [
      34817
    ]
  ],
  [
    [
      195010,
      195010
    ],
    "mapped",
    [
      17913
    ]
  ],
  [
    [
      195011,
      195011
    ],
    "mapped",
    [
      34912
    ]
  ],
  [
    [
      195012,
      195012
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      195013,
      195013
    ],
    "mapped",
    [
      161383
    ]
  ],
  [
    [
      195014,
      195014
    ],
    "mapped",
    [
      35031
    ]
  ],
  [
    [
      195015,
      195015
    ],
    "mapped",
    [
      35038
    ]
  ],
  [
    [
      195016,
      195016
    ],
    "mapped",
    [
      17973
    ]
  ],
  [
    [
      195017,
      195017
    ],
    "mapped",
    [
      35066
    ]
  ],
  [
    [
      195018,
      195018
    ],
    "mapped",
    [
      13499
    ]
  ],
  [
    [
      195019,
      195019
    ],
    "mapped",
    [
      161966
    ]
  ],
  [
    [
      195020,
      195020
    ],
    "mapped",
    [
      162150
    ]
  ],
  [
    [
      195021,
      195021
    ],
    "mapped",
    [
      18110
    ]
  ],
  [
    [
      195022,
      195022
    ],
    "mapped",
    [
      18119
    ]
  ],
  [
    [
      195023,
      195023
    ],
    "mapped",
    [
      35488
    ]
  ],
  [
    [
      195024,
      195024
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      195025,
      195025
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      195026,
      195026
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      195027,
      195027
    ],
    "mapped",
    [
      162984
    ]
  ],
  [
    [
      195028,
      195028
    ],
    "mapped",
    [
      36011
    ]
  ],
  [
    [
      195029,
      195029
    ],
    "mapped",
    [
      36033
    ]
  ],
  [
    [
      195030,
      195030
    ],
    "mapped",
    [
      36123
    ]
  ],
  [
    [
      195031,
      195031
    ],
    "mapped",
    [
      36215
    ]
  ],
  [
    [
      195032,
      195032
    ],
    "mapped",
    [
      163631
    ]
  ],
  [
    [
      195033,
      195033
    ],
    "mapped",
    [
      133124
    ]
  ],
  [
    [
      195034,
      195034
    ],
    "mapped",
    [
      36299
    ]
  ],
  [
    [
      195035,
      195035
    ],
    "mapped",
    [
      36284
    ]
  ],
  [
    [
      195036,
      195036
    ],
    "mapped",
    [
      36336
    ]
  ],
  [
    [
      195037,
      195037
    ],
    "mapped",
    [
      133342
    ]
  ],
  [
    [
      195038,
      195038
    ],
    "mapped",
    [
      36564
    ]
  ],
  [
    [
      195039,
      195039
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      195040,
      195040
    ],
    "mapped",
    [
      165330
    ]
  ],
  [
    [
      195041,
      195041
    ],
    "mapped",
    [
      165357
    ]
  ],
  [
    [
      195042,
      195042
    ],
    "mapped",
    [
      37012
    ]
  ],
  [
    [
      195043,
      195043
    ],
    "mapped",
    [
      37105
    ]
  ],
  [
    [
      195044,
      195044
    ],
    "mapped",
    [
      37137
    ]
  ],
  [
    [
      195045,
      195045
    ],
    "mapped",
    [
      165678
    ]
  ],
  [
    [
      195046,
      195046
    ],
    "mapped",
    [
      37147
    ]
  ],
  [
    [
      195047,
      195047
    ],
    "mapped",
    [
      37432
    ]
  ],
  [
    [
      195048,
      195048
    ],
    "mapped",
    [
      37591
    ]
  ],
  [
    [
      195049,
      195049
    ],
    "mapped",
    [
      37592
    ]
  ],
  [
    [
      195050,
      195050
    ],
    "mapped",
    [
      37500
    ]
  ],
  [
    [
      195051,
      195051
    ],
    "mapped",
    [
      37881
    ]
  ],
  [
    [
      195052,
      195052
    ],
    "mapped",
    [
      37909
    ]
  ],
  [
    [
      195053,
      195053
    ],
    "mapped",
    [
      166906
    ]
  ],
  [
    [
      195054,
      195054
    ],
    "mapped",
    [
      38283
    ]
  ],
  [
    [
      195055,
      195055
    ],
    "mapped",
    [
      18837
    ]
  ],
  [
    [
      195056,
      195056
    ],
    "mapped",
    [
      38327
    ]
  ],
  [
    [
      195057,
      195057
    ],
    "mapped",
    [
      167287
    ]
  ],
  [
    [
      195058,
      195058
    ],
    "mapped",
    [
      18918
    ]
  ],
  [
    [
      195059,
      195059
    ],
    "mapped",
    [
      38595
    ]
  ],
  [
    [
      195060,
      195060
    ],
    "mapped",
    [
      23986
    ]
  ],
  [
    [
      195061,
      195061
    ],
    "mapped",
    [
      38691
    ]
  ],
  [
    [
      195062,
      195062
    ],
    "mapped",
    [
      168261
    ]
  ],
  [
    [
      195063,
      195063
    ],
    "mapped",
    [
      168474
    ]
  ],
  [
    [
      195064,
      195064
    ],
    "mapped",
    [
      19054
    ]
  ],
  [
    [
      195065,
      195065
    ],
    "mapped",
    [
      19062
    ]
  ],
  [
    [
      195066,
      195066
    ],
    "mapped",
    [
      38880
    ]
  ],
  [
    [
      195067,
      195067
    ],
    "mapped",
    [
      168970
    ]
  ],
  [
    [
      195068,
      195068
    ],
    "mapped",
    [
      19122
    ]
  ],
  [
    [
      195069,
      195069
    ],
    "mapped",
    [
      169110
    ]
  ],
  [
    [
      195070,
      195071
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      195072,
      195072
    ],
    "mapped",
    [
      38953
    ]
  ],
  [
    [
      195073,
      195073
    ],
    "mapped",
    [
      169398
    ]
  ],
  [
    [
      195074,
      195074
    ],
    "mapped",
    [
      39138
    ]
  ],
  [
    [
      195075,
      195075
    ],
    "mapped",
    [
      19251
    ]
  ],
  [
    [
      195076,
      195076
    ],
    "mapped",
    [
      39209
    ]
  ],
  [
    [
      195077,
      195077
    ],
    "mapped",
    [
      39335
    ]
  ],
  [
    [
      195078,
      195078
    ],
    "mapped",
    [
      39362
    ]
  ],
  [
    [
      195079,
      195079
    ],
    "mapped",
    [
      39422
    ]
  ],
  [
    [
      195080,
      195080
    ],
    "mapped",
    [
      19406
    ]
  ],
  [
    [
      195081,
      195081
    ],
    "mapped",
    [
      170800
    ]
  ],
  [
    [
      195082,
      195082
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      195083,
      195083
    ],
    "mapped",
    [
      4e4
    ]
  ],
  [
    [
      195084,
      195084
    ],
    "mapped",
    [
      40189
    ]
  ],
  [
    [
      195085,
      195085
    ],
    "mapped",
    [
      19662
    ]
  ],
  [
    [
      195086,
      195086
    ],
    "mapped",
    [
      19693
    ]
  ],
  [
    [
      195087,
      195087
    ],
    "mapped",
    [
      40295
    ]
  ],
  [
    [
      195088,
      195088
    ],
    "mapped",
    [
      172238
    ]
  ],
  [
    [
      195089,
      195089
    ],
    "mapped",
    [
      19704
    ]
  ],
  [
    [
      195090,
      195090
    ],
    "mapped",
    [
      172293
    ]
  ],
  [
    [
      195091,
      195091
    ],
    "mapped",
    [
      172558
    ]
  ],
  [
    [
      195092,
      195092
    ],
    "mapped",
    [
      172689
    ]
  ],
  [
    [
      195093,
      195093
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      195094,
      195094
    ],
    "mapped",
    [
      19798
    ]
  ],
  [
    [
      195095,
      195095
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      195096,
      195096
    ],
    "mapped",
    [
      40702
    ]
  ],
  [
    [
      195097,
      195097
    ],
    "mapped",
    [
      40709
    ]
  ],
  [
    [
      195098,
      195098
    ],
    "mapped",
    [
      40719
    ]
  ],
  [
    [
      195099,
      195099
    ],
    "mapped",
    [
      40726
    ]
  ],
  [
    [
      195100,
      195100
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      195101,
      195101
    ],
    "mapped",
    [
      173568
    ]
  ],
  [
    [
      195102,
      196605
    ],
    "disallowed"
  ],
  [
    [
      196606,
      196607
    ],
    "disallowed"
  ],
  [
    [
      196608,
      262141
    ],
    "disallowed"
  ],
  [
    [
      262142,
      262143
    ],
    "disallowed"
  ],
  [
    [
      262144,
      327677
    ],
    "disallowed"
  ],
  [
    [
      327678,
      327679
    ],
    "disallowed"
  ],
  [
    [
      327680,
      393213
    ],
    "disallowed"
  ],
  [
    [
      393214,
      393215
    ],
    "disallowed"
  ],
  [
    [
      393216,
      458749
    ],
    "disallowed"
  ],
  [
    [
      458750,
      458751
    ],
    "disallowed"
  ],
  [
    [
      458752,
      524285
    ],
    "disallowed"
  ],
  [
    [
      524286,
      524287
    ],
    "disallowed"
  ],
  [
    [
      524288,
      589821
    ],
    "disallowed"
  ],
  [
    [
      589822,
      589823
    ],
    "disallowed"
  ],
  [
    [
      589824,
      655357
    ],
    "disallowed"
  ],
  [
    [
      655358,
      655359
    ],
    "disallowed"
  ],
  [
    [
      655360,
      720893
    ],
    "disallowed"
  ],
  [
    [
      720894,
      720895
    ],
    "disallowed"
  ],
  [
    [
      720896,
      786429
    ],
    "disallowed"
  ],
  [
    [
      786430,
      786431
    ],
    "disallowed"
  ],
  [
    [
      786432,
      851965
    ],
    "disallowed"
  ],
  [
    [
      851966,
      851967
    ],
    "disallowed"
  ],
  [
    [
      851968,
      917501
    ],
    "disallowed"
  ],
  [
    [
      917502,
      917503
    ],
    "disallowed"
  ],
  [
    [
      917504,
      917504
    ],
    "disallowed"
  ],
  [
    [
      917505,
      917505
    ],
    "disallowed"
  ],
  [
    [
      917506,
      917535
    ],
    "disallowed"
  ],
  [
    [
      917536,
      917631
    ],
    "disallowed"
  ],
  [
    [
      917632,
      917759
    ],
    "disallowed"
  ],
  [
    [
      917760,
      917999
    ],
    "ignored"
  ],
  [
    [
      918e3,
      983037
    ],
    "disallowed"
  ],
  [
    [
      983038,
      983039
    ],
    "disallowed"
  ],
  [
    [
      983040,
      1048573
    ],
    "disallowed"
  ],
  [
    [
      1048574,
      1048575
    ],
    "disallowed"
  ],
  [
    [
      1048576,
      1114109
    ],
    "disallowed"
  ],
  [
    [
      1114110,
      1114111
    ],
    "disallowed"
  ]
];
var punycode = require$$0$3;
var mappingTable = require$$1;
var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};
function normalize(str) {
  return str.split("\0").map(function(s) {
    return s.normalize("NFC");
  }).join("\0");
}
function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;
  while (start <= end) {
    var mid = Math.floor((start + end) / 2);
    var target = mappingTable[mid];
    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }
  return null;
}
var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function countSymbols(string) {
  return string.replace(regexAstralSymbols, "_").length;
}
function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";
  var len = countSymbols(domain_name);
  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status = findStatus(codePoint);
    switch (status[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;
      case "ignored":
        break;
      case "mapped":
        processed += String.fromCodePoint.apply(String, status[2]);
        break;
      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }
        break;
      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;
      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status[2]);
        }
        break;
      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }
        processed += String.fromCodePoint(codePoint);
        break;
    }
  }
  return {
    string: processed,
    error: hasError
  };
}
var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    PROCESSING_OPTIONS.NONTRANSITIONAL;
  }
  var error = false;
  if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
    error = true;
  }
  var len = countSymbols(label);
  for (var i = 0; i < len; ++i) {
    var status = findStatus(label.codePointAt(i));
    if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
      error = true;
      break;
    }
  }
  return {
    label,
    error
  };
}
function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);
  var labels = result.string.split(".");
  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch (e) {
      result.error = true;
    }
  }
  return {
    string: labels.join("."),
    error: result.error
  };
}
tr46.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function(l) {
    try {
      return punycode.toASCII(l);
    } catch (e) {
      result.error = true;
      return l;
    }
  });
  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;
    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }
    for (var i = 0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }
  if (result.error)
    return null;
  return labels.join(".");
};
tr46.toUnicode = function(domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
  return {
    domain: result.string,
    error: result.error
  };
};
tr46.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
(function(module) {
  const punycode2 = require$$0$3;
  const tr46$1 = tr46;
  const specialSchemes = {
    ftp: 21,
    file: null,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  const failure = Symbol("failure");
  function countSymbols2(str) {
    return punycode2.ucs2.decode(str).length;
  }
  function at(input, idx) {
    const c = input[idx];
    return isNaN(c) ? void 0 : String.fromCodePoint(c);
  }
  function isASCIIDigit(c) {
    return c >= 48 && c <= 57;
  }
  function isASCIIAlpha(c) {
    return c >= 65 && c <= 90 || c >= 97 && c <= 122;
  }
  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }
  function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
  }
  function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  }
  function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  }
  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }
  function isWindowsDriveLetterString(string) {
    return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
  }
  function isNormalizedWindowsDriveLetterString(string) {
    return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
  }
  function containsForbiddenHostCodePoint(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function containsForbiddenHostCodePointExcludingPercent(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== void 0;
  }
  function isSpecial(url) {
    return isSpecialScheme(url.scheme);
  }
  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }
  function percentEncode(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = "0" + hex;
    }
    return "%" + hex;
  }
  function utf8PercentEncode(c) {
    const buf = new Buffer(c);
    let str = "";
    for (let i = 0; i < buf.length; ++i) {
      str += percentEncode(buf[i]);
    }
    return str;
  }
  function utf8PercentDecode(str) {
    const input = new Buffer(str);
    const output = [];
    for (let i = 0; i < input.length; ++i) {
      if (input[i] !== 37) {
        output.push(input[i]);
      } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
        output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
        i += 2;
      } else {
        output.push(input[i]);
      }
    }
    return new Buffer(output).toString();
  }
  function isC0ControlPercentEncode(c) {
    return c <= 31 || c > 126;
  }
  const extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function isPathPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }
  const extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }
  function percentEncodeChar(c, encodeSetPredicate) {
    const cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
      return utf8PercentEncode(cStr);
    }
    return cStr;
  }
  function parseIPv4Number(input) {
    let R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  }
  function parseIPv4(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return input;
    }
    const numbers = [];
    for (const part of parts) {
      if (part === "") {
        return input;
      }
      const n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }
      numbers.push(n);
    }
    for (let i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
      return failure;
    }
    let ipv4 = numbers.pop();
    let counter = 0;
    for (const n of numbers) {
      ipv4 += n * Math.pow(256, 3 - counter);
      ++counter;
    }
    return ipv4;
  }
  function serializeIPv4(address) {
    let output = "";
    let n = address;
    for (let i = 1; i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = "." + output;
      }
      n = Math.floor(n / 256);
    }
    return output;
  }
  function parseIPv6(input) {
    const address = [0, 0, 0, 0, 0, 0, 0, 0];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;
    input = punycode2.ucs2.decode(input);
    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      let value = 0;
      let length = 0;
      while (length < 4 && isASCIIHex(input[pointer])) {
        value = value * 16 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        let numbersSeen = 0;
        while (input[pointer] !== void 0) {
          let ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (isASCIIDigit(input[pointer])) {
            const number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === void 0) {
          return failure;
        }
      } else if (input[pointer] !== void 0) {
        return failure;
      }
      address[pieceIndex] = value;
      ++pieceIndex;
    }
    if (compress !== null) {
      let swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        const temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  }
  function serializeIPv6(address) {
    let output = "";
    const seqResult = findLongestZeroSequence(address);
    const compress = seqResult.idx;
    let ignore0 = false;
    for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        const separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }
      output += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output += ":";
      }
    }
    return output;
  }
  function parseHost(input, isSpecialArg) {
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (!isSpecialArg) {
      return parseOpaqueHost(input);
    }
    const domain = utf8PercentDecode(input);
    const asciiDomain = tr46$1.toASCII(domain, false, tr46$1.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
    if (asciiDomain === null) {
      return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }
    const ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }
    return asciiDomain;
  }
  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }
    let output = "";
    const decoded = punycode2.ucs2.decode(input);
    for (let i = 0; i < decoded.length; ++i) {
      output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output;
  }
  function findLongestZeroSequence(arr) {
    let maxIdx = null;
    let maxLen = 1;
    let currStart = null;
    let currLen = 0;
    for (let i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }
    if (currLen > maxLen) {
      maxIdx = currStart;
      maxLen = currLen;
    }
    return {
      idx: maxIdx,
      len: maxLen
    };
  }
  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }
    if (host instanceof Array) {
      return "[" + serializeIPv6(host) + "]";
    }
    return host;
  }
  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function shortenPath(url) {
    const path = url.path;
    if (path.length === 0) {
      return;
    }
    if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
      return;
    }
    path.pop();
  }
  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }
  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }
  function isNormalizedWindowsDriveLetter(string) {
    return /^[A-Za-z]:$/.test(string);
  }
  function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: false
      };
      const res2 = trimControlChars(this.input);
      if (res2 !== this.input) {
        this.parseError = true;
      }
      this.input = res2;
    }
    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode2.ucs2.decode(this.input);
    for (; this.pointer <= this.input.length; ++this.pointer) {
      const c = this.input[this.pointer];
      const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
      const ret = this["parse " + this.state](c, cStr);
      if (!ret) {
        break;
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      this.buffer = "";
      if (this.stateOverride) {
        return false;
      }
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 47) {
      this.state = "relative slash";
    } else if (c === 63) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice(0, this.base.path.length - 1);
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = "%40" + this.buffer;
      }
      this.atFlag = true;
      const len = countSymbols2(this.buffer);
      for (let pointer = 0; pointer < len; ++pointer) {
        const codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols2(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      const host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
      if (this.stateOverride === "hostname") {
        return false;
      }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      const host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        const port = parseInt(this.buffer);
        if (port > Math.pow(2, 16) - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  const fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      if (isNaN(c)) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 63) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          shortenPath(this.url);
        } else {
          this.parseError = true;
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file") {
        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        } else {
          this.url.host = this.base.host;
        }
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        let host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== void 0) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
      if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          if (this.url.host !== "" && this.url.host !== null) {
            this.parseError = true;
            this.url.host = "";
          }
          this.buffer = this.buffer[0] + ":";
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
        while (this.url.path.length > 1 && this.url.path[0] === "") {
          this.parseError = true;
          this.url.path.shift();
        }
      }
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
      if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      const buffer = new Buffer(this.buffer);
      for (let i = 0; i < buffer.length; ++i) {
        if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
          this.url.query += percentEncode(buffer[i]);
        } else {
          this.url.query += String.fromCodePoint(buffer[i]);
        }
      }
      this.buffer = "";
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c))
      ;
    else if (c === 0) {
      this.parseError = true;
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
    }
    return true;
  };
  function serializeURL(url, excludeFragment) {
    let output = url.scheme + ":";
    if (url.host !== null) {
      output += "//";
      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += ":" + url.password;
        }
        output += "@";
      }
      output += serializeHost(url.host);
      if (url.port !== null) {
        output += ":" + url.port;
      }
    } else if (url.host === null && url.scheme === "file") {
      output += "//";
    }
    if (url.cannotBeABaseURL) {
      output += url.path[0];
    } else {
      for (const string of url.path) {
        output += "/" + string;
      }
    }
    if (url.query !== null) {
      output += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
      output += "#" + url.fragment;
    }
    return output;
  }
  function serializeOrigin(tuple) {
    let result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += ":" + tuple.port;
    }
    return result;
  }
  module.exports.serializeURL = serializeURL;
  module.exports.serializeURLOrigin = function(url) {
    switch (url.scheme) {
      case "blob":
        try {
          return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
        } catch (e) {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        return "file://";
      default:
        return "null";
    }
  };
  module.exports.basicURLParse = function(input, options) {
    if (options === void 0) {
      options = {};
    }
    const usm2 = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm2.failure) {
      return "failure";
    }
    return usm2.url;
  };
  module.exports.setTheUsername = function(url, username) {
    url.username = "";
    const decoded = punycode2.ucs2.decode(username);
    for (let i = 0; i < decoded.length; ++i) {
      url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.setThePassword = function(url, password) {
    url.password = "";
    const decoded = punycode2.ucs2.decode(password);
    for (let i = 0; i < decoded.length; ++i) {
      url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.serializeHost = serializeHost;
  module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  module.exports.serializeInteger = function(integer) {
    return String(integer);
  };
  module.exports.parseURL = function(input, options) {
    if (options === void 0) {
      options = {};
    }
    return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
  };
})(urlStateMachine);
const usm = urlStateMachine.exports;
URLImpl.implementation = class URLImpl2 {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base = constructorArgs[1];
    let parsedBase = null;
    if (base !== void 0) {
      parsedBase = usm.basicURLParse(base);
      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }
    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }
    this._url = parsedURL;
  }
  get href() {
    return usm.serializeURL(this._url);
  }
  set href(v) {
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }
    this._url = parsedURL;
  }
  get origin() {
    return usm.serializeURLOrigin(this._url);
  }
  get protocol() {
    return this._url.scheme + ":";
  }
  set protocol(v) {
    usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
  }
  get username() {
    return this._url.username;
  }
  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    usm.setTheUsername(this._url, v);
  }
  get password() {
    return this._url.password;
  }
  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    usm.setThePassword(this._url, v);
  }
  get host() {
    const url = this._url;
    if (url.host === null) {
      return "";
    }
    if (url.port === null) {
      return usm.serializeHost(url.host);
    }
    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }
  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
  }
  get hostname() {
    if (this._url.host === null) {
      return "";
    }
    return usm.serializeHost(this._url.host);
  }
  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
  }
  get port() {
    if (this._url.port === null) {
      return "";
    }
    return usm.serializeInteger(this._url.port);
  }
  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
    }
  }
  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }
    if (this._url.path.length === 0) {
      return "";
    }
    return "/" + this._url.path.join("/");
  }
  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    this._url.path = [];
    usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
  }
  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }
    return "?" + this._url.query;
  }
  set search(v) {
    const url = this._url;
    if (v === "") {
      url.query = null;
      return;
    }
    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, { url, stateOverride: "query" });
  }
  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }
    return "#" + this._url.fragment;
  }
  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }
    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
  }
  toJSON() {
    return this.href;
  }
};
(function(module) {
  const conversions2 = lib$1;
  const utils2 = utils$4.exports;
  const Impl = URLImpl;
  const impl = utils2.implSymbol;
  function URL2(url) {
    if (!this || this[impl] || !(this instanceof URL2)) {
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    }
    if (arguments.length < 1) {
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 2; ++i) {
      args[i] = arguments[i];
    }
    args[0] = conversions2["USVString"](args[0]);
    if (args[1] !== void 0) {
      args[1] = conversions2["USVString"](args[1]);
    }
    module.exports.setup(this, args);
  }
  URL2.prototype.toJSON = function toJSON() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 0; ++i) {
      args[i] = arguments[i];
    }
    return this[impl].toJSON.apply(this[impl], args);
  };
  Object.defineProperty(URL2.prototype, "href", {
    get() {
      return this[impl].href;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].href = V;
    },
    enumerable: true,
    configurable: true
  });
  URL2.prototype.toString = function() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    return this.href;
  };
  Object.defineProperty(URL2.prototype, "origin", {
    get() {
      return this[impl].origin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "protocol", {
    get() {
      return this[impl].protocol;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].protocol = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "username", {
    get() {
      return this[impl].username;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].username = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "password", {
    get() {
      return this[impl].password;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].password = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "host", {
    get() {
      return this[impl].host;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].host = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "hostname", {
    get() {
      return this[impl].hostname;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].hostname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "port", {
    get() {
      return this[impl].port;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].port = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "pathname", {
    get() {
      return this[impl].pathname;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].pathname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "search", {
    get() {
      return this[impl].search;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].search = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "hash", {
    get() {
      return this[impl].hash;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].hash = V;
    },
    enumerable: true,
    configurable: true
  });
  module.exports = {
    is(obj) {
      return !!obj && obj[impl] instanceof Impl.implementation;
    },
    create(constructorArgs, privateData) {
      let obj = Object.create(URL2.prototype);
      this.setup(obj, constructorArgs, privateData);
      return obj;
    },
    setup(obj, constructorArgs, privateData) {
      if (!privateData)
        privateData = {};
      privateData.wrapper = obj;
      obj[impl] = new Impl.implementation(constructorArgs, privateData);
      obj[impl][utils2.wrapperSymbol] = obj;
    },
    interface: URL2,
    expose: {
      Window: { URL: URL2 },
      Worker: { URL: URL2 }
    }
  };
})(URL$2);
publicApi.URL = URL$2.exports.interface;
publicApi.serializeURL = urlStateMachine.exports.serializeURL;
publicApi.serializeURLOrigin = urlStateMachine.exports.serializeURLOrigin;
publicApi.basicURLParse = urlStateMachine.exports.basicURLParse;
publicApi.setTheUsername = urlStateMachine.exports.setTheUsername;
publicApi.setThePassword = urlStateMachine.exports.setThePassword;
publicApi.serializeHost = urlStateMachine.exports.serializeHost;
publicApi.serializeInteger = urlStateMachine.exports.serializeInteger;
publicApi.parseURL = urlStateMachine.exports.parseURL;
var httpsBrowserify = { exports: {} };
(function(module) {
  var http2 = streamHttp;
  var url = Url;
  var https2 = module.exports;
  for (var key in http2) {
    if (http2.hasOwnProperty(key))
      https2[key] = http2[key];
  }
  https2.request = function(params, cb) {
    params = validateParams(params);
    return http2.request.call(this, params, cb);
  };
  https2.get = function(params, cb) {
    params = validateParams(params);
    return http2.get.call(this, params, cb);
  };
  function validateParams(params) {
    if (typeof params === "string") {
      params = url.parse(params);
    }
    if (!params.protocol) {
      params.protocol = "https:";
    }
    if (params.protocol !== "https:") {
      throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    }
    return params;
  }
})(httpsBrowserify);
const https = httpsBrowserify.exports;
var lib = {};
var binding = {};
function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = "";
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream = ZStream;
var deflate$1 = {};
var common = {};
(function(exports) {
  var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
  function _has(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
  exports.assign = function(obj) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) {
        continue;
      }
      if (typeof source !== "object") {
        throw new TypeError(source + "must be non-object");
      }
      for (var p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }
    return obj;
  };
  exports.shrinkBuf = function(buf, size) {
    if (buf.length === size) {
      return buf;
    }
    if (buf.subarray) {
      return buf.subarray(0, size);
    }
    buf.length = size;
    return buf;
  };
  var fnTyped = {
    arraySet: function(dest, src, src_offs, len, dest_offs) {
      if (src.subarray && dest.subarray) {
        dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
        return;
      }
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    flattenChunks: function(chunks) {
      var i, l, len, pos, chunk, result;
      len = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }
      result = new Uint8Array(len);
      pos = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }
      return result;
    }
  };
  var fnUntyped = {
    arraySet: function(dest, src, src_offs, len, dest_offs) {
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    flattenChunks: function(chunks) {
      return [].concat.apply([], chunks);
    }
  };
  exports.setTyped = function(on) {
    if (on) {
      exports.Buf8 = Uint8Array;
      exports.Buf16 = Uint16Array;
      exports.Buf32 = Int32Array;
      exports.assign(exports, fnTyped);
    } else {
      exports.Buf8 = Array;
      exports.Buf16 = Array;
      exports.Buf32 = Array;
      exports.assign(exports, fnUntyped);
    }
  };
  exports.setTyped(TYPED_OK);
})(common);
var trees$1 = {};
var utils$3 = common;
var Z_FIXED$1 = 4;
var Z_BINARY = 0;
var Z_TEXT = 1;
var Z_UNKNOWN$1 = 2;
function zero$1(buf) {
  var len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
var MIN_MATCH$1 = 3;
var MAX_MATCH$1 = 258;
var LENGTH_CODES$1 = 29;
var LITERALS$1 = 256;
var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
var D_CODES$1 = 30;
var BL_CODES$1 = 19;
var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
var MAX_BITS$1 = 15;
var Buf_size = 16;
var MAX_BL_BITS = 7;
var END_BLOCK = 256;
var REP_3_6 = 16;
var REPZ_3_10 = 17;
var REPZ_11_138 = 18;
var extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
var extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
var extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
var DIST_CODE_LEN = 512;
var static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
var static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
var _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
var base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
var base_dist = new Array(D_CODES$1);
zero$1(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  this.extra_bits = extra_bits;
  this.extra_base = extra_base;
  this.elems = elems;
  this.max_length = max_length;
  this.has_stree = static_tree && static_tree.length;
}
var static_l_desc;
var static_d_desc;
var static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}
function put_short(s, w) {
  s.pending_buf[s.pending++] = w & 255;
  s.pending_buf[s.pending++] = w >>> 8 & 255;
}
function send_bits(s, value, length) {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 65535;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 65535;
    s.bi_valid += length;
  }
}
function send_code(s, c, tree) {
  send_bits(s, tree[c * 2], tree[c * 2 + 1]);
}
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 255;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}
function gen_bitlen(s, desc) {
  var tree = desc.dyn_tree;
  var max_code = desc.max_code;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var extra = desc.stat_desc.extra_bits;
  var base = desc.stat_desc.extra_base;
  var max_length = desc.stat_desc.max_length;
  var h;
  var n, m;
  var bits;
  var xbits;
  var f;
  var overflow = 0;
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }
  tree[s.heap[s.heap_max] * 2 + 1] = 0;
  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] = bits;
    if (n > max_code) {
      continue;
    }
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2];
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--;
    s.bl_count[bits + 1] += 2;
    s.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] !== bits) {
        s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
        tree[m * 2 + 1] = bits;
      }
      n--;
    }
  }
}
function gen_codes(tree, max_code, bl_count) {
  var next_code = new Array(MAX_BITS$1 + 1);
  var code = 0;
  var bits;
  var n;
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  for (n = 0; n <= max_code; n++) {
    var len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    tree[n * 2] = bi_reverse(next_code[len]++, len);
  }
}
function tr_static_init() {
  var n;
  var bits;
  var length;
  var code;
  var dist;
  var bl_count = new Array(MAX_BITS$1 + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1] = 5;
    static_dtree[n * 2] = bi_reverse(n, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);
}
function init_block(s) {
  var n;
  for (n = 0; n < L_CODES$1; n++) {
    s.dyn_ltree[n * 2] = 0;
  }
  for (n = 0; n < D_CODES$1; n++) {
    s.dyn_dtree[n * 2] = 0;
  }
  for (n = 0; n < BL_CODES$1; n++) {
    s.bl_tree[n * 2] = 0;
  }
  s.dyn_ltree[END_BLOCK * 2] = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}
function bi_windup(s) {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}
function copy_block(s, buf, len, header) {
  bi_windup(s);
  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
  utils$3.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
}
function pqdownheap(s, tree, k) {
  var v = s.heap[k];
  var j = k << 1;
  while (j <= s.heap_len) {
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }
    s.heap[k] = s.heap[j];
    k = j;
    j <<= 1;
  }
  s.heap[k] = v;
}
function compress_block(s, ltree, dtree) {
  var dist;
  var lc;
  var lx = 0;
  var code;
  var extra;
  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;
      if (dist === 0) {
        send_code(s, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
        }
      }
    } while (lx < s.last_lit);
  }
  send_code(s, END_BLOCK, ltree);
}
function build_tree(s, desc) {
  var tree = desc.dyn_tree;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems = desc.stat_desc.elems;
  var n, m;
  var max_code = -1;
  var node;
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] = 0;
    }
  }
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n = s.heap_len >> 1; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }
  node = elems;
  do {
    n = s.heap[1];
    s.heap[1] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1);
    m = s.heap[1];
    s.heap[--s.heap_max] = n;
    s.heap[--s.heap_max] = m;
    tree[node * 2] = tree[n * 2] + tree[m * 2];
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] = tree[m * 2 + 1] = node;
    s.heap[1] = node++;
    pqdownheap(s, tree, 1);
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[1];
  gen_bitlen(s, desc);
  gen_codes(tree, max_code, s.bl_count);
}
function scan_tree(s, tree, max_code) {
  var n;
  var prevlen = -1;
  var curlen;
  var nextlen = tree[0 * 2 + 1];
  var count = 0;
  var max_count = 7;
  var min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 65535;
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2]++;
      }
      s.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
function send_tree(s, tree, max_code) {
  var n;
  var prevlen = -1;
  var curlen;
  var nextlen = tree[0 * 2 + 1];
  var count = 0;
  var max_count = 7;
  var min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
function build_bl_tree(s) {
  var max_blindex;
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  build_tree(s, s.bl_desc);
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
}
function send_all_trees(s, lcodes, dcodes, blcodes) {
  var rank2;
  send_bits(s, lcodes - 257, 5);
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4);
  for (rank2 = 0; rank2 < blcodes; rank2++) {
    send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
  }
  send_tree(s, s.dyn_ltree, lcodes - 1);
  send_tree(s, s.dyn_dtree, dcodes - 1);
}
function detect_data_type(s) {
  var black_mask = 4093624447;
  var n;
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
      return Z_BINARY;
    }
  }
  if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
}
var static_init_done = false;
function _tr_init(s) {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  init_block(s);
}
function _tr_stored_block(s, buf, stored_len, last) {
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  copy_block(s, buf, stored_len, true);
}
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}
function _tr_flush_block(s, buf, stored_len, last) {
  var opt_lenb, static_lenb;
  var max_blindex = 0;
  if (s.level > 0) {
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }
    build_tree(s, s.l_desc);
    build_tree(s, s.d_desc);
    max_blindex = build_bl_tree(s);
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;
    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  init_block(s);
  if (last) {
    bi_windup(s);
  }
}
function _tr_tally(s, dist, lc) {
  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
  s.last_lit++;
  if (dist === 0) {
    s.dyn_ltree[lc * 2]++;
  } else {
    s.matches++;
    dist--;
    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
    s.dyn_dtree[d_code(dist) * 2]++;
  }
  return s.last_lit === s.lit_bufsize - 1;
}
trees$1._tr_init = _tr_init;
trees$1._tr_stored_block = _tr_stored_block;
trees$1._tr_flush_block = _tr_flush_block;
trees$1._tr_tally = _tr_tally;
trees$1._tr_align = _tr_align;
function adler32$2(adler, buf, len, pos) {
  var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
  while (len !== 0) {
    n = len > 2e3 ? 2e3 : len;
    len -= n;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
}
var adler32_1 = adler32$2;
function makeTable() {
  var c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }
  return table;
}
var crcTable = makeTable();
function crc32$2(crc, buf, len, pos) {
  var t = crcTable, end = pos + len;
  crc ^= -1;
  for (var i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
  }
  return crc ^ -1;
}
var crc32_1 = crc32$2;
var messages = {
  2: "need dictionary",
  1: "stream end",
  0: "",
  "-1": "file error",
  "-2": "stream error",
  "-3": "data error",
  "-4": "insufficient memory",
  "-5": "buffer error",
  "-6": "incompatible version"
};
var utils$2 = common;
var trees = trees$1;
var adler32$1 = adler32_1;
var crc32$1 = crc32_1;
var msg = messages;
var Z_NO_FLUSH = 0;
var Z_PARTIAL_FLUSH = 1;
var Z_FULL_FLUSH = 3;
var Z_FINISH$1 = 4;
var Z_BLOCK$1 = 5;
var Z_OK$1 = 0;
var Z_STREAM_END$1 = 1;
var Z_STREAM_ERROR$1 = -2;
var Z_DATA_ERROR$1 = -3;
var Z_BUF_ERROR$1 = -5;
var Z_DEFAULT_COMPRESSION = -1;
var Z_FILTERED = 1;
var Z_HUFFMAN_ONLY = 2;
var Z_RLE = 3;
var Z_FIXED = 4;
var Z_DEFAULT_STRATEGY = 0;
var Z_UNKNOWN = 2;
var Z_DEFLATED$1 = 8;
var MAX_MEM_LEVEL = 9;
var MAX_WBITS$1 = 15;
var DEF_MEM_LEVEL = 8;
var LENGTH_CODES = 29;
var LITERALS = 256;
var L_CODES = LITERALS + 1 + LENGTH_CODES;
var D_CODES = 30;
var BL_CODES = 19;
var HEAP_SIZE = 2 * L_CODES + 1;
var MAX_BITS = 15;
var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
var PRESET_DICT = 32;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE = 1;
var BS_BLOCK_DONE = 2;
var BS_FINISH_STARTED = 3;
var BS_FINISH_DONE = 4;
var OS_CODE = 3;
function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}
function rank(f) {
  return (f << 1) - (f > 4 ? 9 : 0);
}
function zero(buf) {
  var len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
function flush_pending(strm) {
  var s = strm.state;
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  utils$2.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}
function flush_block_only(s, last) {
  trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}
function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}
function putShortMSB(s, b) {
  s.pending_buf[s.pending++] = b >>> 8 & 255;
  s.pending_buf[s.pending++] = b & 255;
}
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;
  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;
  utils$2.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32$1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32$1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
}
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;
  var scan = s.strstart;
  var match;
  var len;
  var best_len = s.prev_length;
  var nice_match = s.nice_match;
  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
  var _win = s.window;
  var wmask = s.w_mask;
  var prev = s.prev;
  var strend = s.strstart + MAX_MATCH;
  var scan_end1 = _win[scan + best_len - 1];
  var scan_end = _win[scan + best_len];
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }
  do {
    match = cur_match;
    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;
  do {
    more = s.window_size - s.lookahead - s.strstart;
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      utils$2.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      s.block_start -= _w_size;
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
      while (s.insert) {
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
}
function deflate_stored(s, flush) {
  var max_block_size = 65535;
  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }
  for (; ; ) {
    if (s.lookahead <= 1) {
      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.strstart += s.lookahead;
    s.lookahead = 0;
    var max_start = s.block_start + max_block_size;
    if (s.strstart === 0 || s.strstart >= max_start) {
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.strstart > s.block_start) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_NEED_MORE;
}
function deflate_fast(s, flush) {
  var hash_head;
  var bflush;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
        s.match_length--;
        do {
          s.strstart++;
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
      }
    } else {
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_slow(s, flush) {
  var hash_head;
  var bflush;
  var max_insert;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;
    if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
        s.match_length = MIN_MATCH - 1;
      }
    }
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s.match_available) {
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        flush_block_only(s, false);
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  if (s.match_available) {
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_rle(s, flush) {
  var bflush;
  var prev;
  var scan, strend;
  var _win = s.window;
  for (; ; ) {
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_huff(s, flush) {
  var bflush;
  for (; ; ) {
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s.match_length = 0;
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table;
configuration_table = [
  new Config(0, 0, 0, 0, deflate_stored),
  new Config(4, 4, 8, 4, deflate_fast),
  new Config(4, 5, 16, 8, deflate_fast),
  new Config(4, 6, 32, 32, deflate_fast),
  new Config(4, 4, 16, 16, deflate_slow),
  new Config(8, 16, 32, 32, deflate_slow),
  new Config(8, 16, 128, 128, deflate_slow),
  new Config(8, 32, 128, 256, deflate_slow),
  new Config(32, 128, 258, 1024, deflate_slow),
  new Config(32, 258, 258, 4096, deflate_slow)
];
function lm_init(s) {
  s.window_size = 2 * s.w_size;
  zero(s.head);
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED$1;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree = new utils$2.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree = new utils$2.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree = new utils$2.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc = null;
  this.d_desc = null;
  this.bl_desc = null;
  this.bl_count = new utils$2.Buf16(MAX_BITS + 1);
  this.heap = new utils$2.Buf16(2 * L_CODES + 1);
  zero(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new utils$2.Buf16(2 * L_CODES + 1);
  zero(this.depth);
  this.l_buf = 0;
  this.lit_bufsize = 0;
  this.last_lit = 0;
  this.d_buf = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
function deflateResetKeep(strm) {
  var s;
  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
  }
  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 : 1;
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK$1;
}
function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK$1) {
    lm_init(strm.state);
  }
  return ret;
}
function deflateSetHeader(strm, head2) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  if (strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$1;
  }
  strm.state.gzhead = head2;
  return Z_OK$1;
}
function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  var wrap2 = 1;
  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap2 = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap2 = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$1 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  var s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap2;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new utils$2.Buf8(s.w_size * 2);
  s.head = new utils$2.Buf16(s.hash_size);
  s.prev = new utils$2.Buf16(s.w_size);
  s.lit_bufsize = 1 << memLevel + 6;
  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils$2.Buf8(s.pending_buf_size);
  s.d_buf = 1 * s.lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
}
function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED$1, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}
function deflate(strm, flush) {
  var old_flush, s;
  var beg, val;
  if (!strm || !strm.state || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;
  }
  s = strm.state;
  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH$1) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);
  }
  s.strm = strm;
  old_flush = s.last_flush;
  s.last_flush = flush;
  if (s.status === INIT_STATE) {
    if (s.wrap === 2) {
      strm.adler = 0;
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      } else {
        put_byte(
          s,
          (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 255);
        put_byte(s, s.gzhead.time >> 8 & 255);
        put_byte(s, s.gzhead.time >> 16 & 255);
        put_byte(s, s.gzhead.time >> 24 & 255);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 255);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 255);
          put_byte(s, s.gzhead.extra.length >> 8 & 255);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    } else {
      var header = Z_DEFLATED$1 + (s.w_bits - 8 << 4) << 8;
      var level_flags = -1;
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= level_flags << 6;
      if (s.strstart !== 0) {
        header |= PRESET_DICT;
      }
      header += 31 - header % 31;
      s.status = BUSY_STATE;
      putShortMSB(s, header);
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      strm.adler = 1;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra) {
      beg = s.pending;
      while (s.gzindex < (s.gzhead.extra.length & 65535)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 255);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    } else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    } else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    } else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        strm.adler = 0;
        s.status = BUSY_STATE;
      }
    } else {
      s.status = BUSY_STATE;
    }
  }
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s.last_flush = -1;
      return Z_OK$1;
    }
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$1) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
    var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
      }
      return Z_OK$1;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      } else if (flush !== Z_BLOCK$1) {
        trees._tr_stored_block(s, 0, 0, false);
        if (flush === Z_FULL_FLUSH) {
          zero(s.head);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK$1;
      }
    }
  }
  if (flush !== Z_FINISH$1) {
    return Z_OK$1;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END$1;
  }
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 255);
    put_byte(s, strm.adler >> 8 & 255);
    put_byte(s, strm.adler >> 16 & 255);
    put_byte(s, strm.adler >> 24 & 255);
    put_byte(s, strm.total_in & 255);
    put_byte(s, strm.total_in >> 8 & 255);
    put_byte(s, strm.total_in >> 16 & 255);
    put_byte(s, strm.total_in >> 24 & 255);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 65535);
  }
  flush_pending(strm);
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  return s.pending !== 0 ? Z_OK$1 : Z_STREAM_END$1;
}
function deflateEnd(strm) {
  var status;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  status = strm.state.status;
  if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$1;
}
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var s;
  var str, n;
  var wrap2;
  var avail;
  var next;
  var input;
  var tmpDict;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  s = strm.state;
  wrap2 = s.wrap;
  if (wrap2 === 2 || wrap2 === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR$1;
  }
  if (wrap2 === 1) {
    strm.adler = adler32$1(strm.adler, dictionary, dictLength, 0);
  }
  s.wrap = 0;
  if (dictLength >= s.w_size) {
    if (wrap2 === 0) {
      zero(s.head);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    tmpDict = new utils$2.Buf8(s.w_size);
    utils$2.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap2;
  return Z_OK$1;
}
deflate$1.deflateInit = deflateInit;
deflate$1.deflateInit2 = deflateInit2;
deflate$1.deflateReset = deflateReset;
deflate$1.deflateResetKeep = deflateResetKeep;
deflate$1.deflateSetHeader = deflateSetHeader;
deflate$1.deflate = deflate;
deflate$1.deflateEnd = deflateEnd;
deflate$1.deflateSetDictionary = deflateSetDictionary;
deflate$1.deflateInfo = "pako deflate (from Nodeca project)";
var inflate$1 = {};
var BAD$1 = 30;
var TYPE$2 = 12;
var inffast = function inflate_fast(strm, start) {
  var state2;
  var _in;
  var last;
  var _out;
  var beg;
  var end;
  var dmax;
  var wsize;
  var whave;
  var wnext;
  var s_window;
  var hold;
  var bits;
  var lcode;
  var dcode;
  var lmask;
  var dmask;
  var here;
  var op;
  var len;
  var dist;
  var from;
  var from_source;
  var input, output;
  state2 = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state2.dmax;
  wsize = state2.wsize;
  whave = state2.whave;
  wnext = state2.wnext;
  s_window = state2.window;
  hold = state2.hold;
  bits = state2.bits;
  lcode = state2.lencode;
  dcode = state2.distcode;
  lmask = (1 << state2.lenbits) - 1;
  dmask = (1 << state2.distbits) - 1;
  top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
        for (; ; ) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (op === 0) {
            output[_out++] = here & 65535;
          } else if (op & 16) {
            len = here & 65535;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op & 16) {
                  dist = here & 65535;
                  op &= 15;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }
                  dist += hold & (1 << op) - 1;
                  if (dist > dmax) {
                    strm.msg = "invalid distance too far back";
                    state2.mode = BAD$1;
                    break top;
                  }
                  hold >>>= op;
                  bits -= op;
                  op = _out - beg;
                  if (dist > op) {
                    op = dist - op;
                    if (op > whave) {
                      if (state2.sane) {
                        strm.msg = "invalid distance too far back";
                        state2.mode = BAD$1;
                        break top;
                      }
                    }
                    from = 0;
                    from_source = s_window;
                    if (wnext === 0) {
                      from += wsize - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    } else if (wnext < op) {
                      from += wsize + wnext - op;
                      op -= wnext;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = 0;
                        if (wnext < len) {
                          op = wnext;
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      from += wnext - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    }
                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }
                    if (len) {
                      output[_out++] = from_source[from++];
                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    do {
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);
                    if (len) {
                      output[_out++] = output[from++];
                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = "invalid distance code";
                  state2.mode = BAD$1;
                  break top;
                }
                break;
              }
          } else if ((op & 64) === 0) {
            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
            continue dolen;
          } else if (op & 32) {
            state2.mode = TYPE$2;
            break top;
          } else {
            strm.msg = "invalid literal/length code";
            state2.mode = BAD$1;
            break top;
          }
          break;
        }
    } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state2.hold = hold;
  state2.bits = bits;
  return;
};
var utils$1 = common;
var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;
var lbase = [
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
];
var lext = [
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
];
var dbase = [
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
];
var dext = [
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
];
var inftrees = function inflate_table(type, lens, lens_index, codes2, table, table_index, work, opts) {
  var bits = opts.bits;
  var len = 0;
  var sym = 0;
  var min = 0, max = 0;
  var root = 0;
  var curr = 0;
  var drop = 0;
  var left = 0;
  var used = 0;
  var huff = 0;
  var incr;
  var fill;
  var low;
  var mask;
  var next;
  var base = null;
  var base_index = 0;
  var end;
  var count = new utils$1.Buf16(MAXBITS + 1);
  var offs = new utils$1.Buf16(MAXBITS + 1);
  var extra = null;
  var extra_index = 0;
  var here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes2; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes2; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type === CODES$1) {
    base = extra = work;
    end = 19;
  } else if (type === LENS$1) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    base = dbase;
    extra = dext;
    end = -1;
  }
  huff = 0;
  sym = 0;
  len = min;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
    return 1;
  }
  for (; ; ) {
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill;
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
        return 1;
      }
      low = huff & mask;
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  opts.bits = root;
  return 0;
};
var utils = common;
var adler32 = adler32_1;
var crc32 = crc32_1;
var inflate_fast2 = inffast;
var inflate_table2 = inftrees;
var CODES = 0;
var LENS = 1;
var DISTS = 2;
var Z_FINISH = 4;
var Z_BLOCK = 5;
var Z_TREES = 6;
var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_NEED_DICT = 2;
var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR = -5;
var Z_DEFLATED = 8;
var HEAD = 1;
var FLAGS = 2;
var TIME = 3;
var OS = 4;
var EXLEN = 5;
var EXTRA = 6;
var NAME = 7;
var COMMENT = 8;
var HCRC = 9;
var DICTID = 10;
var DICT = 11;
var TYPE$1 = 12;
var TYPEDO = 13;
var STORED = 14;
var COPY_ = 15;
var COPY = 16;
var TABLE = 17;
var LENLENS = 18;
var CODELENS = 19;
var LEN_ = 20;
var LEN = 21;
var LENEXT = 22;
var DIST = 23;
var DISTEXT = 24;
var MATCH = 25;
var LIT = 26;
var CHECK = 27;
var LENGTH = 28;
var DONE = 29;
var BAD = 30;
var MEM = 31;
var SYNC = 32;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
var MAX_WBITS = 15;
var DEF_WBITS = MAX_WBITS;
function zswap32(q) {
  return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
}
function InflateState() {
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new utils.Buf16(320);
  this.work = new utils.Buf16(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
function inflateResetKeep(strm) {
  var state2;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state2 = strm.state;
  strm.total_in = strm.total_out = state2.total = 0;
  strm.msg = "";
  if (state2.wrap) {
    strm.adler = state2.wrap & 1;
  }
  state2.mode = HEAD;
  state2.last = 0;
  state2.havedict = 0;
  state2.dmax = 32768;
  state2.head = null;
  state2.hold = 0;
  state2.bits = 0;
  state2.lencode = state2.lendyn = new utils.Buf32(ENOUGH_LENS);
  state2.distcode = state2.distdyn = new utils.Buf32(ENOUGH_DISTS);
  state2.sane = 1;
  state2.back = -1;
  return Z_OK;
}
function inflateReset(strm) {
  var state2;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state2 = strm.state;
  state2.wsize = 0;
  state2.whave = 0;
  state2.wnext = 0;
  return inflateResetKeep(strm);
}
function inflateReset2(strm, windowBits) {
  var wrap2;
  var state2;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state2 = strm.state;
  if (windowBits < 0) {
    wrap2 = 0;
    windowBits = -windowBits;
  } else {
    wrap2 = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state2.window !== null && state2.wbits !== windowBits) {
    state2.window = null;
  }
  state2.wrap = wrap2;
  state2.wbits = windowBits;
  return inflateReset(strm);
}
function inflateInit2(strm, windowBits) {
  var ret;
  var state2;
  if (!strm) {
    return Z_STREAM_ERROR;
  }
  state2 = new InflateState();
  strm.state = state2;
  state2.window = null;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null;
  }
  return ret;
}
function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}
var virgin = true;
var lenfix, distfix;
function fixedtables(state2) {
  if (virgin) {
    var sym;
    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);
    sym = 0;
    while (sym < 144) {
      state2.lens[sym++] = 8;
    }
    while (sym < 256) {
      state2.lens[sym++] = 9;
    }
    while (sym < 280) {
      state2.lens[sym++] = 7;
    }
    while (sym < 288) {
      state2.lens[sym++] = 8;
    }
    inflate_table2(LENS, state2.lens, 0, 288, lenfix, 0, state2.work, { bits: 9 });
    sym = 0;
    while (sym < 32) {
      state2.lens[sym++] = 5;
    }
    inflate_table2(DISTS, state2.lens, 0, 32, distfix, 0, state2.work, { bits: 5 });
    virgin = false;
  }
  state2.lencode = lenfix;
  state2.lenbits = 9;
  state2.distcode = distfix;
  state2.distbits = 5;
}
function updatewindow(strm, src, end, copy) {
  var dist;
  var state2 = strm.state;
  if (state2.window === null) {
    state2.wsize = 1 << state2.wbits;
    state2.wnext = 0;
    state2.whave = 0;
    state2.window = new utils.Buf8(state2.wsize);
  }
  if (copy >= state2.wsize) {
    utils.arraySet(state2.window, src, end - state2.wsize, state2.wsize, 0);
    state2.wnext = 0;
    state2.whave = state2.wsize;
  } else {
    dist = state2.wsize - state2.wnext;
    if (dist > copy) {
      dist = copy;
    }
    utils.arraySet(state2.window, src, end - copy, dist, state2.wnext);
    copy -= dist;
    if (copy) {
      utils.arraySet(state2.window, src, end - copy, copy, 0);
      state2.wnext = copy;
      state2.whave = state2.wsize;
    } else {
      state2.wnext += dist;
      if (state2.wnext === state2.wsize) {
        state2.wnext = 0;
      }
      if (state2.whave < state2.wsize) {
        state2.whave += dist;
      }
    }
  }
  return 0;
}
function inflate(strm, flush) {
  var state2;
  var input, output;
  var next;
  var put2;
  var have, left;
  var hold;
  var bits;
  var _in, _out;
  var copy;
  var from;
  var from_source;
  var here = 0;
  var here_bits, here_op, here_val;
  var last_bits, last_op, last_val;
  var len;
  var ret;
  var hbuf = new utils.Buf8(4);
  var opts;
  var n;
  var order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR;
  }
  state2 = strm.state;
  if (state2.mode === TYPE$1) {
    state2.mode = TYPEDO;
  }
  put2 = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state2.hold;
  bits = state2.bits;
  _in = have;
  _out = left;
  ret = Z_OK;
  inf_leave:
    for (; ; ) {
      switch (state2.mode) {
        case HEAD:
          if (state2.wrap === 0) {
            state2.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state2.wrap & 2 && hold === 35615) {
            state2.check = 0;
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state2.check = crc32(state2.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state2.mode = FLAGS;
            break;
          }
          state2.flags = 0;
          if (state2.head) {
            state2.head.done = false;
          }
          if (!(state2.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
            strm.msg = "incorrect header check";
            state2.mode = BAD;
            break;
          }
          if ((hold & 15) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state2.mode = BAD;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 15) + 8;
          if (state2.wbits === 0) {
            state2.wbits = len;
          } else if (len > state2.wbits) {
            strm.msg = "invalid window size";
            state2.mode = BAD;
            break;
          }
          state2.dmax = 1 << len;
          strm.adler = state2.check = 1;
          state2.mode = hold & 512 ? DICTID : TYPE$1;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state2.flags = hold;
          if ((state2.flags & 255) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state2.mode = BAD;
            break;
          }
          if (state2.flags & 57344) {
            strm.msg = "unknown header flags set";
            state2.mode = BAD;
            break;
          }
          if (state2.head) {
            state2.head.text = hold >> 8 & 1;
          }
          if (state2.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state2.check = crc32(state2.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state2.mode = TIME;
        case TIME:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state2.head) {
            state2.head.time = hold;
          }
          if (state2.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            hbuf[2] = hold >>> 16 & 255;
            hbuf[3] = hold >>> 24 & 255;
            state2.check = crc32(state2.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state2.mode = OS;
        case OS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state2.head) {
            state2.head.xflags = hold & 255;
            state2.head.os = hold >> 8;
          }
          if (state2.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state2.check = crc32(state2.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state2.mode = EXLEN;
        case EXLEN:
          if (state2.flags & 1024) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state2.length = hold;
            if (state2.head) {
              state2.head.extra_len = hold;
            }
            if (state2.flags & 512) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state2.check = crc32(state2.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          } else if (state2.head) {
            state2.head.extra = null;
          }
          state2.mode = EXTRA;
        case EXTRA:
          if (state2.flags & 1024) {
            copy = state2.length;
            if (copy > have) {
              copy = have;
            }
            if (copy) {
              if (state2.head) {
                len = state2.head.extra_len - state2.length;
                if (!state2.head.extra) {
                  state2.head.extra = new Array(state2.head.extra_len);
                }
                utils.arraySet(
                  state2.head.extra,
                  input,
                  next,
                  copy,
                  len
                );
              }
              if (state2.flags & 512) {
                state2.check = crc32(state2.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state2.length -= copy;
            }
            if (state2.length) {
              break inf_leave;
            }
          }
          state2.length = 0;
          state2.mode = NAME;
        case NAME:
          if (state2.flags & 2048) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state2.head && len && state2.length < 65536) {
                state2.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state2.flags & 512) {
              state2.check = crc32(state2.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state2.head) {
            state2.head.name = null;
          }
          state2.length = 0;
          state2.mode = COMMENT;
        case COMMENT:
          if (state2.flags & 4096) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state2.head && len && state2.length < 65536) {
                state2.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state2.flags & 512) {
              state2.check = crc32(state2.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state2.head) {
            state2.head.comment = null;
          }
          state2.mode = HCRC;
        case HCRC:
          if (state2.flags & 512) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state2.check & 65535)) {
              strm.msg = "header crc mismatch";
              state2.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state2.head) {
            state2.head.hcrc = state2.flags >> 9 & 1;
            state2.head.done = true;
          }
          strm.adler = state2.check = 0;
          state2.mode = TYPE$1;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state2.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state2.mode = DICT;
        case DICT:
          if (state2.havedict === 0) {
            strm.next_out = put2;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state2.hold = hold;
            state2.bits = bits;
            return Z_NEED_DICT;
          }
          strm.adler = state2.check = 1;
          state2.mode = TYPE$1;
        case TYPE$1:
          if (flush === Z_BLOCK || flush === Z_TREES) {
            break inf_leave;
          }
        case TYPEDO:
          if (state2.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state2.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state2.last = hold & 1;
          hold >>>= 1;
          bits -= 1;
          switch (hold & 3) {
            case 0:
              state2.mode = STORED;
              break;
            case 1:
              fixedtables(state2);
              state2.mode = LEN_;
              if (flush === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state2.mode = TABLE;
              break;
            case 3:
              strm.msg = "invalid block type";
              state2.mode = BAD;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
            strm.msg = "invalid stored block lengths";
            state2.mode = BAD;
            break;
          }
          state2.length = hold & 65535;
          hold = 0;
          bits = 0;
          state2.mode = COPY_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case COPY_:
          state2.mode = COPY;
        case COPY:
          copy = state2.length;
          if (copy) {
            if (copy > have) {
              copy = have;
            }
            if (copy > left) {
              copy = left;
            }
            if (copy === 0) {
              break inf_leave;
            }
            utils.arraySet(output, input, next, copy, put2);
            have -= copy;
            next += copy;
            left -= copy;
            put2 += copy;
            state2.length -= copy;
            break;
          }
          state2.mode = TYPE$1;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state2.nlen = (hold & 31) + 257;
          hold >>>= 5;
          bits -= 5;
          state2.ndist = (hold & 31) + 1;
          hold >>>= 5;
          bits -= 5;
          state2.ncode = (hold & 15) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state2.nlen > 286 || state2.ndist > 30) {
            strm.msg = "too many length or distance symbols";
            state2.mode = BAD;
            break;
          }
          state2.have = 0;
          state2.mode = LENLENS;
        case LENLENS:
          while (state2.have < state2.ncode) {
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state2.lens[order[state2.have++]] = hold & 7;
            hold >>>= 3;
            bits -= 3;
          }
          while (state2.have < 19) {
            state2.lens[order[state2.have++]] = 0;
          }
          state2.lencode = state2.lendyn;
          state2.lenbits = 7;
          opts = { bits: state2.lenbits };
          ret = inflate_table2(CODES, state2.lens, 0, 19, state2.lencode, 0, state2.work, opts);
          state2.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid code lengths set";
            state2.mode = BAD;
            break;
          }
          state2.have = 0;
          state2.mode = CODELENS;
        case CODELENS:
          while (state2.have < state2.nlen + state2.ndist) {
            for (; ; ) {
              here = state2.lencode[hold & (1 << state2.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state2.lens[state2.have++] = here_val;
            } else {
              if (here_val === 16) {
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state2.have === 0) {
                  strm.msg = "invalid bit length repeat";
                  state2.mode = BAD;
                  break;
                }
                len = state2.lens[state2.have - 1];
                copy = 3 + (hold & 3);
                hold >>>= 2;
                bits -= 2;
              } else if (here_val === 17) {
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 3 + (hold & 7);
                hold >>>= 3;
                bits -= 3;
              } else {
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 11 + (hold & 127);
                hold >>>= 7;
                bits -= 7;
              }
              if (state2.have + copy > state2.nlen + state2.ndist) {
                strm.msg = "invalid bit length repeat";
                state2.mode = BAD;
                break;
              }
              while (copy--) {
                state2.lens[state2.have++] = len;
              }
            }
          }
          if (state2.mode === BAD) {
            break;
          }
          if (state2.lens[256] === 0) {
            strm.msg = "invalid code -- missing end-of-block";
            state2.mode = BAD;
            break;
          }
          state2.lenbits = 9;
          opts = { bits: state2.lenbits };
          ret = inflate_table2(LENS, state2.lens, 0, state2.nlen, state2.lencode, 0, state2.work, opts);
          state2.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid literal/lengths set";
            state2.mode = BAD;
            break;
          }
          state2.distbits = 6;
          state2.distcode = state2.distdyn;
          opts = { bits: state2.distbits };
          ret = inflate_table2(DISTS, state2.lens, state2.nlen, state2.ndist, state2.distcode, 0, state2.work, opts);
          state2.distbits = opts.bits;
          if (ret) {
            strm.msg = "invalid distances set";
            state2.mode = BAD;
            break;
          }
          state2.mode = LEN_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case LEN_:
          state2.mode = LEN;
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put2;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state2.hold = hold;
            state2.bits = bits;
            inflate_fast2(strm, _out);
            put2 = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state2.hold;
            bits = state2.bits;
            if (state2.mode === TYPE$1) {
              state2.back = -1;
            }
            break;
          }
          state2.back = 0;
          for (; ; ) {
            here = state2.lencode[hold & (1 << state2.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state2.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state2.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state2.back += here_bits;
          state2.length = here_val;
          if (here_op === 0) {
            state2.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state2.back = -1;
            state2.mode = TYPE$1;
            break;
          }
          if (here_op & 64) {
            strm.msg = "invalid literal/length code";
            state2.mode = BAD;
            break;
          }
          state2.extra = here_op & 15;
          state2.mode = LENEXT;
        case LENEXT:
          if (state2.extra) {
            n = state2.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state2.length += hold & (1 << state2.extra) - 1;
            hold >>>= state2.extra;
            bits -= state2.extra;
            state2.back += state2.extra;
          }
          state2.was = state2.length;
          state2.mode = DIST;
        case DIST:
          for (; ; ) {
            here = state2.distcode[hold & (1 << state2.distbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state2.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state2.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state2.back += here_bits;
          if (here_op & 64) {
            strm.msg = "invalid distance code";
            state2.mode = BAD;
            break;
          }
          state2.offset = here_val;
          state2.extra = here_op & 15;
          state2.mode = DISTEXT;
        case DISTEXT:
          if (state2.extra) {
            n = state2.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state2.offset += hold & (1 << state2.extra) - 1;
            hold >>>= state2.extra;
            bits -= state2.extra;
            state2.back += state2.extra;
          }
          if (state2.offset > state2.dmax) {
            strm.msg = "invalid distance too far back";
            state2.mode = BAD;
            break;
          }
          state2.mode = MATCH;
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy = _out - left;
          if (state2.offset > copy) {
            copy = state2.offset - copy;
            if (copy > state2.whave) {
              if (state2.sane) {
                strm.msg = "invalid distance too far back";
                state2.mode = BAD;
                break;
              }
            }
            if (copy > state2.wnext) {
              copy -= state2.wnext;
              from = state2.wsize - copy;
            } else {
              from = state2.wnext - copy;
            }
            if (copy > state2.length) {
              copy = state2.length;
            }
            from_source = state2.window;
          } else {
            from_source = output;
            from = put2 - state2.offset;
            copy = state2.length;
          }
          if (copy > left) {
            copy = left;
          }
          left -= copy;
          state2.length -= copy;
          do {
            output[put2++] = from_source[from++];
          } while (--copy);
          if (state2.length === 0) {
            state2.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put2++] = state2.length;
          left--;
          state2.mode = LEN;
          break;
        case CHECK:
          if (state2.wrap) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state2.total += _out;
            if (_out) {
              strm.adler = state2.check = state2.flags ? crc32(state2.check, output, _out, put2 - _out) : adler32(state2.check, output, _out, put2 - _out);
            }
            _out = left;
            if ((state2.flags ? hold : zswap32(hold)) !== state2.check) {
              strm.msg = "incorrect data check";
              state2.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state2.mode = LENGTH;
        case LENGTH:
          if (state2.wrap && state2.flags) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state2.total & 4294967295)) {
              strm.msg = "incorrect length check";
              state2.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state2.mode = DONE;
        case DONE:
          ret = Z_STREAM_END;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR;
        case SYNC:
        default:
          return Z_STREAM_ERROR;
      }
    }
  strm.next_out = put2;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state2.hold = hold;
  state2.bits = bits;
  if (state2.wsize || _out !== strm.avail_out && state2.mode < BAD && (state2.mode < CHECK || flush !== Z_FINISH)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out))
      ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state2.total += _out;
  if (state2.wrap && _out) {
    strm.adler = state2.check = state2.flags ? crc32(state2.check, output, _out, strm.next_out - _out) : adler32(state2.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state2.bits + (state2.last ? 64 : 0) + (state2.mode === TYPE$1 ? 128 : 0) + (state2.mode === LEN_ || state2.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}
function inflateEnd(strm) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  var state2 = strm.state;
  if (state2.window) {
    state2.window = null;
  }
  strm.state = null;
  return Z_OK;
}
function inflateGetHeader(strm, head2) {
  var state2;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state2 = strm.state;
  if ((state2.wrap & 2) === 0) {
    return Z_STREAM_ERROR;
  }
  state2.head = head2;
  head2.done = false;
  return Z_OK;
}
function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var state2;
  var dictid;
  var ret;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  state2 = strm.state;
  if (state2.wrap !== 0 && state2.mode !== DICT) {
    return Z_STREAM_ERROR;
  }
  if (state2.mode === DICT) {
    dictid = 1;
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state2.check) {
      return Z_DATA_ERROR;
    }
  }
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state2.mode = MEM;
    return Z_MEM_ERROR;
  }
  state2.havedict = 1;
  return Z_OK;
}
inflate$1.inflateReset = inflateReset;
inflate$1.inflateReset2 = inflateReset2;
inflate$1.inflateResetKeep = inflateResetKeep;
inflate$1.inflateInit = inflateInit;
inflate$1.inflateInit2 = inflateInit2;
inflate$1.inflate = inflate;
inflate$1.inflateEnd = inflateEnd;
inflate$1.inflateGetHeader = inflateGetHeader;
inflate$1.inflateSetDictionary = inflateSetDictionary;
inflate$1.inflateInfo = "pako inflate (from Nodeca project)";
var constants = {
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_BUF_ERROR: -5,
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  Z_BINARY: 0,
  Z_TEXT: 1,
  Z_UNKNOWN: 2,
  Z_DEFLATED: 8
};
(function(exports) {
  var assert = require$$0$4;
  var Zstream = zstream;
  var zlib_deflate = deflate$1;
  var zlib_inflate = inflate$1;
  var constants$1 = constants;
  for (var key in constants$1) {
    exports[key] = constants$1[key];
  }
  exports.NONE = 0;
  exports.DEFLATE = 1;
  exports.INFLATE = 2;
  exports.GZIP = 3;
  exports.GUNZIP = 4;
  exports.DEFLATERAW = 5;
  exports.INFLATERAW = 6;
  exports.UNZIP = 7;
  var GZIP_HEADER_ID1 = 31;
  var GZIP_HEADER_ID2 = 139;
  function Zlib(mode) {
    if (typeof mode !== "number" || mode < exports.DEFLATE || mode > exports.UNZIP) {
      throw new TypeError("Bad argument");
    }
    this.dictionary = null;
    this.err = 0;
    this.flush = 0;
    this.init_done = false;
    this.level = 0;
    this.memLevel = 0;
    this.mode = mode;
    this.strategy = 0;
    this.windowBits = 0;
    this.write_in_progress = false;
    this.pending_close = false;
    this.gzip_id_bytes_read = 0;
  }
  Zlib.prototype.close = function() {
    if (this.write_in_progress) {
      this.pending_close = true;
      return;
    }
    this.pending_close = false;
    assert(this.init_done, "close before init");
    assert(this.mode <= exports.UNZIP);
    if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
      zlib_deflate.deflateEnd(this.strm);
    } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
      zlib_inflate.inflateEnd(this.strm);
    }
    this.mode = exports.NONE;
    this.dictionary = null;
  };
  Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
    return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
  };
  Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
    return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
  };
  Zlib.prototype._write = function(async, flush, input, in_off, in_len, out, out_off, out_len) {
    assert.equal(arguments.length, 8);
    assert(this.init_done, "write before init");
    assert(this.mode !== exports.NONE, "already finalized");
    assert.equal(false, this.write_in_progress, "write already in progress");
    assert.equal(false, this.pending_close, "close is pending");
    this.write_in_progress = true;
    assert.equal(false, flush === void 0, "must provide flush value");
    this.write_in_progress = true;
    if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
      throw new Error("Invalid flush value");
    }
    if (input == null) {
      input = Buffer.alloc(0);
      in_len = 0;
      in_off = 0;
    }
    this.strm.avail_in = in_len;
    this.strm.input = input;
    this.strm.next_in = in_off;
    this.strm.avail_out = out_len;
    this.strm.output = out;
    this.strm.next_out = out_off;
    this.flush = flush;
    if (!async) {
      this._process();
      if (this._checkError()) {
        return this._afterSync();
      }
      return;
    }
    var self2 = this;
    process.nextTick(function() {
      self2._process();
      self2._after();
    });
    return this;
  };
  Zlib.prototype._afterSync = function() {
    var avail_out = this.strm.avail_out;
    var avail_in = this.strm.avail_in;
    this.write_in_progress = false;
    return [avail_in, avail_out];
  };
  Zlib.prototype._process = function() {
    var next_expected_header_byte = null;
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.GZIP:
      case exports.DEFLATERAW:
        this.err = zlib_deflate.deflate(this.strm, this.flush);
        break;
      case exports.UNZIP:
        if (this.strm.avail_in > 0) {
          next_expected_header_byte = this.strm.next_in;
        }
        switch (this.gzip_id_bytes_read) {
          case 0:
            if (next_expected_header_byte === null) {
              break;
            }
            if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
              this.gzip_id_bytes_read = 1;
              next_expected_header_byte++;
              if (this.strm.avail_in === 1) {
                break;
              }
            } else {
              this.mode = exports.INFLATE;
              break;
            }
          case 1:
            if (next_expected_header_byte === null) {
              break;
            }
            if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
              this.gzip_id_bytes_read = 2;
              this.mode = exports.GUNZIP;
            } else {
              this.mode = exports.INFLATE;
            }
            break;
          default:
            throw new Error("invalid number of gzip magic number bytes read");
        }
      case exports.INFLATE:
      case exports.GUNZIP:
      case exports.INFLATERAW:
        this.err = zlib_inflate.inflate(
          this.strm,
          this.flush
        );
        if (this.err === exports.Z_NEED_DICT && this.dictionary) {
          this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
          if (this.err === exports.Z_OK) {
            this.err = zlib_inflate.inflate(this.strm, this.flush);
          } else if (this.err === exports.Z_DATA_ERROR) {
            this.err = exports.Z_NEED_DICT;
          }
        }
        while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0) {
          this.reset();
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        }
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
  };
  Zlib.prototype._checkError = function() {
    switch (this.err) {
      case exports.Z_OK:
      case exports.Z_BUF_ERROR:
        if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
          this._error("unexpected end of file");
          return false;
        }
        break;
      case exports.Z_STREAM_END:
        break;
      case exports.Z_NEED_DICT:
        if (this.dictionary == null) {
          this._error("Missing dictionary");
        } else {
          this._error("Bad dictionary");
        }
        return false;
      default:
        this._error("Zlib error");
        return false;
    }
    return true;
  };
  Zlib.prototype._after = function() {
    if (!this._checkError()) {
      return;
    }
    var avail_out = this.strm.avail_out;
    var avail_in = this.strm.avail_in;
    this.write_in_progress = false;
    this.callback(avail_in, avail_out);
    if (this.pending_close) {
      this.close();
    }
  };
  Zlib.prototype._error = function(message) {
    if (this.strm.msg) {
      message = this.strm.msg;
    }
    this.onerror(
      message,
      this.err
    );
    this.write_in_progress = false;
    if (this.pending_close) {
      this.close();
    }
  };
  Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
    assert(arguments.length === 4 || arguments.length === 5, "init(windowBits, level, memLevel, strategy, [dictionary])");
    assert(windowBits >= 8 && windowBits <= 15, "invalid windowBits");
    assert(level >= -1 && level <= 9, "invalid compression level");
    assert(memLevel >= 1 && memLevel <= 9, "invalid memlevel");
    assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, "invalid strategy");
    this._init(level, windowBits, memLevel, strategy, dictionary);
    this._setDictionary();
  };
  Zlib.prototype.params = function() {
    throw new Error("deflateParams Not supported");
  };
  Zlib.prototype.reset = function() {
    this._reset();
    this._setDictionary();
  };
  Zlib.prototype._init = function(level, windowBits, memLevel, strategy, dictionary) {
    this.level = level;
    this.windowBits = windowBits;
    this.memLevel = memLevel;
    this.strategy = strategy;
    this.flush = exports.Z_NO_FLUSH;
    this.err = exports.Z_OK;
    if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
      this.windowBits += 16;
    }
    if (this.mode === exports.UNZIP) {
      this.windowBits += 32;
    }
    if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
      this.windowBits = -1 * this.windowBits;
    }
    this.strm = new Zstream();
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.GZIP:
      case exports.DEFLATERAW:
        this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
        break;
      case exports.INFLATE:
      case exports.GUNZIP:
      case exports.INFLATERAW:
      case exports.UNZIP:
        this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
    if (this.err !== exports.Z_OK) {
      this._error("Init error");
    }
    this.dictionary = dictionary;
    this.write_in_progress = false;
    this.init_done = true;
  };
  Zlib.prototype._setDictionary = function() {
    if (this.dictionary == null) {
      return;
    }
    this.err = exports.Z_OK;
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.DEFLATERAW:
        this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
        break;
    }
    if (this.err !== exports.Z_OK) {
      this._error("Failed to set dictionary");
    }
  };
  Zlib.prototype._reset = function() {
    this.err = exports.Z_OK;
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.DEFLATERAW:
      case exports.GZIP:
        this.err = zlib_deflate.deflateReset(this.strm);
        break;
      case exports.INFLATE:
      case exports.INFLATERAW:
      case exports.GUNZIP:
        this.err = zlib_inflate.inflateReset(this.strm);
        break;
    }
    if (this.err !== exports.Z_OK) {
      this._error("Failed to reset stream");
    }
  };
  exports.Zlib = Zlib;
})(binding);
(function(exports) {
  var Buffer2 = require$$0$2.Buffer;
  var Transform2 = streamBrowserify.Transform;
  var binding$1 = binding;
  var util = require$$3$1;
  var assert = require$$0$4.ok;
  var kMaxLength = require$$0$2.kMaxLength;
  var kRangeErrorMessage = "Cannot create final Buffer. It would be larger than 0x" + kMaxLength.toString(16) + " bytes";
  binding$1.Z_MIN_WINDOWBITS = 8;
  binding$1.Z_MAX_WINDOWBITS = 15;
  binding$1.Z_DEFAULT_WINDOWBITS = 15;
  binding$1.Z_MIN_CHUNK = 64;
  binding$1.Z_MAX_CHUNK = Infinity;
  binding$1.Z_DEFAULT_CHUNK = 16 * 1024;
  binding$1.Z_MIN_MEMLEVEL = 1;
  binding$1.Z_MAX_MEMLEVEL = 9;
  binding$1.Z_DEFAULT_MEMLEVEL = 8;
  binding$1.Z_MIN_LEVEL = -1;
  binding$1.Z_MAX_LEVEL = 9;
  binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;
  var bkeys = Object.keys(binding$1);
  for (var bk = 0; bk < bkeys.length; bk++) {
    var bkey = bkeys[bk];
    if (bkey.match(/^Z/)) {
      Object.defineProperty(exports, bkey, {
        enumerable: true,
        value: binding$1[bkey],
        writable: false
      });
    }
  }
  var codes2 = {
    Z_OK: binding$1.Z_OK,
    Z_STREAM_END: binding$1.Z_STREAM_END,
    Z_NEED_DICT: binding$1.Z_NEED_DICT,
    Z_ERRNO: binding$1.Z_ERRNO,
    Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
    Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
    Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
    Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
    Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
  };
  var ckeys = Object.keys(codes2);
  for (var ck = 0; ck < ckeys.length; ck++) {
    var ckey = ckeys[ck];
    codes2[codes2[ckey]] = ckey;
  }
  Object.defineProperty(exports, "codes", {
    enumerable: true,
    value: Object.freeze(codes2),
    writable: false
  });
  exports.Deflate = Deflate;
  exports.Inflate = Inflate;
  exports.Gzip = Gzip;
  exports.Gunzip = Gunzip;
  exports.DeflateRaw = DeflateRaw;
  exports.InflateRaw = InflateRaw;
  exports.Unzip = Unzip;
  exports.createDeflate = function(o) {
    return new Deflate(o);
  };
  exports.createInflate = function(o) {
    return new Inflate(o);
  };
  exports.createDeflateRaw = function(o) {
    return new DeflateRaw(o);
  };
  exports.createInflateRaw = function(o) {
    return new InflateRaw(o);
  };
  exports.createGzip = function(o) {
    return new Gzip(o);
  };
  exports.createGunzip = function(o) {
    return new Gunzip(o);
  };
  exports.createUnzip = function(o) {
    return new Unzip(o);
  };
  exports.deflate = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Deflate(opts), buffer, callback);
  };
  exports.deflateSync = function(buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  };
  exports.gzip = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gzip(opts), buffer, callback);
  };
  exports.gzipSync = function(buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  };
  exports.deflateRaw = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  };
  exports.deflateRawSync = function(buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  };
  exports.unzip = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Unzip(opts), buffer, callback);
  };
  exports.unzipSync = function(buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  };
  exports.inflate = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Inflate(opts), buffer, callback);
  };
  exports.inflateSync = function(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  };
  exports.gunzip = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gunzip(opts), buffer, callback);
  };
  exports.gunzipSync = function(buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  };
  exports.inflateRaw = function(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  };
  exports.inflateRawSync = function(buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  };
  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;
    engine.on("error", onError);
    engine.on("end", onEnd);
    engine.end(buffer);
    flow();
    function flow() {
      var chunk;
      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }
      engine.once("readable", flow);
    }
    function onError(err2) {
      engine.removeListener("end", onEnd);
      engine.removeListener("readable", flow);
      callback(err2);
    }
    function onEnd() {
      var buf;
      var err2 = null;
      if (nread >= kMaxLength) {
        err2 = new RangeError(kRangeErrorMessage);
      } else {
        buf = Buffer2.concat(buffers, nread);
      }
      buffers = [];
      engine.close();
      callback(err2, buf);
    }
  }
  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === "string")
      buffer = Buffer2.from(buffer);
    if (!Buffer2.isBuffer(buffer))
      throw new TypeError("Not a string or buffer");
    var flushFlag = engine._finishFlushFlag;
    return engine._processChunk(buffer, flushFlag);
  }
  function Deflate(opts) {
    if (!(this instanceof Deflate))
      return new Deflate(opts);
    Zlib.call(this, opts, binding$1.DEFLATE);
  }
  function Inflate(opts) {
    if (!(this instanceof Inflate))
      return new Inflate(opts);
    Zlib.call(this, opts, binding$1.INFLATE);
  }
  function Gzip(opts) {
    if (!(this instanceof Gzip))
      return new Gzip(opts);
    Zlib.call(this, opts, binding$1.GZIP);
  }
  function Gunzip(opts) {
    if (!(this instanceof Gunzip))
      return new Gunzip(opts);
    Zlib.call(this, opts, binding$1.GUNZIP);
  }
  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw))
      return new DeflateRaw(opts);
    Zlib.call(this, opts, binding$1.DEFLATERAW);
  }
  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw))
      return new InflateRaw(opts);
    Zlib.call(this, opts, binding$1.INFLATERAW);
  }
  function Unzip(opts) {
    if (!(this instanceof Unzip))
      return new Unzip(opts);
    Zlib.call(this, opts, binding$1.UNZIP);
  }
  function isValidFlushFlag(flag) {
    return flag === binding$1.Z_NO_FLUSH || flag === binding$1.Z_PARTIAL_FLUSH || flag === binding$1.Z_SYNC_FLUSH || flag === binding$1.Z_FULL_FLUSH || flag === binding$1.Z_FINISH || flag === binding$1.Z_BLOCK;
  }
  function Zlib(opts, mode) {
    var _this = this;
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
    Transform2.call(this, opts);
    if (opts.flush && !isValidFlushFlag(opts.flush)) {
      throw new Error("Invalid flush flag: " + opts.flush);
    }
    if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
      throw new Error("Invalid flush flag: " + opts.finishFlush);
    }
    this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;
    this._finishFlushFlag = typeof opts.finishFlush !== "undefined" ? opts.finishFlush : binding$1.Z_FINISH;
    if (opts.chunkSize) {
      if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
        throw new Error("Invalid chunk size: " + opts.chunkSize);
      }
    }
    if (opts.windowBits) {
      if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
        throw new Error("Invalid windowBits: " + opts.windowBits);
      }
    }
    if (opts.level) {
      if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
        throw new Error("Invalid compression level: " + opts.level);
      }
    }
    if (opts.memLevel) {
      if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
        throw new Error("Invalid memLevel: " + opts.memLevel);
      }
    }
    if (opts.strategy) {
      if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
        throw new Error("Invalid strategy: " + opts.strategy);
      }
    }
    if (opts.dictionary) {
      if (!Buffer2.isBuffer(opts.dictionary)) {
        throw new Error("Invalid dictionary: it should be a Buffer instance");
      }
    }
    this._handle = new binding$1.Zlib(mode);
    var self2 = this;
    this._hadError = false;
    this._handle.onerror = function(message, errno) {
      _close(self2);
      self2._hadError = true;
      var error = new Error(message);
      error.errno = errno;
      error.code = exports.codes[errno];
      self2.emit("error", error);
    };
    var level = exports.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === "number")
      level = opts.level;
    var strategy = exports.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === "number")
      strategy = opts.strategy;
    this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
    this._buffer = Buffer2.allocUnsafe(this._chunkSize);
    this._offset = 0;
    this._level = level;
    this._strategy = strategy;
    this.once("end", this.close);
    Object.defineProperty(this, "_closed", {
      get: function() {
        return !_this._handle;
      },
      configurable: true,
      enumerable: true
    });
  }
  util.inherits(Zlib, Transform2);
  Zlib.prototype.params = function(level, strategy, callback) {
    if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
      throw new RangeError("Invalid compression level: " + level);
    }
    if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new TypeError("Invalid strategy: " + strategy);
    }
    if (this._level !== level || this._strategy !== strategy) {
      var self2 = this;
      this.flush(binding$1.Z_SYNC_FLUSH, function() {
        assert(self2._handle, "zlib binding closed");
        self2._handle.params(level, strategy);
        if (!self2._hadError) {
          self2._level = level;
          self2._strategy = strategy;
          if (callback)
            callback();
        }
      });
    } else {
      process.nextTick(callback);
    }
  };
  Zlib.prototype.reset = function() {
    assert(this._handle, "zlib binding closed");
    return this._handle.reset();
  };
  Zlib.prototype._flush = function(callback) {
    this._transform(Buffer2.alloc(0), "", callback);
  };
  Zlib.prototype.flush = function(kind, callback) {
    var _this2 = this;
    var ws = this._writableState;
    if (typeof kind === "function" || kind === void 0 && !callback) {
      callback = kind;
      kind = binding$1.Z_FULL_FLUSH;
    }
    if (ws.ended) {
      if (callback)
        process.nextTick(callback);
    } else if (ws.ending) {
      if (callback)
        this.once("end", callback);
    } else if (ws.needDrain) {
      if (callback) {
        this.once("drain", function() {
          return _this2.flush(kind, callback);
        });
      }
    } else {
      this._flushFlag = kind;
      this.write(Buffer2.alloc(0), "", callback);
    }
  };
  Zlib.prototype.close = function(callback) {
    _close(this, callback);
    process.nextTick(emitCloseNT2, this);
  };
  function _close(engine, callback) {
    if (callback)
      process.nextTick(callback);
    if (!engine._handle)
      return;
    engine._handle.close();
    engine._handle = null;
  }
  function emitCloseNT2(self2) {
    self2.emit("close");
  }
  Zlib.prototype._transform = function(chunk, encoding, cb) {
    var flushFlag;
    var ws = this._writableState;
    var ending = ws.ending || ws.ended;
    var last = ending && (!chunk || ws.length === chunk.length);
    if (chunk !== null && !Buffer2.isBuffer(chunk))
      return cb(new Error("invalid input"));
    if (!this._handle)
      return cb(new Error("zlib binding closed"));
    if (last)
      flushFlag = this._finishFlushFlag;
    else {
      flushFlag = this._flushFlag;
      if (chunk.length >= ws.length) {
        this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
      }
    }
    this._processChunk(chunk, flushFlag, cb);
  };
  Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var inOff = 0;
    var self2 = this;
    var async = typeof cb === "function";
    if (!async) {
      var buffers = [];
      var nread = 0;
      var error;
      this.on("error", function(er) {
        error = er;
      });
      assert(this._handle, "zlib binding closed");
      do {
        var res = this._handle.writeSync(
          flushFlag,
          chunk,
          inOff,
          availInBefore,
          this._buffer,
          this._offset,
          availOutBefore
        );
      } while (!this._hadError && callback(res[0], res[1]));
      if (this._hadError) {
        throw error;
      }
      if (nread >= kMaxLength) {
        _close(this);
        throw new RangeError(kRangeErrorMessage);
      }
      var buf = Buffer2.concat(buffers, nread);
      _close(this);
      return buf;
    }
    assert(this._handle, "zlib binding closed");
    var req = this._handle.write(
      flushFlag,
      chunk,
      inOff,
      availInBefore,
      this._buffer,
      this._offset,
      availOutBefore
    );
    req.buffer = chunk;
    req.callback = callback;
    function callback(availInAfter, availOutAfter) {
      if (this) {
        this.buffer = null;
        this.callback = null;
      }
      if (self2._hadError)
        return;
      var have = availOutBefore - availOutAfter;
      assert(have >= 0, "have should not go down");
      if (have > 0) {
        var out = self2._buffer.slice(self2._offset, self2._offset + have);
        self2._offset += have;
        if (async) {
          self2.push(out);
        } else {
          buffers.push(out);
          nread += out.length;
        }
      }
      if (availOutAfter === 0 || self2._offset >= self2._chunkSize) {
        availOutBefore = self2._chunkSize;
        self2._offset = 0;
        self2._buffer = Buffer2.allocUnsafe(self2._chunkSize);
      }
      if (availOutAfter === 0) {
        inOff += availInBefore - availInAfter;
        availInBefore = availInAfter;
        if (!async)
          return true;
        var newReq = self2._handle.write(flushFlag, chunk, inOff, availInBefore, self2._buffer, self2._offset, self2._chunkSize);
        newReq.callback = callback;
        newReq.buffer = chunk;
        return;
      }
      if (!async)
        return false;
      cb();
    }
  };
  util.inherits(Deflate, Zlib);
  util.inherits(Inflate, Zlib);
  util.inherits(Gzip, Zlib);
  util.inherits(Gunzip, Zlib);
  util.inherits(DeflateRaw, Zlib);
  util.inherits(InflateRaw, Zlib);
  util.inherits(Unzip, Zlib);
})(lib);
const zlib = lib;
const Readable = streamBrowserify.Readable;
const BUFFER = Symbol("buffer");
const TYPE = Symbol("type");
class Blob$1 {
  constructor() {
    this[TYPE] = "";
    const blobParts = arguments[0];
    const options = arguments[1];
    const buffers = [];
    let size = 0;
    if (blobParts) {
      const a = blobParts;
      const length = Number(a.length);
      for (let i = 0; i < length; i++) {
        const element = a[i];
        let buffer;
        if (element instanceof Buffer) {
          buffer = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer = Buffer.from(element);
        } else if (element instanceof Blob$1) {
          buffer = element[BUFFER];
        } else {
          buffer = Buffer.from(typeof element === "string" ? element : String(element));
        }
        size += buffer.length;
        buffers.push(buffer);
      }
    }
    this[BUFFER] = Buffer.concat(buffers);
    let type = options && options.type !== void 0 && String(options.type).toLowerCase();
    if (type && !/[^\u0020-\u007E]/.test(type)) {
      this[TYPE] = type;
    }
  }
  get size() {
    return this[BUFFER].length;
  }
  get type() {
    return this[TYPE];
  }
  text() {
    return Promise.resolve(this[BUFFER].toString());
  }
  arrayBuffer() {
    const buf = this[BUFFER];
    const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    return Promise.resolve(ab);
  }
  stream() {
    const readable = new Readable();
    readable._read = function() {
    };
    readable.push(this[BUFFER]);
    readable.push(null);
    return readable;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const size = this.size;
    const start = arguments[0];
    const end = arguments[1];
    let relativeStart, relativeEnd;
    if (start === void 0) {
      relativeStart = 0;
    } else if (start < 0) {
      relativeStart = Math.max(size + start, 0);
    } else {
      relativeStart = Math.min(start, size);
    }
    if (end === void 0) {
      relativeEnd = size;
    } else if (end < 0) {
      relativeEnd = Math.max(size + end, 0);
    } else {
      relativeEnd = Math.min(end, size);
    }
    const span = Math.max(relativeEnd - relativeStart, 0);
    const buffer = this[BUFFER];
    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
    const blob = new Blob$1([], { type: arguments[2] });
    blob[BUFFER] = slicedBuffer;
    return blob;
  }
}
Object.defineProperties(Blob$1.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
});
Object.defineProperty(Blob$1.prototype, Symbol.toStringTag, {
  value: "Blob",
  writable: false,
  enumerable: false,
  configurable: true
});
function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = "FetchError";
const INTERNALS = Symbol("Body internals");
const PassThrough = streamBrowserify.PassThrough;
function Body(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof streamBrowserify)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof streamBrowserify) {
    body.on("error", function(err2) {
      const error = err2.name === "AbortError" ? err2 : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err2.message}`, "system", err2);
      _this[INTERNALS].error = error;
    });
  }
}
Body.prototype = {
  get body() {
    return this[INTERNALS].body;
  },
  get bodyUsed() {
    return this[INTERNALS].disturbed;
  },
  arrayBuffer() {
    return consumeBody.call(this).then(function(buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },
  blob() {
    let ct = this.headers && this.headers.get("content-type") || "";
    return consumeBody.call(this).then(function(buf) {
      return Object.assign(
        new Blob$1([], {
          type: ct.toLowerCase()
        }),
        {
          [BUFFER]: buf
        }
      );
    });
  },
  json() {
    var _this2 = this;
    return consumeBody.call(this).then(function(buffer) {
      try {
        return JSON.parse(buffer.toString());
      } catch (err2) {
        return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err2.message}`, "invalid-json"));
      }
    });
  },
  text() {
    return consumeBody.call(this).then(function(buffer) {
      return buffer.toString();
    });
  },
  buffer() {
    return consumeBody.call(this);
  },
  textConverted() {
    var _this3 = this;
    return consumeBody.call(this).then(function(buffer) {
      return convertBody(buffer, _this3.headers);
    });
  }
};
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true }
});
Body.mixIn = function(proto) {
  for (const name2 of Object.getOwnPropertyNames(Body.prototype)) {
    if (!(name2 in proto)) {
      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name2);
      Object.defineProperty(proto, name2, desc);
    }
  }
};
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }
  if (!(body instanceof streamBrowserify)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function(resolve, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err2) {
      if (err2.name === "AbortError") {
        abort = true;
        reject(err2);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err2.message}`, "system", err2));
      }
    });
    body.on("data", function(chunk) {
      if (abort || chunk === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err2) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err2.message}`, "system", err2));
      }
    });
  });
}
function convertBody(buffer, headers) {
  {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p2;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof streamBrowserify && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof streamBrowserify) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
Body.Promise = global.Promise;
const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
function validateName(name2) {
  name2 = `${name2}`;
  if (invalidTokenRegex.test(name2) || name2 === "") {
    throw new TypeError(`${name2} is not a legal HTTP header name`);
  }
}
function validateValue(value) {
  value = `${value}`;
  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
function find(map, name2) {
  name2 = name2.toLowerCase();
  for (const key in map) {
    if (key.toLowerCase() === name2) {
      return key;
    }
  }
  return void 0;
}
const MAP = Symbol("map");
class Headers$1 {
  constructor() {
    let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
    this[MAP] = /* @__PURE__ */ Object.create(null);
    if (init instanceof Headers$1) {
      const rawHeaders = init.raw();
      const headerNames = Object.keys(rawHeaders);
      for (const headerName of headerNames) {
        for (const value of rawHeaders[headerName]) {
          this.append(headerName, value);
        }
      }
      return;
    }
    if (init == null)
      ;
    else if (typeof init === "object") {
      const method = init[Symbol.iterator];
      if (method != null) {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        const pairs = [];
        for (const pair of init) {
          if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
            throw new TypeError("Each header pair must be iterable");
          }
          pairs.push(Array.from(pair));
        }
        for (const pair of pairs) {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          this.append(pair[0], pair[1]);
        }
      } else {
        for (const key of Object.keys(init)) {
          const value = init[key];
          this.append(key, value);
        }
      }
    } else {
      throw new TypeError("Provided initializer must be an object");
    }
  }
  get(name2) {
    name2 = `${name2}`;
    validateName(name2);
    const key = find(this[MAP], name2);
    if (key === void 0) {
      return null;
    }
    return this[MAP][key].join(", ");
  }
  forEach(callback) {
    let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    let pairs = getHeaders(this);
    let i = 0;
    while (i < pairs.length) {
      var _pairs$i = pairs[i];
      const name2 = _pairs$i[0], value = _pairs$i[1];
      callback.call(thisArg, value, name2, this);
      pairs = getHeaders(this);
      i++;
    }
  }
  set(name2, value) {
    name2 = `${name2}`;
    value = `${value}`;
    validateName(name2);
    validateValue(value);
    const key = find(this[MAP], name2);
    this[MAP][key !== void 0 ? key : name2] = [value];
  }
  append(name2, value) {
    name2 = `${name2}`;
    value = `${value}`;
    validateName(name2);
    validateValue(value);
    const key = find(this[MAP], name2);
    if (key !== void 0) {
      this[MAP][key].push(value);
    } else {
      this[MAP][name2] = [value];
    }
  }
  has(name2) {
    name2 = `${name2}`;
    validateName(name2);
    return find(this[MAP], name2) !== void 0;
  }
  delete(name2) {
    name2 = `${name2}`;
    validateName(name2);
    const key = find(this[MAP], name2);
    if (key !== void 0) {
      delete this[MAP][key];
    }
  }
  raw() {
    return this[MAP];
  }
  keys() {
    return createHeadersIterator(this, "key");
  }
  values() {
    return createHeadersIterator(this, "value");
  }
  [Symbol.iterator]() {
    return createHeadersIterator(this, "key+value");
  }
}
Headers$1.prototype.entries = Headers$1.prototype[Symbol.iterator];
Object.defineProperty(Headers$1.prototype, Symbol.toStringTag, {
  value: "Headers",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Headers$1.prototype, {
  get: { enumerable: true },
  forEach: { enumerable: true },
  set: { enumerable: true },
  append: { enumerable: true },
  has: { enumerable: true },
  delete: { enumerable: true },
  keys: { enumerable: true },
  values: { enumerable: true },
  entries: { enumerable: true }
});
function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind === "key" ? function(k) {
    return k.toLowerCase();
  } : kind === "value" ? function(k) {
    return headers[MAP][k].join(", ");
  } : function(k) {
    return [k.toLowerCase(), headers[MAP][k].join(", ")];
  });
}
const INTERNAL = Symbol("internal");
function createHeadersIterator(target, kind) {
  const iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator;
}
const HeadersIteratorPrototype = Object.setPrototypeOf({
  next() {
    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
      throw new TypeError("Value of `this` is not a HeadersIterator");
    }
    var _INTERNAL = this[INTERNAL];
    const target = _INTERNAL.target, kind = _INTERNAL.kind, index2 = _INTERNAL.index;
    const values = getHeaders(target, kind);
    const len = values.length;
    if (index2 >= len) {
      return {
        value: void 0,
        done: true
      };
    }
    this[INTERNAL].index = index2 + 1;
    return {
      value: values[index2],
      done: false
    };
  }
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
  value: "HeadersIterator",
  writable: false,
  enumerable: false,
  configurable: true
});
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers$1();
  for (const name2 of Object.keys(obj)) {
    if (invalidTokenRegex.test(name2)) {
      continue;
    }
    if (Array.isArray(obj[name2])) {
      for (const val of obj[name2]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }
        if (headers[MAP][name2] === void 0) {
          headers[MAP][name2] = [val];
        } else {
          headers[MAP][name2].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name2])) {
      headers[MAP][name2] = [obj[name2]];
    }
  }
  return headers;
}
const INTERNALS$1 = Symbol("Response internals");
const STATUS_CODES = http.STATUS_CODES;
class Response$1 {
  constructor() {
    let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Body.call(this, body, opts);
    const status = opts.status || 200;
    const headers = new Headers$1(opts.headers);
    if (body != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      url: opts.url,
      status,
      statusText: opts.statusText || STATUS_CODES[status],
      headers,
      counter: opts.counter
    };
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  clone() {
    return new Response$1(clone(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }
}
Body.mixIn(Response$1.prototype);
Object.defineProperties(Response$1.prototype, {
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});
Object.defineProperty(Response$1.prototype, Symbol.toStringTag, {
  value: "Response",
  writable: false,
  enumerable: false,
  configurable: true
});
const INTERNALS$2 = Symbol("Request internals");
const URL$1 = Url.URL || publicApi.URL;
const parse_url = Url.parse;
const format_url = Url.format;
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL$1(urlStr).toString();
  }
  return parse_url(urlStr);
}
const streamDestructionSupported = "destroy" in streamBrowserify.Readable.prototype;
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
class Request {
  constructor(input) {
    let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let parsedURL;
    if (!isRequest(input)) {
      if (input && input.href) {
        parsedURL = parseURL(input.href);
      } else {
        parsedURL = parseURL(`${input}`);
      }
      input = {};
    } else {
      parsedURL = parseURL(input.url);
    }
    let method = init.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    const headers = new Headers$1(init.headers || input.headers || {});
    if (inputBody != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init)
      signal = init.signal;
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    }
    this[INTERNALS$2] = {
      method,
      redirect: init.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
    this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }
  get method() {
    return this[INTERNALS$2].method;
  }
  get url() {
    return format_url(this[INTERNALS$2].parsedURL);
  }
  get headers() {
    return this[INTERNALS$2].headers;
  }
  get redirect() {
    return this[INTERNALS$2].redirect;
  }
  get signal() {
    return this[INTERNALS$2].signal;
  }
  clone() {
    return new Request(this);
  }
}
Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, Symbol.toStringTag, {
  value: "Request",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true }
});
function getNodeRequestOptions(request2) {
  const parsedURL = request2[INTERNALS$2].parsedURL;
  const headers = new Headers$1(request2[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request2.signal && request2.body instanceof streamBrowserify.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request2.body == null && /^(POST|PUT)$/i.test(request2.method)) {
    contentLengthValue = "0";
  }
  if (request2.body != null) {
    const totalBytes = getTotalBytes(request2);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request2.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request2.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  return Object.assign({}, parsedURL, {
    method: request2.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = "AbortError";
const URL$1$1 = Url.URL || publicApi.URL;
const PassThrough$1 = streamBrowserify.PassThrough;
const isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
  const orig = new URL$1$1(original).hostname;
  const dest = new URL$1$1(destination).hostname;
  return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
};
const isSameProtocol = function isSameProtocol2(destination, original) {
  const orig = new URL$1$1(original).protocol;
  const dest = new URL$1$1(destination).protocol;
  return orig === dest;
};
function fetch$1(url, opts) {
  if (!fetch$1.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body.Promise = fetch$1.Promise;
  return new fetch$1.Promise(function(resolve, reject) {
    const request2 = new Request(url, opts);
    const options = getNodeRequestOptions(request2);
    const send = (options.protocol === "https:" ? https : http).request;
    const signal = request2.signal;
    let response2 = null;
    const abort = function abort2() {
      let error = new AbortError("The user aborted a request.");
      reject(error);
      if (request2.body && request2.body instanceof streamBrowserify.Readable) {
        destroyStream(request2.body, error);
      }
      if (!response2 || !response2.body)
        return;
      response2.body.emit("error", error);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request2.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request2.url}`, "request-timeout"));
          finalize();
        }, request2.timeout);
      });
    }
    req.on("error", function(err2) {
      reject(new FetchError(`request to ${request2.url} failed, reason: ${err2.message}`, "system", err2));
      if (response2 && response2.body) {
        destroyStream(response2.body, err2);
      }
      finalize();
    });
    fixResponseChunkedTransferBadEnding(req, function(err2) {
      if (signal && signal.aborted) {
        return;
      }
      if (response2 && response2.body) {
        destroyStream(response2.body, err2);
      }
    });
    if (parseInt(process.version.substring(1)) < 14) {
      req.on("socket", function(s) {
        s.addListener("close", function(hadError) {
          const hasDataListener = s.listenerCount("data") > 0;
          if (response2 && hasDataListener && !hadError && !(signal && signal.aborted)) {
            const err2 = new Error("Premature close");
            err2.code = "ERR_STREAM_PREMATURE_CLOSE";
            response2.body.emit("error", err2);
          }
        });
      });
    }
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch$1.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1$1(location, request2.url).toString();
        } catch (err2) {
          if (request2.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request2.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request2.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err2) {
                reject(err2);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request2.counter >= request2.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request2.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers$1(request2.headers),
              follow: request2.follow,
              counter: request2.counter + 1,
              agent: request2.agent,
              compress: request2.compress,
              method: request2.method,
              body: request2.body,
              signal: request2.signal,
              timeout: request2.timeout,
              size: request2.size
            };
            if (!isDomainOrSubdomain(request2.url, locationURL) || !isSameProtocol(request2.url, locationURL)) {
              for (const name2 of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name2);
              }
            }
            if (res.statusCode !== 303 && request2.body && getTotalBytes(request2) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request2.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve(fetch$1(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request2.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request2.size,
        timeout: request2.timeout,
        counter: request2.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request2.compress || request2.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response2 = new Response$1(body, response_options);
        resolve(response2);
        return;
      }
      const zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(zlib.createGunzip(zlibOptions));
        response2 = new Response$1(body, response_options);
        resolve(response2);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk) {
          if ((chunk[0] & 15) === 8) {
            body = body.pipe(zlib.createInflate());
          } else {
            body = body.pipe(zlib.createInflateRaw());
          }
          response2 = new Response$1(body, response_options);
          resolve(response2);
        });
        raw.on("end", function() {
          if (!response2) {
            response2 = new Response$1(body, response_options);
            resolve(response2);
          }
        });
        return;
      }
      if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
        body = body.pipe(zlib.createBrotliDecompress());
        response2 = new Response$1(body, response_options);
        resolve(response2);
        return;
      }
      response2 = new Response$1(body, response_options);
      resolve(response2);
    });
    writeToStream(req, request2);
  });
}
function fixResponseChunkedTransferBadEnding(request2, errorCallback) {
  let socket;
  request2.on("socket", function(s) {
    socket = s;
  });
  request2.on("response", function(response2) {
    const headers = response2.headers;
    if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
      response2.once("close", function(hadError) {
        const hasDataListener = socket && socket.listenerCount("data") > 0;
        if (hasDataListener && !hadError) {
          const err2 = new Error("Premature close");
          err2.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(err2);
        }
      });
    }
  });
}
function destroyStream(stream2, err2) {
  if (stream2.destroy) {
    stream2.destroy(err2);
  } else {
    stream2.emit("error", err2);
    stream2.end();
  }
}
fetch$1.isRedirect = function(code) {
  return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};
fetch$1.Promise = global.Promise;
const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: fetch$1,
  Headers: Headers$1,
  Request,
  Response: Response$1,
  FetchError
}, Symbol.toStringTag, { value: "Module" }));
export {
  qwikCityHandler as default
};
